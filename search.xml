<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>信息收集流程介绍</title>
    <url>/2021/10/05/0x01%20%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/1.%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%B5%81%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="基本的红队测试流程介绍"><a href="#基本的红队测试流程介绍" class="headerlink" title="基本的红队测试流程介绍"></a>基本的红队测试流程介绍</h2><ol>
<li>接到项目合同并制定相应计划</li>
<li>准备相应的工具和材料</li>
<li>做第一次信息收集</li>
<li>做漏洞扫描或攻击面测试</li>
<li>针对突出的攻击面做具体的渗透</li>
<li>进入环境之后的第二次信息收集</li>
<li>提升权限</li>
<li>维持选项</li>
<li>寻找扩大攻击面的渠道</li>
<li>清理攻击痕迹</li>
<li>编写报告</li>
</ol>
<h2 id="信息收集在整个红队测试流程中的定位"><a href="#信息收集在整个红队测试流程中的定位" class="headerlink" title="信息收集在整个红队测试流程中的定位"></a>信息收集在整个红队测试流程中的定位</h2><p>每一步的攻击流程都是非常重要的。</p>
<p>如果最终达到的目的不需要某几部流程，那么就完全不用去做。</p>
<p>信息收集在整个渗透测试流程中是非常重要的步骤，是决定攻击是否成功的决定点。</p>
<p>信息收集决定之后的攻击面或漏洞扫描的范围，也决定整个攻击过程中对自己和目标的定位。</p>
<h3 id="信息收集的基本要求"><a href="#信息收集的基本要求" class="headerlink" title="信息收集的基本要求"></a>信息收集的基本要求</h3><ol>
<li>全面 做到对目标所有的业务面和非业务面的存在点进行全面信息收集。</li>
<li>准确 对收集到的信息尤其是重要信息再三确认其信息的准确性，对信息的内容所涉及的技术要点手动查看。</li>
<li>时效 对收集到的信息要注意信息产生的时间和收集到的时间，是否具有时间差，时间差能否接受，如果存在失效的信息要及时清除。</li>
<li>清晰 对收集到的信息要逻辑清晰，能清楚地分辨出各个收集到的信息之间的逻辑关系和资产之间的相对位置，对于总体目标要有清晰的资产逻辑和业务逻辑认识。</li>
<li>拓扑 对于收集到的信息要以这些为起点做拓扑再次进行信息收集。</li>
</ol>
<h3 id="信息收集的底层逻辑"><a href="#信息收集的底层逻辑" class="headerlink" title="信息收集的底层逻辑"></a>信息收集的底层逻辑</h3><p>通过各种渠道对目标已公开或未公开的信息做提取。</p>
<h3 id="信息收集的注意事项"><a href="#信息收集的注意事项" class="headerlink" title="信息收集的注意事项"></a>信息收集的注意事项</h3><p>降低被发现度、提高隐蔽性。</p>
<p>细心与耐心。</p>
<h3 id="信息收集的对象"><a href="#信息收集的对象" class="headerlink" title="信息收集的对象"></a>信息收集的对象</h3><p>根据目标的不同，目标需要什么要素运行，我们就收集什么要素。</p>
<p>比如一个web站点，需要收集的信息如下：</p>
<ul>
<li>服务器IP</li>
<li>操作系统</li>
<li>Web容器</li>
<li>端口</li>
<li>协议</li>
<li>CDN</li>
<li>HTTPS证书</li>
<li>域名</li>
<li>DNS</li>
<li>脚本语言</li>
<li>框架、CMS</li>
<li>数据库</li>
<li>负载匀衡</li>
<li>WAF</li>
<li>敏感目录</li>
<li>代码泄露</li>
</ul>
<p>一个微信小程序，需要收集的信息如下：</p>
<ul>
<li>接口</li>
<li>信任域名</li>
<li>JS、AJAX</li>
</ul>
<h3 id="信息收集的分类"><a href="#信息收集的分类" class="headerlink" title="信息收集的分类"></a>信息收集的分类</h3><p>主动信息收集</p>
<p>被动信息收集</p>
<h2 id="被动信息收集"><a href="#被动信息收集" class="headerlink" title="被动信息收集"></a>被动信息收集</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ol>
<li>第三方的信息收集机构或者平台已经收集到目标的信息</li>
<li>第三方的信息收集机构或者平台将信息存储在某处</li>
<li>攻击者从存储信息的地方查询信息</li>
<li>攻击者得到相应信息</li>
</ol>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p>
<ol>
<li>隐蔽性高，不容易被发现</li>
<li>收集的信息量和覆盖面比较大</li>
</ol>
<p>缺点：</p>
<ol>
<li>收集到信息的时效性或准确性不高</li>
<li>无法收集到敏感或者未公开的信息</li>
</ol>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>被动信息收集在实战中非常常用，尤其是在网络安全攻防对抗中，我们通常见到的各种渗透流程也会经常使用被动信息收集，比如通过被动信息收集获得目标的基本要素，然后根据信息要素判断特定并分析脆弱点，最后根据脆弱点针对性地做下一步的攻击活动。</p>
<h3 id="实战中的被动信息收集是怎么做的"><a href="#实战中的被动信息收集是怎么做的" class="headerlink" title="实战中的被动信息收集是怎么做的"></a>实战中的被动信息收集是怎么做的</h3><p><strong>多工具、多平台、分布式</strong>。结合这三点的大型信息收集综合项目，并且收集到的信息会集中整合和自动化的分析处理。</p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>资产收集</category>
      </categories>
      <tags>
        <tag>资产收集</tag>
      </tags>
  </entry>
  <entry>
    <title>开源情报与搜索引擎</title>
    <url>/2021/10/05/0x01%20%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/2.%E5%BC%80%E6%BA%90%E6%83%85%E6%8A%A5%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h2 id="OSINT的介绍"><a href="#OSINT的介绍" class="headerlink" title="OSINT的介绍"></a>OSINT的介绍</h2><p>开源情报是指合法地从公开和可公开获得的资源中收集数据和信息的做法。OSINT操作——无论是由IT安全专家、恶意行为者还是民族国家支持的情报人员所实施——使用先进的技术来搜索海量的可见数据，以找到满足他们需求的信息。</p>
<p>尽管下述许多OSINT工具是开源的，但本文中的“开源”并不是指开源软件运动；相反，它描述了被分析数据的公共性质。</p>
<p>OSINT在许多方面是操作安全（OPSEC）的镜像，在这个信息大爆炸的时代，OSINT对于密切关注有效信息显得至关重要。如果分析得当，这些数据可能会揭示破坏性的真相。IT安全部门越来越多地承担在自己的组织中执行OSINT操作以支持操作安全的任务。</p>
<p>如今，市场上大多数OSINT工具都提供下述三种关键功能，其中许多工具在某一特定领域表现得格外突出。</p>
<h3 id="发现面向公众的资产"><a href="#发现面向公众的资产" class="headerlink" title="发现面向公众的资产"></a>发现面向公众的资产</h3><p>它们最常见的功能是帮助IT团队发现面向公众的资产，并绘制每个人所拥有的可能导致潜在攻击面的信息。一般来说，它们不会试图寻找程序漏洞或执行渗透测试之类的事情。它们的主要工作是记录某人可以在无需诉诸黑客攻击的情况下公开找到的有关公司资产的信息。</p>
<h3 id="发现组织外的相关信息"><a href="#发现组织外的相关信息" class="headerlink" title="发现组织外的相关信息"></a>发现组织外的相关信息</h3><p>一些OSINT工具执行的第二个功能是在组织外部（例如在社交媒体帖子中或在可能位于严格定义的网络之外的域和位置）寻找相关信息。那些进行了大量收购并获得了他们要合并的公司的 IT 资产的组织会发现此功能非常有用。鉴于社交媒体的急剧增长和流行，在公司范围之外寻找敏感信息可能对任何群体都有帮助。</p>
<h3 id="将发现的信息整理成可操作的形式"><a href="#将发现的信息整理成可操作的形式" class="headerlink" title="将发现的信息整理成可操作的形式"></a>将发现的信息整理成可操作的形式</h3><p>最后，一些OSINT工具有助于将所有发现的信息整理和分组为有用且可操作的情报。为大型企业运行OSINT扫描可以产生数十万个结果，尤其是在包括内部和外部资产的情况下。整合所有数据并且能够优先处理最严重的问题将非常有帮助。</p>
<h2 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h2><p>Google hacking 也叫 Google dorking，是一种利用谷歌搜索和其他谷歌应用程序来发现网站配置和计算机代码中的安全漏洞的计算机黑客技术。</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table>
<thead>
<tr>
<th><strong>通配符</strong></th>
<th><strong>语义</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>包含关键字</td>
<td>+前面必须要有一个空格</td>
<td>admin +login</td>
</tr>
<tr>
<td>-</td>
<td>排除关键字</td>
<td>-前面必须要有一个空格</td>
<td>mysql -csdn</td>
</tr>
<tr>
<td>~</td>
<td>同义词</td>
<td>~前面必须要有一个空格</td>
<td>admin ~login</td>
</tr>
<tr>
<td>*</td>
<td>模糊查询</td>
<td>*代替任意字符</td>
<td>mysql**</td>
</tr>
<tr>
<td>“”</td>
<td>强调</td>
<td>-</td>
<td>“mysql”</td>
</tr>
</tbody></table>
<h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h3><table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th><strong>语义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>intitle</td>
<td>包含标题</td>
</tr>
<tr>
<td>intext</td>
<td>包含内容</td>
</tr>
<tr>
<td>filetype</td>
<td>文件类型</td>
</tr>
<tr>
<td>info</td>
<td>基本信息</td>
</tr>
<tr>
<td>site</td>
<td>指定网站</td>
</tr>
<tr>
<td>inurl</td>
<td>包含某个url</td>
</tr>
<tr>
<td>link</td>
<td>包含指定链接的网页</td>
</tr>
<tr>
<td>cache</td>
<td>显示页面缓存版本</td>
</tr>
<tr>
<td>numberrange</td>
<td>搜索一个数字</td>
</tr>
<tr>
<td>daterange</td>
<td>查找指定日期范围内发布的网页</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>1、查找目录列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intitle:index.of</span><br><span class="line"></span><br><span class="line">intext: index of / | ../ | Parent Directory</span><br></pre></td></tr></table></figure>

<p>2、查找ws_ftp.log文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intitle:index.of ws_ftp.log</span><br><span class="line"></span><br><span class="line">inurl:ws_ftp.log filetype:log</span><br></pre></td></tr></table></figure>

<p>3、查找wordpress泄露的敏感信息文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inurl:wp-content/uploads/data.txt</span><br></pre></td></tr></table></figure>

<p>4、查找后台登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intext:后台登录 | intitle:后台登录</span><br><span class="line"></span><br><span class="line">inurl:/admin intext:后台管理系统</span><br></pre></td></tr></table></figure>

<p>5、查找渗透测试报告</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;渗透测试报告&quot; filetype:doc | filetype:pdf</span><br></pre></td></tr></table></figure>

<p>6、查找wut.edu.cn下的子域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:wut.edu.cn</span><br></pre></td></tr></table></figure>

<p>7、查找wut.edu.cn的后台管理地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:wut.edu.cn inurl:login|admin|admin\_login|login\_admin|system|manager|user|main|cms|dede|guanli|houtai</span><br></pre></td></tr></table></figure>

<p>8、查找wut.edu.cn的可能存在的注入点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:wut.edu.cn inurl:php?id|asp?id|aspx?id|jsp?id</span><br></pre></td></tr></table></figure>

<p>9、查找wut.eddu.cn的可能存在的文件上传漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site wut.edu.cn inurl:file|files|load|editor</span><br></pre></td></tr></table></figure>

<p>10、查看baidu.com的缓存信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cache:baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="谷歌黑客数据库"><a href="#谷歌黑客数据库" class="headerlink" title="谷歌黑客数据库"></a>谷歌黑客数据库</h3><p>收录众多谷歌搜索语句</p>
<div>https://www.uedbox.com/shdb/</div><div>https://www.exploit-db.com/google-hacking-database</div>

<h2 id="GitHub-Hacking"><a href="#GitHub-Hacking" class="headerlink" title="GitHub Hacking"></a>GitHub Hacking</h2><p>GitHub是世界上最大的<del>同性交友</del>代码托管平台,超5千万开发者正在使用。</p>
<p>Github不仅能托管代码，还能对代码进行搜索，我们感受到了其便利的同时，也应该时刻注意，当你上传并公开你的代码时，一时大意，让某些敏感的配置信息文件等暴露于众。</p>
<h3 id="搜索仓库"><a href="#搜索仓库" class="headerlink" title="搜索仓库"></a>搜索仓库</h3><table>
<thead>
<tr>
<th><strong>查询</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&gt;n</td>
<td>cats start:&gt;1000 匹配含有 “cats” 字样、星标超过 1000 个的仓库。</td>
</tr>
<tr>
<td>&gt;=n</td>
<td>cats topics:&gt;=5 匹配含有 “cats” 字样、有 5 个或更多主题的仓库。</td>
</tr>
<tr>
<td>&lt;n</td>
<td>cats size:&lt;10000 匹配小于 10 KB 的文件中含有 “cats” 字样的代码。</td>
</tr>
<tr>
<td>&lt;=n</td>
<td>cats stars:&lt;=50 匹配含有 “cats” 字样、星标不超过 50 个的仓库。</td>
</tr>
<tr>
<td>n..*</td>
<td>cats stars:10..* 匹配含有 “cats” 字样、有 10 个或更多星标的仓库。</td>
</tr>
<tr>
<td>*..n</td>
<td>cats stars:10..* 匹配含有 “cats” 字样、有 10 个或更多星标的仓库。</td>
</tr>
<tr>
<td>n..n</td>
<td>cats stars:10..50 匹配含有 “cats” 字样、有 10 到 50 个星号的仓库。</td>
</tr>
</tbody></table>
<h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>只能搜索小于384KB的文件。 只能搜索少于500,000个文件的存储库。</p>
<p>登陆的用户可以搜索所有公共存储库。</p>
<p>除 <strong>filename</strong> 搜索外，搜索源代码时必须至少包含一个搜索词。例如，搜索 <strong>language:javascript</strong>) 无效，而是这样：<strong>amazing language:javascript</strong>。 搜索结果最多可以显示来自同一文件的两个片段，但文件中可能会有更多结果。</p>
<p>不能将以下通配符用作搜索查询的一部分：</p>
<div style="font-weight: bold;">. , : ; / ' " = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\* ! ? # $ & \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\+ ^ | ~ &lt; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\&gt; ( ) { } 。</div>

<p>搜索将忽略这些符号。</p>
<h4 id="日期条件"><a href="#日期条件" class="headerlink" title="日期条件"></a>日期条件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cats pushed:&lt;2012-0705 			<span class="comment">#搜索在2012年7月05日前push代码，且cats作为关键</span></span><br><span class="line">cats pushed:2016-04-30..2016-07-04 	<span class="comment">#日期区间</span></span><br><span class="line">cats created:&gt;=2017-04-01 		<span class="comment">#创建时间</span></span><br></pre></td></tr></table></figure>

<h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AND		<span class="comment">#与</span></span><br><span class="line">OR		<span class="comment">#或</span></span><br><span class="line">NOT		<span class="comment">#非</span></span><br></pre></td></tr></table></figure>

<h4 id="排除运算"><a href="#排除运算" class="headerlink" title="排除运算"></a>排除运算</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索在2012年07月05日前push代码，且cats作为关键字，排除java语言仓库</span></span><br><span class="line">cats pushed:&lt;2012-07-05 - language:java</span><br></pre></td></tr></table></figure>

<h4 id="包含搜索"><a href="#包含搜索" class="headerlink" title="包含搜索"></a>包含搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hacker <span class="keyword">in</span>:file  		<span class="comment">#搜索文件中包含Hacker的代码</span></span><br><span class="line">Hacker <span class="keyword">in</span>:path  		<span class="comment">#搜索路径中包含Hacker的代码</span></span><br><span class="line">Hacker <span class="keyword">in</span>:path,file  		<span class="comment">#搜索路径、文件中包含Hacker的代码</span></span><br><span class="line">console path:app/public language:javascript  	<span class="comment">#搜索关键字console，且语言为JavaScript在app/public下的代码</span></span><br></pre></td></tr></table></figure>

<h4 id="主体搜索"><a href="#主体搜索" class="headerlink" title="主体搜索"></a>主体搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user:USERNAME  				<span class="comment">#用户名搜索</span></span><br><span class="line">org:ORGNAME  				<span class="comment">#组织搜索</span></span><br><span class="line">repo:USERNAME/PEPOSITORY  		<span class="comment">#指定仓库搜索</span></span><br></pre></td></tr></table></figure>

<h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filename:config.php language:php	<span class="comment">#搜索文件名为config.php，且语言为PHP的代码</span></span><br><span class="line">mail filename:.properties			<span class="comment">#搜索JAVA项目的配置文件，且中包含mail的代码</span></span><br></pre></td></tr></table></figure>

<h4 id="扩展名搜索"><a href="#扩展名搜索" class="headerlink" title="扩展名搜索"></a>扩展名搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#extension:EXTENSION  指定扩展名搜索</span></span><br><span class="line">php extension:config</span><br></pre></td></tr></table></figure>

<h3 id="自动化工具——GitMiner"><a href="#自动化工具——GitMiner" class="headerlink" title="自动化工具——GitMiner"></a>自动化工具——GitMiner</h3><p>GitMiner是一款自动化的高级敏感内容挖掘工具。此工具旨在通过代码或代码片段在github搜索页面进行挖掘，并以此来证明公共存储库的脆弱性，以及将包含敏感信息的代码存储在其中所带来的安全隐患。</p>
<p>项目地址：<a href="https://github.com/UnkL4b/GitMiner">https://github.com/UnkL4b/GitMiner</a></p>
<p><img src="https://camo.githubusercontent.com/2948ef418da7976011be94027341182378fc0055361a079d8c2813febd71a00b/68747470733a2f2f322e62702e626c6f6773706f742e636f6d2f2d4762707a524f6945796e512f56744c7974664d715169492f4141414141414141626e6b2f356844706850344d6266342f73313630302f776f7264707265737345582e706e67" alt="Screenshot"></p>
<h2 id="Shodan-搜索引擎"><a href="#Shodan-搜索引擎" class="headerlink" title="Shodan 搜索引擎"></a>Shodan 搜索引擎</h2><p>Shodan 在百度百科里被给出了这么一句话介绍： Shodan 是互联网上最可怕的搜索引擎。为什么呢？与谷歌、百度等搜索引擎爬取网页信息不同，Shodan 爬取的是互联网上所有设备的 IP 地址及其端口号。</p>
<p>网址：<a href="https://www.shodan.io/">https://www.shodan.io/</a></p>
<h3 id="高级过滤搜索"><a href="#高级过滤搜索" class="headerlink" title="高级过滤搜索"></a>高级过滤搜索</h3><ul>
<li>hostname：搜索指定的主机或域名，例如 hostname:“google”</li>
<li>port：搜索指定的端口或服务，例如 port:“8080”</li>
<li>country：搜索指定的国家，例如 country:“CN”</li>
<li>city：搜索指定的城市，例如 city:“yantai”</li>
<li>org：搜索指定的组织或公司，例如 org:“google”</li>
<li>isp：搜索指定的ISP供应商，例如 isp:“China Telecom”</li>
<li>product：搜索指定的操作系统/软件/平台，例如 product:“Apache httpd”</li>
<li>version：搜索指定的软件版本，例如 version:“2.1.2”</li>
<li>geo：搜索指定的地理位置，参数为经纬度，例如 geo:“44.56, 119.65”</li>
<li>before/after：搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 before:“11-11-15”</li>
<li>net：搜索指定的IP地址或子网，例如 net:“102.45.10.0/24”</li>
</ul>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>1、查找位于合肥的Apache服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apache city:&quot;Hefei&quot;</span><br></pre></td></tr></table></figure>

<p>2、查找位于国内的Nginx服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx country:&quot;CN&quot;</span><br></pre></td></tr></table></figure>

<p>3、查找GWS（Google Web Server）服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:gws hostname:&quot;google&quot;</span><br></pre></td></tr></table></figure>

<p>4、查找指定网段华为设备</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">huawei net:&quot;64.191.146.0/24&quot;</span><br></pre></td></tr></table></figure>

<p>5、查找国内的 海康威视网络摄像头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server:Hikvision-Webs country:&quot;CN&quot;</span><br></pre></td></tr></table></figure>

<p>6、查找SQ-WEBCAM摄像头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server: SQ-WEBCAM</span><br></pre></td></tr></table></figure>

<p>7、搜索美国受“心脏滴血”漏洞影响的主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">country:US vuln:CVE-2014-0160</span><br></pre></td></tr></table></figure>

<p>8、根据网页图标收集资产</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.favicon.hash:-1825654886</span><br><span class="line"></span><br><span class="line">注：查询值为目标站点图标文件的hash值</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在每次查询后，在左上角有几个功能，Exploits，maps，create report等</p>
<p><strong>exploits</strong>是系统帮我们查找不同类型的方式来查找。</p>
<p><strong>maps</strong>是生成地图，用来查看主机在世界各地的分布。红色标记就是主机地址</p>
<p><strong>create report</strong>是针对此次搜索，生成报告发给邮件，也可以去账户里查看以前生成的报告。</p>
<h3 id="Shodan命令行"><a href="#Shodan命令行" class="headerlink" title="Shodan命令行"></a>Shodan命令行</h3><p>Shodan搜索引擎拥有自己的API接口，前提是先注册。可以使用命令行工具，也可以使用python等编程软件调用。</p>
<p>Shodan命令行模式有很多优点，比如导出搜索数据与解析搜索数据，还有可以指定显示数据得关键字段。</p>
<p>1、导入key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan init &lt;key&gt;</span><br></pre></td></tr></table></figure>

<p>2、显示自己的公网ip：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan myip</span><br></pre></td></tr></table></figure>

<p>3、查看指定cve漏洞在shodan发现的总数 ‘’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan count vuln:cve-2019-0708</span><br></pre></td></tr></table></figure>

<p>4、查看指定cve漏洞的地区分布情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan stats vuln:cve-2019-0708</span><br></pre></td></tr></table></figure>

<p>5、列出存在漏洞的top20的私有云服务商</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan stats --facets org:20 vuln:cve-2019-0708 tag:cloud</span><br></pre></td></tr></table></figure>

<p>7、筛选指定端口、指定协议存在的漏洞数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan stats port:445 SMB vuln:ms17-010</span><br></pre></td></tr></table></figure>

<p>8、 查看某ip相关的所有信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan host 219.140.59.238</span><br></pre></td></tr></table></figure>

<p>9、保存某ip的相关信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan host --save 219.140.59.238</span><br></pre></td></tr></table></figure>

<p>10、查看下载下来的数据信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan parse 219.140.59.238.json.gz</span><br></pre></td></tr></table></figure>

<p>11、通过扫描得到最新的服务器信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shodan scan submit 219.140.59.238</span><br></pre></td></tr></table></figure>

<h2 id="Censys-搜索引擎"><a href="#Censys-搜索引擎" class="headerlink" title="Censys 搜索引擎"></a>Censys 搜索引擎</h2><p>与最流行的搜索引擎Shodan非常类似。Censys是一款免费的搜索引擎，最初由密歇根大学的研究人员在10月发行，目前由谷歌提供支持。 Censys搜索引擎能够扫描整个互联网，Censys 每天都会扫描IPv4地址空间，以搜索所有联网设备并收集相关的信息，并返回一份有关资源（如设备、网站和证书）配置和部署信息的总体报告。</p>
<p>Censys更偏向于证书查询</p>
<p>网址：<a href="https://search.censys.io/">https://search.censys.io/</a></p>
<h3 id="搜索示例"><a href="#搜索示例" class="headerlink" title="搜索示例"></a>搜索示例</h3><p>默认情况下censys支持全文检索，支持正则。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip:23.0.0.0/8 or 8.8.8.0/24　　						可以使用逻辑运算</span><br><span class="line"></span><br><span class="line">services.http.response.status_code: 200　　			指定状态</span><br><span class="line"></span><br><span class="line">services.http.response.status_code: [200 to 300]　　	200-300之间的状态码</span><br><span class="line"></span><br><span class="line">location.country_code: DE　　							国家</span><br><span class="line"></span><br><span class="line">services.port: 21 or services.service_name: FTP　　	协议</span><br><span class="line"></span><br><span class="line">services.software.product:apache　　					服务器类型版本</span><br><span class="line"></span><br><span class="line">autonomous_system.description: University　　			系统描述</span><br></pre></td></tr></table></figure>

<h2 id="FoFa-搜索引擎"><a href="#FoFa-搜索引擎" class="headerlink" title="FoFa 搜索引擎"></a>FoFa 搜索引擎</h2><p>FOFA 是白帽汇推出的一款网络空间搜索引擎，它通过进行网络空间测绘，能够帮助研究人员或者企业迅速进行网络资产匹配，例如进行漏洞影响范围分析、应用分布统计、应用流行度排名统计等。</p>
<p>FoFa更偏向于企业资产收集</p>
<p>网址：<a href="https://fofa.so/">https://fofa.so/</a></p>
<h3 id="搜索示例-1"><a href="#搜索示例-1" class="headerlink" title="搜索示例"></a>搜索示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;abc&quot; 	从标题中搜索abc。例：标题中有北京的网站。</span><br><span class="line"></span><br><span class="line">header=&quot;abc&quot; 	从http头中搜索abc。例：jboss服务器。</span><br><span class="line"></span><br><span class="line">body=&quot;abc&quot; 		从html正文中搜索abc。例：正文包含Hacked by。</span><br><span class="line"></span><br><span class="line">domain=&quot;qq.com&quot; 搜索根域名带有qq.com的网站。例： 根域名是qq.com的网站。</span><br><span class="line"></span><br><span class="line">host=&quot;.gov.cn&quot; 	从url中搜索.gov.cn,注意搜索要用host作为名称。</span><br><span class="line"></span><br><span class="line">port=&quot;443&quot; 		查找对应443端口的资产。例： 查找对应443端口的资产。</span><br><span class="line"></span><br><span class="line">ip=&quot;1.1.1.1&quot; 	从ip中搜索包含1.1.1.1的网站,注意搜索要用ip作为名称。</span><br><span class="line"></span><br><span class="line">protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)。例： 查询https协议资产。</span><br><span class="line"></span><br><span class="line">city=”Beijing” 	搜索指定城市的资产。例： 搜索指定城市的资产。</span><br><span class="line"></span><br><span class="line">region=&quot;Zhejiang&quot; 搜索指定行政区的资产。例： 搜索指定行政区的资产。</span><br><span class="line"></span><br><span class="line">country=&quot;CN&quot; 	搜索指定国家(编码)的资产。例： 搜索指定国家(编码)的资产。</span><br><span class="line"></span><br><span class="line">cert=&quot;google.com&quot; 搜索证书(https或者imaps等)中带有google.com的资产。</span><br></pre></td></tr></table></figure>

<h3 id="高级搜索示例"><a href="#高级搜索示例" class="headerlink" title="高级搜索示例"></a>高级搜索示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;powered by&quot; &amp;&amp; title!=discuz</span><br><span class="line"></span><br><span class="line">title!=&quot;powered by&quot; &amp;&amp; body=discuz</span><br><span class="line"></span><br><span class="line">( body=&quot;content=WordPress&quot; || (header=&quot;X-Pingback&quot; &amp;&amp; header=&quot;/xmlrpc.php&quot; &amp;&amp; body=&quot;/wp-includes/&quot;) ) &amp;&amp; host=&quot;gov.cn&quot;</span><br></pre></td></tr></table></figure>

<h2 id="钟馗之眼"><a href="#钟馗之眼" class="headerlink" title="钟馗之眼"></a>钟馗之眼</h2><p>国内互联网安全厂商知道创宇开放了他们的海量数据库，对之前沉淀的数据进行了整合、整理，打造了一个名符其实的网络空间搜索引擎ZoomEye，该搜索引擎的后端数据计划包括两部分：</p>
<p>1、网站组件指纹：包括操作系统，Web服务，服务端语言，Web开发框架，Web应用，前端库及第三方组件等等。</p>
<p>2、主机设备指纹：结合NMAP大规模扫描结果进行整合。 目前只上线了第一部分网站组件指纹。</p>
<p>钟馗之眼更偏向于Web应用层面的搜索</p>
<p>网址：<a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p>
<h3 id="搜索示例-2"><a href="#搜索示例-2" class="headerlink" title="搜索示例"></a>搜索示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:nginx　　				组件名</span><br><span class="line"></span><br><span class="line">ver:1.0　　				版本</span><br><span class="line"></span><br><span class="line">os:windows　　			操作系统</span><br><span class="line"></span><br><span class="line">country:”China”　　		国家</span><br><span class="line"></span><br><span class="line">city:”hangzhou”　　		城市</span><br><span class="line"></span><br><span class="line">port:80　　				端口</span><br><span class="line"></span><br><span class="line">hostname:google　　		主机名</span><br><span class="line"></span><br><span class="line">site:thief.one　　		网站域名</span><br><span class="line"></span><br><span class="line">desc:nmask　　			描述</span><br><span class="line"></span><br><span class="line">keywords:nmask’blog　	关键词</span><br><span class="line"></span><br><span class="line">service:ftp　　			服务类型</span><br><span class="line"></span><br><span class="line">ip:8.8.8.8　　			ip地址</span><br><span class="line"></span><br><span class="line">cidr:8.8.8.8/24　　		ip地址段</span><br></pre></td></tr></table></figure>

<h3 id="Kunyu-坤舆"><a href="#Kunyu-坤舆" class="headerlink" title="Kunyu(坤舆)"></a>Kunyu(坤舆)</h3><p>Kunyu(坤舆)，是一款基于ZoomEye API开发的信息收集工具，旨在让企业资产收集更高效，使更多的安全从业者了解、使用网络空间资源测绘技术。</p>
<p>项目地址：<a href="https://github.com/knownsec/Kunyu">https://github.com/knownsec/Kunyu</a></p>
<h2 id="360-QUAKE"><a href="#360-QUAKE" class="headerlink" title="360 QUAKE"></a>360 QUAKE</h2><p>360 Quake 网络空间测绘系统是360网络安全响应中心（360-CERT）自主设计研发的全球网络空间测绘系统，能够对全球IPv4、IPv6地址进行持续性探测，实时感知全球网络空间中各类资产并发现其安全风险。</p>
<p>网址：<a href="https://quake.360.cn/quake/#/index">https://quake.360.cn/quake/#/index</a></p>
<p>搜索语法：<a href="https://quake.360.cn/quake/#/help?id=5eb238f110d2e850d5c6aec8&title=%E6%A3%80%E7%B4%A2%E5%85%B3%E9%94%AE%E8%AF%8D">https://quake.360.cn/quake/#/help?id=5eb238f110d2e850d5c6aec8&amp;title=检索关键词</a></p>
<h3 id="QUAKE-API"><a href="#QUAKE-API" class="headerlink" title="QUAKE API"></a>QUAKE API</h3><p>使用go语言编写，基于命令行，支持QuakeAPI进行查询。</p>
<p>项目地址：<a href="https://github.com/YetClass/QuakeAPI">https://github.com/YetClass/QuakeAPI</a></p>
<h2 id="其它搜索引擎"><a href="#其它搜索引擎" class="headerlink" title="其它搜索引擎"></a>其它搜索引擎</h2><h3 id="S-R-P-智能自定义搜索"><a href="#S-R-P-智能自定义搜索" class="headerlink" title="S.R.P 智能自定义搜索"></a>S.R.P 智能自定义搜索</h3><p>OSINT-Labs 开源情报实验开发的搜索引擎，能综合各大搜索引擎进行智能搜索。</p>
<p>网址：<a href="https://www.osint-labs.org/search/s.php?q=&amp;sid=0">https://www.osint-labs.org/search/s.php?q=&amp;sid=0</a></p>
<h3 id="百度搜索引擎"><a href="#百度搜索引擎" class="headerlink" title="百度搜索引擎"></a>百度搜索引擎</h3><p>百度一下，你就知道。</p>
<p>网址：<a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<h3 id="搜狗搜索引擎"><a href="#搜狗搜索引擎" class="headerlink" title="搜狗搜索引擎"></a>搜狗搜索引擎</h3><p>支持微信公众号搜索、文章搜索、知乎搜索、英文搜索及翻译等。</p>
<p>网址：<a href="https://www.sogou.com/">https://www.sogou.com</a></p>
<h3 id="360搜索引擎"><a href="#360搜索引擎" class="headerlink" title="360搜索引擎"></a>360搜索引擎</h3><p>360旗下搜索引擎。</p>
<p>网址：<a href="https://www.so.com/">https://www.so.com</a></p>
<h3 id="雅虎搜索引擎"><a href="#雅虎搜索引擎" class="headerlink" title="雅虎搜索引擎"></a>雅虎搜索引擎</h3><p>雅虎公司旗下搜索引擎。</p>
<p>网址：<a href="https://www.yahoo.com/">https://www.yahoo.com</a></p>
<h3 id="Yandex搜索引擎"><a href="#Yandex搜索引擎" class="headerlink" title="Yandex搜索引擎"></a>Yandex搜索引擎</h3><p>Yandex是俄罗斯最流行的搜索引擎，占俄罗斯国内市场的55%。</p>
<p>网址：<a href="https://yandex.com/">https://yandex.com</a></p>
<h3 id="Exalead搜索引擎"><a href="#Exalead搜索引擎" class="headerlink" title="Exalead搜索引擎"></a>Exalead搜索引擎</h3><p>一款法国公司开发的搜索引擎。</p>
<p>网址：<a href="http://www.exalead.com/search/">http://www.exalead.com/search/</a></p>
<h3 id="Dogpile搜索引擎"><a href="#Dogpile搜索引擎" class="headerlink" title="Dogpile搜索引擎"></a>Dogpile搜索引擎</h3><p>Dogpile是一个聚合谷歌、雅虎、Yandex和其他流行的搜索引擎结果的元搜索引擎。</p>
<p>网址：<a href="https://www.dogpile.com/">https://www.dogpile.com</a></p>
<h2 id="网盘在线搜索工具"><a href="#网盘在线搜索工具" class="headerlink" title="网盘在线搜索工具"></a>网盘在线搜索工具</h2><ul>
<li>凌风云：<a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a></li>
<li>蓝菊花：<a href="http://www.lanjuhua.com/">http://www.lanjuhua.com/</a></li>
<li>大力盘：<a href="https://www.dalipan.com/">https://www.dalipan.com/</a></li>
<li>猪猪盘：<a href="http://www.zhuzhupan.com/">http://www.zhuzhupan.com/</a></li>
<li>PanSou：<a href="http://www.pansou.com/">http://www.pansou.com/</a></li>
<li>盘飞飞：<a href="https://panfeifei.com/">https://panfeifei.com/</a></li>
</ul>
<h2 id="其它情报信息查询"><a href="#其它情报信息查询" class="headerlink" title="其它情报信息查询"></a>其它情报信息查询</h2><ul>
<li>F12Sec教育信息查询系统：<a href="https://edudata.shikangsi.com/">https://edudata.shikangsi.com/</a> 【账号：2021】【 密码：2021】</li>
<li>验证邮件地址准确性工具：<a href="https://centralops.net/co/EmailDossier.aspx">https://centralops.net/co/EmailDossier.aspx</a></li>
<li>微步在线情报社区：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
<li>IP地址归属查询工具：<a href="https://www.ip138.com/">https://www.ip138.com/</a></li>
<li>追寻各大网站历史工具：<a href="https://web.archive.org/">https://web.archive.org/</a></li>
<li>注册网站信息泄露查询工具：<a href="https://www.reg007.com/">https://www.reg007.com/</a></li>
<li>经纬度查询工具：<a href="https://map.yanue.net/">https://map.yanue.net/</a></li>
</ul>
<h2 id="信息收集工具编写"><a href="#信息收集工具编写" class="headerlink" title="信息收集工具编写"></a>信息收集工具编写</h2><h3 id="以传统搜索引擎进行URL采集"><a href="#以传统搜索引擎进行URL采集" class="headerlink" title="以传统搜索引擎进行URL采集"></a>以传统搜索引擎进行URL采集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">domain = <span class="built_in">input</span>(<span class="string">&quot;请输入域名： &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    i=i*<span class="number">10</span></span><br><span class="line">    <span class="comment">#header是用来规定我们到底模仿哪个浏览器去上网</span></span><br><span class="line">    heads=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(Windows NT 6.1; Win64; x64; rv:56.0)</span></span><br><span class="line"><span class="string">    Gecko/20100101 Firefox/56.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#具体请求哪个页面</span></span><br><span class="line">    url=<span class="string">&#x27;https://cn.bing.com/search?q=site%3A&#x27;</span>+domain+<span class="string">&#x27;&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=site%3Adgjy.net&amp;sc=2-11&amp;sk=&amp;cvid=C1A7FC61462345B1A71F431E60467C43&amp;toHttps=1&amp;redig=3FEC4F2BE86247E8AE3BB965A62CD454&amp;pn=2&amp;first=&#123;&#125;&amp;FROM=PERE&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    <span class="comment">#返回的内容</span></span><br><span class="line">    html=requests.get(url,headers=heads)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#筛选 初始化一下这个筛选工具</span></span><br><span class="line">    soup=BeautifulSoup(html.content,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#具体要把哪个地方的东西提出来 如果找到了h2 就把下面整个保存起来</span></span><br><span class="line">    job_bt=soup.findAll(<span class="string">&#x27;h2&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> job_bt:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获得h2找到的这个东西中间的a标签中的href属性里面的值</span></span><br><span class="line">    <span class="built_in">print</span>(i.a.get(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>我个人编写的一个URL采集工具：</p>
<p><a href="https://github.com/UlyssesTakusen/CaiJiEngine">https://github.com/UlyssesTakusen/CaiJiEngine</a></p>
<h3 id="以空间测回引擎API进行信息收集"><a href="#以空间测回引擎API进行信息收集" class="headerlink" title="以空间测回引擎API进行信息收集"></a>以空间测回引擎API进行信息收集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fofa</span>:</span></span><br><span class="line">    email = <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">    key = <span class="string">&quot;你的API-Key&quot;</span></span><br><span class="line"></span><br><span class="line">    ips = []</span><br><span class="line">    domains = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">self,arg</span>):</span></span><br><span class="line">        api = <span class="string">&quot;https://fofa.so/api/v1/search/all?email=&#123;&#125;&amp;key=&#123;&#125;&amp;qbase64=&#123;&#125;&quot;</span></span><br><span class="line">        flag = base64.b64encode(arg.encode()).decode()</span><br><span class="line">        response = requests.get(api.<span class="built_in">format</span>(self.email,self.key,flag))</span><br><span class="line">        self.results = response.json()[<span class="string">&quot;results&quot;</span>]</span><br><span class="line">        self.length = <span class="built_in">len</span>(self.results)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> self.results:</span><br><span class="line">            self.domains.append(result[<span class="number">0</span>])</span><br><span class="line">            self.ips.append(result[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arg = sys.argv[<span class="number">1</span>]</span><br><span class="line">    fofa = Fofa()</span><br><span class="line">    fofa.getData(arg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;共搜索到&#123;&#125;条记录！&quot;</span>.<span class="built_in">format</span>(fofa.length))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fofa.results)):</span><br><span class="line">        <span class="built_in">print</span>(fofa.domains[i],<span class="string">&quot;\t&quot;</span>,fofa.ips[i])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web安全</category>
        <category>资产收集</category>
      </categories>
      <tags>
        <tag>资产收集</tag>
      </tags>
  </entry>
  <entry>
    <title>域名_IP收集方式</title>
    <url>/2021/10/05/0x01%20%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/3.%E5%9F%9F%E5%90%8D_IP%E6%94%B6%E9%9B%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><p>nslookup命令用于查询DNS的记录,查看域名解析是否正常。</p>
<p>Windows和Kali Linux均内置</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><p>Dig是一个在类Unix命令行模式下查询DNS包括NS记录,A记录,MX记录等相关信息的工具。</p>
<p>Kali Linux内置工具</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig baidu.com			<span class="comment">#显示域名记录</span></span><br><span class="line">dig 114.114.114.114		<span class="comment">#通过ip地址反查DNS域名</span></span><br><span class="line">dig txt chaos VERSION.BIND @ns.dnsv4.com	<span class="comment">#查询DNS服务器的bind信息</span></span><br><span class="line">dig @dns.xxx.edu.cn axfr xxx.edu.cn			<span class="comment">#查询是否存在DNS区域传输</span></span><br></pre></td></tr></table></figure>

<h3 id="dnsenum"><a href="#dnsenum" class="headerlink" title="dnsenum"></a>dnsenum</h3><p>一款用于收集 dns 信息的工具,这款工具通过字典爆破、搜索引擎、whois 查询、区域传输等手段用于获取域名背后的 dns 信息。</p>
<p>Kali Linux内置工具</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnsenum baidu.com     </span><br></pre></td></tr></table></figure>

<h3 id="dnswalk"><a href="#dnswalk" class="headerlink" title="dnswalk"></a>dnswalk</h3><p>利用DNS区域传输技术来获取DNS对应域名A记录。可以用来检验区域传输漏洞。</p>
<p>注意：使用时要在域名后面加一个点。</p>
<p>Kali Linux内置工具</p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnswalk baidu.com.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩展：DNS区域传输漏洞</p>
<p>DNS区域传输（DNS zone transfer）指的是一台备用服务器使用来自主服务器的数据刷新自己的域（zone）数据库。这为运行中的DNS服务提供了一定的冗余度，其目的是为了防止主的域名服务器因意外故障变得不可用时影响到整个域名的解析。一般来说，DNS区域传输操作只在网络里真的有备用域名DNS服务器时才有必要用到，但许多DNS服务器却被错误地配置成只要有client发出请求，就会向对方提供一个zone数据库的详细信息，所以说允许不受信任的因特网用户执行DNS区域传输（zone transfer）操作是后果最为严重的错误配置之一。</p>
<p>区域传输漏洞的危害：黑客可以快速的判定出某个特定zone的所有主机，收集域信息，选择攻击目标，找出未使用的IP地址，黑客可以绕过基于网络的访问控制。</p>
</blockquote>
<h3 id="DNS在线查询"><a href="#DNS在线查询" class="headerlink" title="DNS在线查询"></a>DNS在线查询</h3><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com</a></p>
<p><a href="https://www.nslookup.io/">https://www.nslookup.io/</a></p>
<p><a href="http://tool.chinaz.com/dns/">http://tool.chinaz.com/dns/</a></p>
<p><a href="https://dnslytics.com/">https://dnslytics.com/</a></p>
<h2 id="Whois与ICP备案"><a href="#Whois与ICP备案" class="headerlink" title="Whois与ICP备案"></a>Whois与ICP备案</h2><h3 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a>Whois查询</h3><p>Whois是用来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的查询。早期的whois查询多以命令列接口存在，但是现在出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。</p>
<h4 id="Web接口查询"><a href="#Web接口查询" class="headerlink" title="Web接口查询"></a>Web接口查询</h4><p><a href="http://whois.aliyun.com/">http://whois.aliyun.com</a></p>
<p><a href="http://www.whois365.com/cn/">http://www.whois365.com/cn/</a></p>
<p><a href="http://whois.chianz.com/">http://whois.chianz.com/</a></p>
<p><a href="http://whois.aizhan.com/">http://whois.aizhan.com/</a></p>
<h4 id="Whois命令查询"><a href="#Whois命令查询" class="headerlink" title="Whois命令查询"></a>Whois命令查询</h4><p>Kali linux自带whois查询工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whois baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="ICP备案"><a href="#ICP备案" class="headerlink" title="ICP备案"></a>ICP备案</h3><p>ICP，Internet Content Provider，中文全称：网络内容提供商。ICP可以理解为向广大用户提供互联网信息业务和增值业务的电信运营商，是经国家主管部门批准的正式运营企业或部门。</p>
<p>《互联网信息服务管理办法》指出互联网信息服务分为经营性和非经营性两类。国家对经营性互联网信息服务实行许可制度；对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务。</p>
<p>ICP备案查询方法：</p>
<p><a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a> （ICP备案查询网）</p>
<p><a href="http://www.beian.miit.gov.cn/publish/query/indexFirst.action">http://www.beian.miit.gov.cn/publish/query/indexFirst.action</a> （工业和信息化部）</p>
<p><a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a> （天眼查）</p>
<p><a href="http://icp.chinaz.com/">http://icp.chinaz.com</a> （站长工具）</p>
<p><a href="http://cha.fute.com/index">http://cha.fute.com/index</a> （域名助手备案信息查询）</p>
<h3 id="IP反查域名"><a href="#IP反查域名" class="headerlink" title="IP反查域名"></a>IP反查域名</h3><p><a href="https://site.ip138.com/">https://site.ip138.com/</a></p>
<h2 id="AS号码查询"><a href="#AS号码查询" class="headerlink" title="AS号码查询"></a>AS号码查询</h2><p>自治系统(Autonomous System)是指使用统一内部路由协议的一组网络。 如果成员单位的网络路由器准备采用EGP（Exterior Gateway Protocol） BGP（Border Gateway Protocol）或 IDRP（OSI Inter-Domain Routing Protocol）协议，可以申请AS号码。 一般如果该单位的网络规模比较大或者将来会发展成较大规模的网络， 而且有多个出口，建议建立成一个自治系统，这样就需要AS号码。 如果网络规模较小，或者规模较为固定，而且只有一个出口， 可采用静态路由或其它路由协议，这样就不需要AS号码。</p>
<h3 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h3><p><a href="https://bgp.he.net/">https://bgp.he.net/</a></p>
<h3 id="Nmap脚本查询"><a href="#Nmap脚本查询" class="headerlink" title="Nmap脚本查询"></a>Nmap脚本查询</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap --script targets-asn -cript-args targets-asn.asn=45062</span><br></pre></td></tr></table></figure>

<p>可以先通过网站在线查询某公司的ASN，然后用Nmap脚本查询。</p>
<h2 id="证书透明度"><a href="#证书透明度" class="headerlink" title="证书透明度"></a>证书透明度</h2><p>证书透明度（CT）日志按设计包含由参与CA为任何给定域颁发的所有证书。SSL/TLS证书一般包含域名、子域名和电子邮件地址。这些日志是公开可用的，任何人都能看到这些日志。这使它们成为攻击者的信息宝库。</p>
<p>常用的查询CT的网站：</p>
<p><a href="https://crt.sh/">https://crt.sh/</a></p>
<p><a href="https://search.censys.io/certificates">https://search.censys.io/certificates</a></p>
<p><a href="https://transparencyreport.google.com/https/certificates">https://transparencyreport.google.com/https/certificates</a></p>
<h2 id="C段与旁注"><a href="#C段与旁注" class="headerlink" title="C段与旁注"></a>C段与旁注</h2><p>当渗透网站不存在漏洞或无法以成功渗透的情况下,这时可以采用旁注或C段思路进行渗透。</p>
<ul>
<li>C段：同网段不同服务器的渗透方案</li>
<li>旁注：同服务器不同站点的渗透方案</li>
</ul>
<p>常用Web工具</p>
<p><a href="https://chapangzhan.com/">https://chapangzhan.com/</a></p>
<p><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>资产收集</category>
      </categories>
      <tags>
        <tag>资产收集</tag>
      </tags>
  </entry>
  <entry>
    <title>边缘资产与资产监控</title>
    <url>/2021/10/05/0x01%20%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/5.%E8%BE%B9%E7%BC%98%E8%B5%84%E4%BA%A7%E4%B8%8E%E8%B5%84%E4%BA%A7%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="边缘资产收集"><a href="#边缘资产收集" class="headerlink" title="边缘资产收集"></a>边缘资产收集</h2><p><strong>目标的相关性</strong>：各项目标之间有关联，相互支持，符合实际。</p>
<p><strong>企业的工商股权信息收集</strong>：目前所有的企业，都需要进行工商登记后才能正常运营。这方面数据是可以进行查询的。通过国家企业信息公示系统（<a href="http://www.gsxt.gov.cn/">http://www.gsxt.gov.cn</a>)</p>
<p>国内一些企业通过爬虫、数据合作方式将企业相关的数据通过数据分析方法关联在一起，比如：企查查、天眼查、启信宝等等，我们可以通过这些平台<strong>查询目标企业旗下其他业务的子公司名称</strong>。</p>
<p>在第三方媒体发布的新闻，例如xxx公司收购了xxx教育公司，那么该SRC是极有可能接收该公司的漏洞的，我们<strong>多关注新闻可以快人一步，更好地找到新资产。</strong></p>
<h2 id="企业组织架构"><a href="#企业组织架构" class="headerlink" title="企业组织架构"></a>企业组织架构</h2><p>根据<strong>企业关键字</strong>，通过<strong>搜索引擎</strong>、<strong>爱企查</strong>、<strong>天眼查</strong>等平台找出相关的域名、下属单位、邮箱、联系人、电话等信息。同时，根据企业股权关系，也可查找相关的下属子公司企业的网站域名。</p>
<p>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p>
<p>爱企查：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></p>
<ul>
<li>查找公司信息</li>
</ul>
<p><img src="https://i.loli.net/2021/10/05/oPSz1H9GjFxXf3K.png" alt="a388d30b8e3dcf8e9a3e23fc2cbd0186.png"></p>
<ul>
<li>查找公司股权结构</li>
</ul>
<p><img src="https://i.loli.net/2021/10/05/Cfs5xzVFjcWQmuK.png" alt="05ab1e45c7a4437a489e7c528893f3dc.png"></p>
<ul>
<li>查看个人图谱</li>
</ul>
<p><img src="https://i.loli.net/2021/10/05/XcyrwmHfdsv3JYM.png" alt="6c5a9a4b0b20ba804ae7460f9c6103f9.png"></p>
<h2 id="App、公众号、小程序"><a href="#App、公众号、小程序" class="headerlink" title="App、公众号、小程序"></a>App、公众号、小程序</h2><p>除此以外，对于分公司较多，在全国各地都有营业点的大型企业来说，信息收集的涵盖面包括各种网盘文库，开源社区，社工库，公众号也都是很好的切入点。不过以这些为信息的话，那就是基于关键字去进行搜素，关键字要尽可能的去概括包含所要搜索的集团的众多公司以及业务，关键字可以是公司缩写，主公司域名，公司产品名，主营业务等具有明显特征的词汇。</p>
<h3 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h3><p><strong>类型</strong>：商家APP、后台管理APP、业务APP、用户APP、SRC公告提到的APP等等。</p>
<p><strong>利用方式</strong>：通过反编译进行信息收集；通过抓取APP的流量进行信息收集。</p>
<p><strong>搜索方式：</strong></p>
<p><a href="https://app.diandian.com/">https://app.diandian.com</a> （点点）</p>
<p><a href="https://www.qimai.cn/">https://www.qimai.cn</a> （七麦）</p>
<h3 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h3><p><strong>类型</strong>：微信公众号、支付宝公众号、QQ公众号、生活号、企业号、百家号。</p>
<p><strong>利用方式</strong>：抓取后台接口进行信息收集。</p>
<p><strong>搜索方式：</strong></p>
<p><a href="https://weixin.sogou.com/">https://weixin.sogou.com/</a> （搜狗）</p>
<h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p><strong>类型</strong>：微信小程序、支付宝小程序、百度小程序。</p>
<p><strong>利用方式</strong>：抓取后台接口进行信息收集。</p>
<p><strong>搜索方式：</strong></p>
<p><a href="https://www.xiaolanben.com/company">https://www.xiaolanben.com/company</a> （小蓝本）</p>
<p>注意：大多数的公众号的功能都只是用来进行文章报送，是没有后台接口的，因此这样的公众号并不是重点目标。需要作为<strong>重点渗透测试的是这种存在后台接口的即存在服务功能的公众号或者小程序</strong>，通过在物理机或者模拟器上打开代理抓包即可，除去weixin、app.eslink.cc等第三方相关的域名后，对剩下的陌生域名和进行下一轮的端口扫描和测试，不过这些后台接口获取到的IP资产，相来说都是很容易检查处有高危漏洞组件的存在。</p>
<h2 id="开源资产监控工具"><a href="#开源资产监控工具" class="headerlink" title="开源资产监控工具"></a>开源资产监控工具</h2><h3 id="ARL资产安全灯塔"><a href="#ARL资产安全灯塔" class="headerlink" title="ARL资产安全灯塔"></a>ARL资产安全灯塔</h3><p>斗象TCC团队正式发布「ARL资产安全灯塔」开源版，该项目现已上线开源社区GitHub。ARL旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。</p>
<p>项目地址：<a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p>
<h3 id="LangSrcCurise资产监控系统"><a href="#LangSrcCurise资产监控系统" class="headerlink" title="LangSrcCurise资产监控系统"></a>LangSrcCurise资产监控系统</h3><p>LangSrcCurise资产监控系统是一套通过网络搜索引擎监控其下指定域名，并且能进行持续性信息收集整理的自动化资产监控管理系统，基于Django开发。</p>
<p>项目地址：<a href="https://github.com/LangziFun/LangSrcCurise">https://github.com/LangziFun/LangSrcCurise</a></p>
<h3 id="linglong"><a href="#linglong" class="headerlink" title="linglong"></a>linglong</h3><p>一款资产巡航扫描系统。系统定位是通过masscan+nmap无限循环去发现新增资产，自动进行端口弱口令爆破/、指纹识别、XrayPoc扫描。</p>
<p>项目地址：<a href="https://github.com/awake1t/linglong">https://github.com/awake1t/linglong</a></p>
<h3 id="大宝剑资产梳理工具"><a href="#大宝剑资产梳理工具" class="headerlink" title="大宝剑资产梳理工具"></a>大宝剑资产梳理工具</h3><p>一款信息收集与资产梳理工具，项目处于测试阶段，会不定期更新。</p>
<p>项目地址：<a href="https://gitee.com/wgpsec/DBJ">https://gitee.com/wgpsec/DBJ</a></p>
<h3 id="Hawkeye"><a href="#Hawkeye" class="headerlink" title="Hawkeye"></a>Hawkeye</h3><p>监控github代码库，及时发现员工托管公司代码到GitHub行为并预警，降低代码泄露风险。</p>
<p>项目地址：<a href="https://github.com/0xbug/Hawkeye">https://github.com/0xbug/Hawkeye</a></p>
<h3 id="GSIL"><a href="#GSIL" class="headerlink" title="GSIL"></a>GSIL</h3><p>实时监控GitHub敏感信息泄露，并发送告警通知。</p>
<p>项目地址：<a href="https://github.com/FeeiCN/gsil">https://github.com/FeeiCN/gsil</a></p>
<p>改进版项目地址：<a href="https://github.com/StarLord777/GSIL_PRO">https://github.com/StarLord777/GSIL_PRO</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>资产收集</category>
      </categories>
      <tags>
        <tag>资产收集</tag>
      </tags>
  </entry>
  <entry>
    <title>子域名挖掘工具</title>
    <url>/2021/10/05/0x01%20%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/4.%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="Layer子域名挖掘机"><a href="#Layer子域名挖掘机" class="headerlink" title="Layer子域名挖掘机"></a>Layer子域名挖掘机</h2><p>Layer子域名挖掘机是一款域名查询工具，可提供网站子域名查询服务。拥有简洁的界面、简单的操作模式，支持服务接口、暴力搜索、同服挖掘三种模式，支持打开网站、复制域名、复制IP、复制CDN、导出域名、导出IP、导出域名+IP、导出域名+IP+WEB服务器以及导出存活网站！<img src="https://i.loli.net/2021/10/05/ufoXJeBp8cThPYR.png" alt="bf99b7e2c5e77cff30bd9e2f57d8e476.png"></p>
<p>用法就不用多解释了，图形化界面简单易上手，信息收集必备神器！</p>
<h2 id="Maltego"><a href="#Maltego" class="headerlink" title="Maltego"></a>Maltego</h2><p>Maltego是一款非常优秀的信息收集工具。与其他工具相比，不仅功能强大，而且自动化水平非常高，不需要复杂的命令，就能轻松的完成信息收集。</p>
<p><img src="https://i.loli.net/2021/10/05/3Wf6IjMU9GRYtEB.png" alt="39116d8f36bb288559e80364a25d1238.png"></p>
<p>账号注册与使用教程： <a href="https://blog.csdn.net/smli_ng/article/details/105943189">https://blog.csdn.net/smli_ng/article/details/105943189</a></p>
<p>maltego插件开发：<a href="https://www.freebuf.com/sectool/207378.html">https://www.freebuf.com/sectool/207378.html</a></p>
<h2 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h2><p>OneForAll是一款功能强大的子域收集工具</p>
<p>详细介绍：<a href="https://paper.seebug.org/1053/">https://paper.seebug.org/1053/</a></p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/shmilylty/OneForAll.git</span><br><span class="line"></span><br><span class="line">python3 -m pip install --user -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">pip3 install --user -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> OneForAll</span><br><span class="line"></span><br><span class="line">python3 oneforall.py --<span class="built_in">help</span>            <span class="comment">#查看帮助菜单</span></span><br><span class="line"></span><br><span class="line">python3 oneforall.py --target example.com run</span><br></pre></td></tr></table></figure>

<h2 id="JSFinder"><a href="#JSFinder" class="headerlink" title="JSFinder"></a>JSFinder</h2><p>JSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具。</p>
<p>详细介绍：<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a></p>
<h3 id="下载使用"><a href="#下载使用" class="headerlink" title="下载使用"></a>下载使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Threezh1/JSFinder.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> JSFinder/</span><br><span class="line"></span><br><span class="line">python3 JSFinder.py -u http://www.baidu.com         <span class="comment">#简单爬取</span></span><br><span class="line"></span><br><span class="line">python3 JSFinder.py -u http://www.baidu.com -d       <span class="comment">#深度爬取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议使用-ou 和 -os来指定保存URL和子域名的文件名。</span></span><br><span class="line">python3 JSFinder.py -u http://www.mi.com -d -ou mi_url.txt -os mi_subdomain.txt </span><br><span class="line"></span><br><span class="line">python3 JSFinder.py -f url.txt                         <span class="comment">#批量指定url</span></span><br><span class="line"></span><br><span class="line">python3 JSFinder.py -f js.txt -j                       <span class="comment">#批量指定js</span></span><br></pre></td></tr></table></figure>

<h2 id="subDomainsBrute"><a href="#subDomainsBrute" class="headerlink" title="subDomainsBrute"></a>subDomainsBrute</h2><p>高并发的DNS暴力枚举工具。</p>
<p>详细介绍：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></p>
<h3 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lijiejie/subDomainsBrute.git</span><br><span class="line"></span><br><span class="line">pip3 install aiodns</span><br></pre></td></tr></table></figure>

<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> subDomainsBrute</span><br><span class="line"></span><br><span class="line">python3 subDomainsBrute.py -t 10 baidu.com -o baidu.txt</span><br></pre></td></tr></table></figure>

<h2 id="Sublist3r"><a href="#Sublist3r" class="headerlink" title="Sublist3r"></a>Sublist3r</h2><p>Sublist3rsublist3r是一款python开发的子域名枚举工具,通过各种搜索引擎 (例如Google,Yahoo,Bing,Baidu和Ask)枚举子域。Sublist3r还使用Netcraft，Virustotal，ThreatCrowd，DNSdumpster和ReverseDNS枚举子域。也集合了subbrute的暴力枚举功能。</p>
<h3 id="下载安装-2"><a href="#下载安装-2" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/aboul3la/Sublist3r.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Sublist3r/</span><br><span class="line"></span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 sublist3r.py -d baidu.com		<span class="comment">#扫描子域名</span></span><br><span class="line"></span><br><span class="line">python3 sublist3r.py -b -d baidu.com	<span class="comment">#暴力枚举子域名</span></span><br></pre></td></tr></table></figure>

<h2 id="theHarvester"><a href="#theHarvester" class="headerlink" title="theHarvester"></a>theHarvester</h2><p>Kali Linux内置工具</p>
<p>theHarvester是一款信息收集工具，它可以从不同的公开源中(例如：搜索引擎和PGP key服务器)收集e -mail账户信息，用户名称和主机名/子域名等。theHarvester目的是帮助渗透测试人员在早期阶段尽可能的收集一些信息。这个工具十分简单但非常有效。</p>
<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul>
<li>-l 限制并发搜索结果</li>
<li>-b 指定搜索引擎(google，pgp，bing，baidu等)</li>
<li>-d 指定搜索对象</li>
<li>-h 使用Shodan数据库去搜索主机</li>
</ul>
<h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains theHarvester -d 163.com -l 500 -b google</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：使用google作为搜索引擎需要使用proxychains代理进行“科学上网”</p>
</blockquote>
<h2 id="recon-ng"><a href="#recon-ng" class="headerlink" title="recon-ng"></a>recon-ng</h2><p>Kali Linux内置工具=</p>
<p>recon-ng是功能齐全的recon-ng框架，其目的是提供一个强大的环境，以快速，彻底地进行基于Web的开源侦查。recon-ng的使用方法和 Metasploit Framewor非常的相似。</p>
<blockquote>
<p>注：运行时需要使用proxychains代理进行“科学上网”</p>
</blockquote>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul>
<li>back 返回上一级</li>
<li>dashboard 显示活动的总结</li>
<li>db 工作区的数据库页面</li>
<li>exit 退出recon-ng</li>
<li>help 帮助信息</li>
<li>index 创造一个模块</li>
<li>keys 管理第三方的api接口</li>
<li>marketplace 应用市场</li>
<li>modules 已经安装的模块</li>
<li>option 管理当前文本的选项</li>
<li>pdb 打开python进行调试</li>
<li>script 记录并执行命令脚本</li>
<li>shell 执行操作系统命令</li>
<li>show 显示各种框架的条目</li>
<li>snapshots 管理一个快照</li>
<li>spool 将结果输出到一个文件里</li>
</ul>
<h3 id="初始化安装模块"><a href="#初始化安装模块" class="headerlink" title="初始化安装模块"></a>初始化安装模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains recon-ng</span><br><span class="line"></span><br><span class="line">marketplace install all</span><br></pre></td></tr></table></figure>

<h3 id="模块子命令"><a href="#模块子命令" class="headerlink" title="模块子命令"></a>模块子命令</h3><ul>
<li>modules load 加载某个模块</li>
<li>modules reload 退出某个模块</li>
<li>modules search 搜索某个模块</li>
</ul>
<h3 id="示例-查询子域名"><a href="#示例-查询子域名" class="headerlink" title="示例-查询子域名"></a>示例-查询子域名</h3><p>1、搜索要用到的模块（recon-ng利用浏览器进行查询，也支持暴力破解）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules search bing（这里使用bing搜索引擎搜索，也支持其他浏览器）</span><br></pre></td></tr></table></figure>

<p>2、然后装载模块（进行子域名查询）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules load recon/domains-hosts/bing_domain_web</span><br></pre></td></tr></table></figure>

<p>3、查看我们需要配置的列表并进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">options list</span><br><span class="line"></span><br><span class="line">options set source baidu.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：选项子命令</p>
<ul>
<li>options list 选项列表</li>
<li>options set 参数名称 参数值 （配置选项内容）</li>
<li>options unset 参数名称 （清除配置的内容）</li>
</ul>
</blockquote>
<p>4、然后运行模块，进行查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure>

<p>5、查询结果保存在recon-ng的数据库的hosts表中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show hosts</span><br></pre></td></tr></table></figure>

<h3 id="示例-域名解析"><a href="#示例-域名解析" class="headerlink" title="示例-域名解析"></a>示例-域名解析</h3><p>1、我们要调用另一个模块并且查看选项列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules load recon/hosts-hosts/resolve</span><br><span class="line"></span><br><span class="line">options list</span><br></pre></td></tr></table></figure>

<p>2、我们要查询hosts表中的子域名的IP地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">options set source query select host from hosts</span><br></pre></td></tr></table></figure>

<p>3、运行之后我们去hosts查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run</span><br><span class="line"></span><br><span class="line">show hosts</span><br></pre></td></tr></table></figure>

<h3 id="示例-生成报告"><a href="#示例-生成报告" class="headerlink" title="示例-生成报告"></a>示例-生成报告</h3><p>1、搜索要用到的模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules search report</span><br></pre></td></tr></table></figure>

<p>2、转载报告模块并查看列表选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules load reporting/html</span><br><span class="line"></span><br><span class="line">options list</span><br><span class="line"></span><br><span class="line">options set CREATOR plumeria</span><br><span class="line"></span><br><span class="line">options set CUSTOMER baidu</span><br><span class="line"></span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>3、运行模块后就可以在生成的目录下查看文件</p>
<h2 id="SubFinder-KSubdomain-HttpX"><a href="#SubFinder-KSubdomain-HttpX" class="headerlink" title="SubFinder + KSubdomain + HttpX"></a>SubFinder + KSubdomain + HttpX</h2><ul>
<li><strong>SubFinder</strong>：用来查询域名的子域名信息的工具，可以使用很多国外安全网站的api接口进行自动化搜索子域名信息。<ul>
<li><a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></li>
</ul>
</li>
<li><strong>HttpX</strong>：一款运行速度极快的多功能HTTP安全工具，它可以使用retryablehttp库来运行多种网络探针，并使用了多线程机制来维持运行的稳定性和结果的准确性。<ul>
<li><a href="https://github.com/projectdiscovery/httpx">https://github.com/projectdiscovery/httpx</a></li>
</ul>
</li>
<li><strong>ksubdomain</strong>是一款基于无状态子域名爆破工具，支持在Windows/Linux/Mac上使用，它会很快的进行DNS爆破，在Mac和Windows上理论最大发包速度在30w/s,linux上为160w/s的速度。<ul>
<li><a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a></li>
</ul>
</li>
</ul>
<h3 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载go环境</span></span><br><span class="line">wget -c https://storage.googleapis.com/golang/go1.15.11.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压到/usr/local/目录下</span></span><br><span class="line">tar -C /usr/<span class="built_in">local</span>/ -zxvf go1.15.11.linux-amd64.tar.gz   </span><br><span class="line"></span><br><span class="line"><span class="comment">#配置环境</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#添加如下内容后保存：</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行以下命令，使环境变量立即生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看go版本</span></span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置go开发中的环境变量</span></span><br><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br><span class="line"></span><br><span class="line">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure>

<h3 id="下载编译SubFinder与httpx"><a href="#下载编译SubFinder与httpx" class="headerlink" title="下载编译SubFinder与httpx"></a>下载编译SubFinder与httpx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装subfinder</span></span><br><span class="line">go get -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装httpx</span></span><br><span class="line">go get -v github.com/projectdiscovery/httpx/cmd/httpx                                 </span><br></pre></td></tr></table></figure>

<h3 id="下载编译KSubdomain"><a href="#下载编译KSubdomain" class="headerlink" title="下载编译KSubdomain"></a>下载编译KSubdomain</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install libpcap-dev</span><br><span class="line"></span><br><span class="line">git clone https://github.com/knownsec/ksubdomain.git</span><br><span class="line"></span><br><span class="line">cd ksubdomain</span><br><span class="line"></span><br><span class="line">go mod download</span><br><span class="line"></span><br><span class="line">cd cmd</span><br><span class="line"></span><br><span class="line">go build ksubdomain.go</span><br><span class="line"></span><br><span class="line">mv ksubdomain /root/go/bin</span><br><span class="line"></span><br><span class="line">cd /root/go/bin</span><br></pre></td></tr></table></figure>

<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#subfinder基本使用</span></span><br><span class="line">./subfinder -d baidu.com -o output.txt                                               </span><br><span class="line"></span><br><span class="line"><span class="comment">#ksubdomain基本使用</span></span><br><span class="line">./ksubdomain -d baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#管道操作</span></span><br><span class="line">./subfinder -d baidu.com -silent|./ksubdomain -verify -silent|./httpx -title -content-length -status-code</span><br><span class="line"><span class="comment">#可以用管道结合在一起配合工作。达到收集域名，验证域名，http验证存活目的。</span></span><br></pre></td></tr></table></figure>

<h2 id="在线工具查找子域名"><a href="#在线工具查找子域名" class="headerlink" title="在线工具查找子域名"></a>在线工具查找子域名</h2><p><a href="https://searchdns.netcraft.com/">https://searchdns.netcraft.com/</a></p>
<p><a href="https://pentest-tools.com/information-gathering/find-subdomains-of-domain">https://pentest-tools.com/information-gathering/find-subdomains-of-domain</a></p>
<p><a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></p>
<p><a href="http://tool.chinaz.com/subdomain">http://tool.chinaz.com/subdomain</a></p>
<p><a href="https://spyse.com/tools/subdomain-finder">https://spyse.com/tools/subdomain-finder</a></p>
<p><a href="https://www.nmmapper.com/sys/tools/subdomainfinder/">https://www.nmmapper.com/sys/tools/subdomainfinder/</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>资产收集</category>
      </categories>
      <tags>
        <tag>资产收集</tag>
      </tags>
  </entry>
  <entry>
    <title>敏感文件目录探测</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/1.%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%8E%A2%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="目录扫描的介绍"><a href="#目录扫描的介绍" class="headerlink" title="目录扫描的介绍"></a>目录扫描的介绍</h2><p>目录扫描可以让我们发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构。通过目录扫描我们还能扫描敏感文件，后台文件，数据库文件，和信息泄漏文件等等</p>
<p>目录扫描有两种方式：</p>
<ul>
<li>使用目录字典进行暴力才接存在该目录或文件返回200或者403；</li>
<li>使用爬虫爬行主页上的所有链接，对每个链接进行再次爬行，收集这个域名下的所有链接，然后总结出需要的信息。</li>
</ul>
<h2 id="常见敏感文件或目录"><a href="#常见敏感文件或目录" class="headerlink" title="常见敏感文件或目录"></a>常见敏感文件或目录</h2><p>通常我们所说的敏感文件、敏感目录大概有以下几种：</p>
<ul>
<li>robots.txt</li>
<li>crossdomain.xml</li>
<li>sitemap.xml</li>
<li>j后台目录</li>
<li>网站安装目录</li>
<li>网站上传目录</li>
<li>mysql管理页面</li>
<li>phpinfo</li>
<li>网站文本编辑器</li>
<li>测试文件</li>
<li>网站备份文件（.rar、.zip、.7z、.tar、.gz、.bak）</li>
<li>DS_Store文件</li>
<li>vim编辑器备份文件（.swp）</li>
<li>WEB-INF/web.xml文件</li>
</ul>
<h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><h4 id="robots-txt是什么？"><a href="#robots-txt是什么？" class="headerlink" title="robots.txt是什么？"></a>robots.txt是什么？</h4><p>robots.txt是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被搜索引擎访问的部分，或者指定搜索引擎只收录指定的内容。当一个搜索引擎（又称搜索机器人或蜘蛛程序）访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。</p>
<h4 id="robots-txt的作用？"><a href="#robots-txt的作用？" class="headerlink" title="robots.txt的作用？"></a>robots.txt的作用？</h4><ul>
<li>引导搜索引擎蜘蛛抓取指定栏目或内容</li>
<li>网站改版或者URL重写优化时候屏蔽对搜索引擎的不友好的链接</li>
<li>屏蔽死链接、404错误页</li>
<li>屏蔽无内容、无价值页面</li>
<li>屏蔽重复页面，如评论页、搜索结果页</li>
<li>引导蜘蛛抓取网站地图</li>
</ul>
<h4 id="robots-txt的语法？"><a href="#robots-txt的语法？" class="headerlink" title="robots.txt的语法？"></a>robots.txt的语法？</h4><ul>
<li>User-agent: （定义搜索引擎）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">User-agent: *			（定义所有搜索引擎）</span><br><span class="line">User-agent: Googlebot		（定义谷歌，只允许谷歌蜘蛛爬行）</span><br><span class="line">User-agent: Baiduspider		（定义百度，只允许百度蜘蛛爬行）</span><br><span class="line"></span><br><span class="line">不同的搜索引擎的搜索机器人有不同的名称，谷歌:Googlebot、百度:Baiduspider、MSN:MSNbot、Yahoo:Slurp。</span><br></pre></td></tr></table></figure>
</li>
<li>Disallow: （用来定义禁止蜘蛛爬行的页面或目录）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">Disallow: /		（禁止蜘蛛爬行网站的所有目录&quot;/&quot;表示根目录下）</span><br><span class="line">Disallow:/admin		（禁止蜘蛛爬取/admin目录）</span><br><span class="line">Disallow: /abc.html	（禁止蜘蛛爬去abc.html页面）</span><br><span class="line">Disallow: /help.html 	（禁止蜘蛛爬去help.html页面）</span><br></pre></td></tr></table></figure>
</li>
<li>Allow：（用来定义允许蜘蛛爬取的页面或子目录）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">Allow: /admin/test/	（允许蜘蛛爬取admin下的test目录）</span><br><span class="line">Allow: /admin/abc.html	（允许蜘蛛爬去admin目录中的abc.html页面）</span><br></pre></td></tr></table></figure>
  <img src="https://img2020.cnblogs.com/blog/2224145/202103/2224145-20210303154852471-1588407548.png" alt="img"></li>
</ul>
<h3 id="crossdomain-xml"><a href="#crossdomain-xml" class="headerlink" title="crossdomain.xml"></a>crossdomain.xml</h3><p>跨域，顾名思义就是需要的资源不在自己的域服务器上，需要访问其他域服务器。跨域策略文件是一个xml文档文件，主要是为web客户端(如Adobe Flash Player等)设置跨域处理数据的权限。打个比方说，公司A部门有一台公共的电脑，里面存放着一些资料文件，专门供A部门内成员自己使用，这样，A部门内的员工就可以访问该电脑，其他部门人员则不允许访问。如下图：</p>
<blockquote>
<p><img src="https://i.loli.net/2021/10/05/jDug5eKLME2NRm9.png" alt="img"></p>
<p>A部门的员工可以任意访问A部门的公共电脑，但是不能直接访问B部门的公共电脑。有一天，B部门领导觉得他们的资料非常有用，想要与A部门分享，于是就给A部门一个令牌，这样A部门的员工也可以访问B部门的公共电脑了。A部门可访问B部门设置访问权限，这个权限设置就是跨域策略文件crossdomain.xml存在的意义。</p>
</blockquote>
<p>crossdomin.xml 示例文件如下，重点查看<code>allow-access-from</code>字段获取网站目录信息</p>
<p><img src="https://img2020.cnblogs.com/blog/2224145/202103/2224145-20210303154534325-1014027553.png" alt="img"></p>
<h3 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h3><p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p>
<p><img src="https://i.loli.net/2021/10/05/WoIy7uw3BRNlCP4.png" alt="img"></p>
<h3 id="源代码泄露"><a href="#源代码泄露" class="headerlink" title="源代码泄露"></a>源代码泄露</h3><h4 id="git源代码泄露"><a href="#git源代码泄露" class="headerlink" title=".git源代码泄露"></a>.git源代码泄露</h4><p>Git是一个开源的分布式版本控制系统，在执行git init初始化目录的时候，会在当前目录下自动创建一个.git目录，用来记录代码变更记录等。发布代码的时候，如果没有把.git这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p>
<p>利用工具：GitHack</p>
<p>项目地址：<a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a></p>
<p>扫描目录：</p>
<p><img src="https://i.loli.net/2021/10/05/gd74TSv6aIxEpmb.png" alt="img"></p>
<p>使用GitHack工具成功恢复代码</p>
<p><img src="https://i.loli.net/2021/10/05/uBzLftVJkQ2nwZr.png" alt="img"></p>
<h4 id="cvs源代码泄露"><a href="#cvs源代码泄露" class="headerlink" title=".cvs源代码泄露"></a>.cvs源代码泄露</h4><p>CSV是一个C/S系统，多个开发人员通过中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对CVS/Root以及CVS/Entries目录，直接就可以看到泄露的信息。</p>
<p>返回根信息：<code>http://www.example.com/CVS/Root</code></p>
<p>返回所有文件的结构：<code>http://www.example.com/CVS/Entries</code></p>
<p>漏洞利用工具：dvcs-ripper</p>
<p>项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rip-cvs.pl -v -u http://www.example.com/CVS</span><br></pre></td></tr></table></figure>

<h4 id="svn源代码泄露"><a href="#svn源代码泄露" class="headerlink" title=".svn源代码泄露"></a>.svn源代码泄露</h4><p>SVN是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要地方源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露在外网环境，可以使用.svn/entries文件，获取到服务器源码。</p>
<p>漏洞利用工具：</p>
<p>Seay SVN漏洞利用工具</p>
<p><img src="https://i.loli.net/2021/10/05/4AOYiPwVRNh7DXK.png" alt="img"></p>
<p>SvnExploit</p>
<p>项目地址：<a href="https://github.com/admintony/svnExploit/">https://github.com/admintony/svnExploit/</a></p>
<p>扫描站点存在/.svn/entries目录</p>
<p><img src="https://i.loli.net/2021/10/05/9SQeYdZz1yFkTU6.png" alt="img"></p>
<p>成功恢复代码</p>
<p><img src="https://i.loli.net/2021/10/05/nIVpGW3CxfX9Z6t.png" alt="img"></p>
<h4 id="hg源代码泄露"><a href="#hg源代码泄露" class="headerlink" title=".hg源代码泄露"></a>.hg源代码泄露</h4><p>Mercurial是一种轻量级分布式版本控制系统，使用hg init的时候会生成.hg。</p>
<p>漏洞利用工具：dvcs-ripper</p>
<p>项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rip-cvs.pl -v -u http://www.example.com/.hg/</span><br></pre></td></tr></table></figure>

<h3 id="DS-store文件泄露"><a href="#DS-store文件泄露" class="headerlink" title=".DS_store文件泄露"></a>.DS_store文件泄露</h3><p>.DS_store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_store上传部署到服务器，可能造成文件目录结构泄露，特别是备份文件、源代码文件。</p>
<p>漏洞利用工具：ds_store_exp</p>
<p>项目地址：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ds_store_exp.py http://xxx.com/.DS_Store</span><br></pre></td></tr></table></figure>

<h3 id="网站备份文件泄露"><a href="#网站备份文件泄露" class="headerlink" title="网站备份文件泄露"></a>网站备份文件泄露</h3><p>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。 常见的备份文件后缀：<code>.rar</code>、<code>.zip</code>、<code>.7z</code>、<code>.tar.gz</code>、<code>.bak</code>、<code>.txt</code>、<code>.old</code>、<code>.temp</code></p>
<h3 id="SWP文件泄露"><a href="#SWP文件泄露" class="headerlink" title="SWP文件泄露"></a>SWP文件泄露</h3><p>swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为.filename.swp。</p>
<h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><p>WEB-INF是Java的Web应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>
<p>WEB-INF主要包含以下文件或目录：</p>
<ul>
<li>WEB-INF/web.xml：Web应用程序配置文件，描述了servlet和其他的应用组件及命名规则</li>
<li>WEB-INF/database.properties：数据库配置文件</li>
<li>WEB-INF/classes/：一般用来存放Java类文件（.class）</li>
<li>WEB-INF/lib/：用来存放打包好的库（.jar）</li>
<li>WEB-INF/src/：用来存放源代码</li>
</ul>
<p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接下载 class 文件，再通过反编译 class 文件，得到网站源码。</p>
<h2 id="敏感目录收集方式"><a href="#敏感目录收集方式" class="headerlink" title="敏感目录收集方式"></a>敏感目录收集方式</h2><h3 id="网页中寻找"><a href="#网页中寻找" class="headerlink" title="网页中寻找"></a>网页中寻找</h3><ul>
<li>在robots.txt中看能否发现敏感目录</li>
<li>F12源代码链接处</li>
<li>通过查看一些图片的属性路径，运气好会发现很多隐藏的目录 结合域名+目录，用御剑进行扫描，当然也可以手动输入一些常见的后台管理地址进行访问。</li>
</ul>
<h3 id="其他端口中寻找"><a href="#其他端口中寻找" class="headerlink" title="其他端口中寻找"></a>其他端口中寻找</h3><p>有时候网站的不同端口中有一些便是专门的后台管理地址。根据经验总结，很多网站8080、8081端口是网站的管理地址。</p>
<p>例如：<code>http://www.xxx.com:8080</code></p>
<h3 id="网站分目录下寻找"><a href="#网站分目录下寻找" class="headerlink" title="网站分目录下寻找"></a>网站分目录下寻找</h3><p>有的时候网站会把管理地址放在一个分目录下，有的时候一个网站比较大，后台管理页面也比较多，就要分目录的去找，</p>
<p>例如：<code>http://www.xxx.com/test/admin/manage.php</code></p>
<p>你可以通过一些方式获取到网站的目录，然后在这个目录下进行扫描。当一个网站你扫描根目录没有任何收获时，这个时候通过分析网站的目录结构，然后扫描域名+目录，就能找出它的后台管理地址。</p>
<h3 id="子域名下寻找"><a href="#子域名下寻找" class="headerlink" title="子域名下寻找"></a>子域名下寻找</h3><p>有的时候网站的管理地址会放在子域名下，所以主站什么都找不到的情况下，如果发现子域名，就通过这些方法去子域名下找一下吧。</p>
<p>例如：<code>http://admin.xxx.com/login</code></p>
<h3 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h3><p>Google Hacking 一般是做为黑客在入侵时的一个手段.在入侵过程中有时需要查找后台的登陆口就需要用到Google Hacking。有时猜解密码的时候谷歌也是提供查找管理员资料的有效平台。是一种社会工程学获取目标信息的手段。可以用于跟踪某对象在网络上的各种踪迹（如交友平台、微博等）。</p>
<p>有关谷歌语法的介绍可参考第一章的第一节：<a href="../undefined">1.开源情报与搜索引擎</a></p>
<h3 id="网站爬虫"><a href="#网站爬虫" class="headerlink" title="网站爬虫"></a>网站爬虫</h3><p>通过awvs，burpsuite的爬行功能，可以拓扑出网站的目录结构，有的时候运气好能在网页的目录结构中找到好东西，不过爬行一般会结合工具扫描，比如你构造域名+目录，然后扫描这个。</p>
<p>burp spider爬行</p>
<p><img src="https://i.loli.net/2021/10/05/tOydZi3zbE1SkhP.png" alt="img"></p>
<h3 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a>扫描工具</h3><h4 id="御剑后台扫描工具"><a href="#御剑后台扫描工具" class="headerlink" title="御剑后台扫描工具"></a>御剑后台扫描工具</h4><p>御剑是一款针对网站目录及后台管理地址进行扫描的工具。该工具的开发思路其实是非常简单的，而工具里目录或者后台管理地址等的扫描用例才是一个黑客多年经验的结晶。<img src="https://i.loli.net/2021/10/05/BLz8JpVHl4TZxbj.png" alt="img"></p>
<h4 id="DirBuster"><a href="#DirBuster" class="headerlink" title="DirBuster"></a>DirBuster</h4><p>DirBuster是OWASP（Open Web Application Security Project）开发的一款专门用于探测Web服务器目录及隐藏文件的，功能十分强大的工具。DirBuster最擅长目录的暴力猜解，因此，DirBuster一般都会发现一些目录浏览、目录遍历及目录穿越等漏洞，甚至还会发现一些后台管理地址等。</p>
<p><img src="https://i.loli.net/2021/10/05/LXGmHOM45t3Wsx8.png" alt="3b2fca51126d0f343b1cb86a1085d9a9.png"></p>
<h4 id="wwwscan"><a href="#wwwscan" class="headerlink" title="wwwscan"></a>wwwscan</h4><p>wwwscan是一款网站后台扫描工具，简单好用又强大。它有命令行和图形界面两种。</p>
<p><img src="https://i.loli.net/2021/10/05/nY3vAF5JiEqBMem.png" alt="e22f74eaee18b731c5453b0e79f8e294.png"></p>
<h4 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h4><p>Kali Linux内置工具</p>
<p>dirb是一个基于字典的web目录扫描工具,会用递归的方式来获取更多的目录,它还支持代理和http认证限制访问的网站。</p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb http://www.baidu.com</span><br></pre></td></tr></table></figure>

<h4 id="dirmap"><a href="#dirmap" class="headerlink" title="dirmap"></a>dirmap</h4><p>一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑</p>
<p>项目地址：<a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 dirmap.py -i https://target.com -lcf</span><br></pre></td></tr></table></figure>

<h4 id="Cansina"><a href="#Cansina" class="headerlink" title="Cansina"></a>Cansina</h4><p>Cansina是用python写的一款探测网站的敏感目录和内容的安全测试工具</p>
<p>项目地址：<a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 cansina.py -u http://baidu.com</span><br></pre></td></tr></table></figure>

<h4 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h4><p>dirsearch是一个python开发的目录扫描工具,目的是扫描网站的敏感文件和目录从而找到突破口。</p>
<p>项目地址：<a href="https://github.com/maurosoria/dirsearch/">https://github.com/maurosoria/dirsearch/</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 dirsearch.py -u http://www.baidu.com -e php,js --exclude-status 403,401</span><br></pre></td></tr></table></figure>

<h4 id="weakfilescan"><a href="#weakfilescan" class="headerlink" title="weakfilescan"></a>weakfilescan</h4><p>基于爬虫，动态收集扫描目标相关信息后进行二次整理形成字典规则，利用动态规则的多线程敏感信息泄露检测工具。</p>
<p>项目地址：<a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a></p>
<p>运行示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python wyspider.py http://wuyun.org php</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>针对Web应用的暴力破解</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/10.%E9%92%88%E5%AF%B9Web%E5%BA%94%E7%94%A8%E7%9A%84%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="表单暴力破解"><a href="#表单暴力破解" class="headerlink" title="表单暴力破解"></a>表单暴力破解</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p>
<p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。 这里的认证安全策略, 包括：</p>
<ol>
<li>是否要求用户设置复杂的密码；</li>
<li>是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；</li>
<li>是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；</li>
<li>是否采用了双因素认证；</li>
</ol>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul>
<li>确认登录接口的脆弱性<ul>
<li>尝试登录——抓包——观察验证元素和response信息，判断是否存在暴力破解的可能</li>
</ul>
</li>
<li>对字典进行优化<ul>
<li>根据实际情况对字典进行优化，提高暴力破解的效率</li>
</ul>
</li>
<li>工具自动化操作</li>
</ul>
<p>以下实验环境是基于Pikachu靶场进行的。</p>
<p>靶场下载：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p>
<h2 id="简单表单暴力破解"><a href="#简单表单暴力破解" class="headerlink" title="简单表单暴力破解"></a>简单表单暴力破解</h2><p><img src="https://i.loli.net/2021/10/05/WU9AscIgqDwNtE1.png" alt="img"></p>
<p>输入错误时，有以下提示</p>
<p><img src="https://i.loli.net/2021/10/05/eZYwM9kvyqftQBL.png" alt="img"></p>
<p>这里没有验证码等其他验证机制，抓包看看</p>
<p><img src="https://i.loli.net/2021/10/05/Q9KXaud3UbYzs1k.png" alt="411a58df5762da917562a60df616d9b7.png"></p>
<p>发送到Intruder进行暴力破解</p>
<p><img src="https://i.loli.net/2021/10/05/eEIQXjUospwLFuK.png" alt="e20f71994117892067fb23b951d60174.png"></p>
<p>设置好Payload</p>
<p><img src="https://i.loli.net/2021/10/05/fDNSacVGsy7Fvor.png" alt="b054b7e3eccc40104336ad93493844e7.png"></p>
<p><img src="https://i.loli.net/2021/10/05/BMmvOWEVGwtijJk.png" alt="c807ca1a8508c1ae817b5d803b1a4c5f.png"></p>
<p>然后把“ username or password is not exists～ ”复制到Grep Match中。后面可以利用Grep Match区分哪些请求里面有这个字符串</p>
<p><img src="https://i.loli.net/2021/10/05/xcmQdGXPbI8qaez.png" alt="d5c28d32cdd16bd6430c53da023752b1.png"></p>
<p>然后就可以开始攻击了，匹配到 username or password is not exists 都是攻击失败的，另外，从响应长度也可以看出攻击成功与否</p>
<p><img src="https://i.loli.net/2021/10/05/X75OasPWkIMLcwH.png" alt="a479b7c9cdea29fec0047c53e1e525fc.png"></p>
<h2 id="验证码绕过（on-server）"><a href="#验证码绕过（on-server）" class="headerlink" title="验证码绕过（on server）"></a>验证码绕过（on server）</h2><p>验证码可以用来防止恶意注册、防止暴力破解。服务端验证码常见问题：</p>
<ul>
<li>验证码在后台不过期，导致长期可以使用</li>
<li>验证码校验不严格，逻辑出现问题</li>
<li>验证码设计的太过简单和有规律，容易被猜解</li>
</ul>
<p><img src="https://i.loli.net/2021/10/05/JOpHyoWxMvltsui.png" alt="img"></p>
<p>我们先简单的测试一下，不输入验证码的情况下会提示验证码为空，输入错误验证码的情况下会提示验证码错误，只有验证码正确的前提下才会提示账号或密码不存在</p>
<p>下面通过抓包判断一下服务器端有没有对验证码进行验证，发现是有的</p>
<p><img src="https://i.loli.net/2021/10/05/RNCpgvOcTrULKI4.png" alt="img"></p>
<p>说明后端对验证码是有验证的，我们来了解一下验证码生成的逻辑：</p>
<p>当我们刷新页面的时候，我们会向后台发送一个请求，后台收到请求会生成一个验证码并在session中把验证码保存下来。</p>
<p>我们先生成一个新的验证码，然后在BurpSuite中输入正确的验证码</p>
<p><img src="https://i.loli.net/2021/10/05/grZoR2BVjCFqxkL.png" alt="img"></p>
<p>提示账号密码不存在</p>
<p><img src="https://i.loli.net/2021/10/05/Z29GPSH6xMmNXdD.png" alt="img"></p>
<p>我们换个密码再发送一次</p>
<p><img src="https://i.loli.net/2021/10/05/T3xV2H89Qts4GcM.png" alt="img"></p>
<p>发现依然是提示账号密码不存在，正常来说应该提示验证码错误，这说明验证码长期有效，我们发送到Intruder中直接暴力破解</p>
<p><img src="https://i.loli.net/2021/10/05/fNgdnPUuqSbcoLV.png" alt="f55213b55230b3fdb2c1b88f535e3df9.png"></p>
<h2 id="验证码绕过（on-client）"><a href="#验证码绕过（on-client）" class="headerlink" title="验证码绕过（on client）"></a>验证码绕过（on client）</h2><p><img src="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918141249035-185107144.png" alt="img"></p>
<p>这里我们需要输入验证码，我们不能对验证码暴力破解，通过抓包发现请求里面只是多了验证码</p>
<p><img src="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918141436927-844829976.png" alt="img"></p>
<p>通过查看源码，发现验证码的验证逻辑是在客户端实现的</p>
<p><img src="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918141607397-1462570833.png" alt="img"></p>
<p>这个JavaScript会从0-9和26个大写字母中随机挑选5个作为验证码，然后用 validate() 去验证</p>
<p>另外，通过源码也可以看到，我们每点一次验证码，就会调用 createCode() 改变验证码</p>
<p><img src="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918141835317-2117397253.png" alt="img"></p>
<p>通过BurpSuite发现后台不会对输入错误的验证码进行验证，在浏览器中，输入错误的验证码是有提示的</p>
<p><img src="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918142146348-490097606.png" alt="img"></p>
<p>正常来说会有这个弹窗</p>
<p><img src="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918142226004-1509701597.png" alt="img"></p>
<p>说明前端设置的验证码如同虚设，后端不会对验证码进行验证。那么我们不用理会验证码，直接进行暴力破解就可以了</p>
<p><img src="https://i.loli.net/2021/10/05/nahYLzDuR1ICHyl.png" alt="80e7b4b4b0da5a1ca4e4d0f538d282a1.png"></p>
<h2 id="PKAV-HTTP-Fuzzer-识别验证码"><a href="#PKAV-HTTP-Fuzzer-识别验证码" class="headerlink" title="PKAV HTTP Fuzzer 识别验证码"></a>PKAV HTTP Fuzzer 识别验证码</h2><p>PKAV HTTP Fuzzer是PKAV团队编写的一个带图形验证码爆破识别的渗透测试工具。</p>
<p>不过该工具现在已经停止更新了，最近一次更新是在2016年。</p>
<p>该工具只能识别较为简单的验证码。</p>
<p>使用之前需要先安装.net framework 4.0或以上版本</p>
<p>首先使用burpsuite对web表单进行抓包。</p>
<p><img src="https://i.loli.net/2021/10/05/xf2kUvyNce5KuDb.png" alt="120f248052e508b544bc09f227e038d9.png"></p>
<p><img src="https://i.loli.net/2021/10/05/SMAxKhDlHn4PIC3.png" alt="48529ff85d52307ce3d3533226811365.png"></p>
<p>打开PKAV HTTP Fuzzer，将地址与burp抓到的请求包粘贴到工具中的对应位置。</p>
<p><img src="https://i.loli.net/2021/10/05/nCiOrXZetAQ1Wvm.png" alt="f4b3f7eeb0e72590e3d5c5ab60861ede.png"></p>
<p>对用用户名和密码添加标记，对验证码添加验证码标记。</p>
<p><img src="https://i.loli.net/2021/10/05/qOHFEK8Z1nsvY3R.png" alt="0649d335bce73a54bccc64b755a2ab39.png"></p>
<p>更改重放模式为异值异步重放模式，对两个变体分别导入字典</p>
<p><img src="https://i.loli.net/2021/10/05/DUXnEG4cwrxJvao.png" alt="9d1936f68dd1d79324ae103447fb5444.png"></p>
<p>右键验证码图片，复制验证码地址</p>
<p><img src="https://i.loli.net/2021/10/05/q4fCtNX5wLJRIQO.png" alt="bb2635eed417fb5d9298cf0b9de92b62.png"></p>
<p>将验证码粘贴到到工具中的地址框</p>
<p><img src="https://i.loli.net/2021/10/05/lLVIYW8miKHJ6At.png" alt="8b1cfd6f013ded1cbd7fbda681ae2476.png"></p>
<p>对这种简单的验证码识别还算准确（注意使用自带识别引擎识别，第三方识别引擎都是用不了的）</p>
<p>使用发包器，开始进行暴力破解<img src="https://i.loli.net/2021/10/05/ixO7lGL5SVYPQCT.png" alt="51bfaff708834b9294d0c1d743b5bd98.png"></p>
<p>可以看到长度为867的返回包中显示登录成功。</p>
<p><img src="https://i.loli.net/2021/10/05/DBjJxQGIZgY2Szu.png" alt="6cef7fefde3290ab4d10b71814defec6.png"></p>
<h2 id="Token绕过"><a href="#Token绕过" class="headerlink" title="Token绕过"></a>Token绕过</h2><p>利用开发者工具可以发现这里有一个隐藏的标签</p>
<p><a href="https://img2018.cnblogs.com/blog/1782235/201909/1782235-20190918150005897-1483756020.png"><img src="https://i.loli.net/2021/10/05/651qkG8xwUJejQF.png" alt="img"></a></p>
<p>里面的数字就是我们的token，我的每次提交的请求都会有一个token值，后端会验证这个token值</p>
<p>但是这个token已经写到了html页面中，攻击者只需要写个工具，提交认证前都加上这个token就好了</p>
<p>我们抓包后，发送到intruder中，步骤如图</p>
<p><img src="https://i.loli.net/2021/10/05/LniaTh1z4BqKvJF.png" alt="468c044c99cb8b22304d3fca69cdc227.png"></p>
<p>这里只对admin用户进行暴力破解（注意攻击类型为Pitchfork）</p>
<p>我们把token设置变量，options的grep extract添加token：</p>
<p><img src="https://i.loli.net/2021/10/05/ZFqsTPl2HrgzuEh.png" alt="455810f95f3da0de85735a0b866ece0f.png"></p>
<p><img src="https://i.loli.net/2021/10/05/1mUksKjvVnIRFC6.png" alt="image-20211005185127542">**</p>
<p>token变量的type设置成recursive grep</p>
<p><img src="https://i.loli.net/2021/10/05/IZKfaYV6EdPWXmJ.png" alt="5ffd92bd1f4220bf840521e5d3802187.png"></p>
<p>将请求数设置为1</p>
<p><img src="https://i.loli.net/2021/10/05/y2fUX6Tav3Qeq4C.png" alt="2b707b1da69fbbab8082b1814b0d1c56.png"></p>
<p>最后点击Start attack进行攻击</p>
<p><img src="https://i.loli.net/2021/10/05/a9fJun1QRj87GPC.png" alt="32c699c665b8d80f3821d634c175a1bb.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>模糊测试初探</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/11.%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="模糊测试介绍"><a href="#模糊测试介绍" class="headerlink" title="模糊测试介绍"></a>模糊测试介绍</h2><p>模糊测试（fuzz testing，fuzzing）是一种软件测试技术，其核心思想是将自动或半自动生成的随机数据输入到一个程序中并监视程序异常，如崩溃、断言失败，以发现可能的程序错误，比如内存泄露。模糊测试常常用于检测软件或计算机系统的安全漏洞。</p>
<p>可以说，任何以暴力枚举形式的测试都能称为模糊测试。</p>
<p>漏洞挖掘有三种方法：白盒代码审计、灰盒逆向工程、黑盒测试。其中黑盒的Fuzz测试是效率最高的一种，能够快速验证大量潜在的安全威胁。</p>
<p>这里只是对一些常用的Web应用Fuzz工具做简单介绍，之后会结合实战进行一个详细地演示。</p>
<h2 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h2><p>在很多模糊测试场景中，研究人员可能会需要手动输出测试Payload，而BurpSuite 可以帮助我们将整个过程以自动化的方式实现。</p>
<p>关于BurpSuite的使用已经讲过很多遍了，这里就不多解释了。</p>
<h2 id="WFuzz"><a href="#WFuzz" class="headerlink" title="WFuzz"></a>WFuzz</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>wfuzz 是一款Python开发的Web安全模糊测试工具。</p>
<p>项目地址：<a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a></p>
<p>官方手册：<a href="https://wfuzz.readthedocs.io/en/latest/">https://wfuzz.readthedocs.io/en/latest/</a></p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul>
<li>暴破文件和路径</li>
<li>测试URL中的参数</li>
<li>测试POST请求</li>
<li>测试Cookies</li>
<li>测试自定义请求头</li>
<li>测试HTTP请求方法（动词）</li>
<li>使用代理</li>
<li>认证</li>
<li>递归测试</li>
<li>测试速度与效率</li>
<li>输出到文件</li>
<li>不同的输出</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>基础语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz [options] -z payload,params &lt;url&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>常用参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-z  payloads里面的参数（wfuzz -e payloads 可以查看）</span><br><span class="line"></span><br><span class="line"> -z  file,1.txt（以文件形式，导入1.txt）</span><br><span class="line"></span><br><span class="line"> -z  range,1-10（以范围形式，1到10）</span><br><span class="line"></span><br><span class="line"> -z  list,1-2-3-10（列表形式，1,2,3,10）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-d   设定POST量</span><br><span class="line"></span><br><span class="line"> -d  “uname=admin&amp;passwd=admin”</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b   设定cookie量</span><br><span class="line"></span><br><span class="line"> -b  “cookie=”</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-H  设定头部信息</span><br><span class="line"></span><br><span class="line"> -H  “User-Agent: firfox”</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-X  设定请求方法</span><br><span class="line"></span><br><span class="line"> -X  GET</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-R  递归深度，探测目录很好</span><br><span class="line"></span><br><span class="line"> -R 1（深度为1）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-t   并发数 / -s  请求间隔时间  （这个主要是防拉黑，比如我要fuzz狗）</span><br><span class="line"></span><br><span class="line"> -t 3 -s 5</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f   输出到文件的格式，格式有raw,json,csv,magictree,html</span><br><span class="line"></span><br><span class="line"> -f /tmp/1,html （将结果输出到tmp目录下的1，以html格式）</span><br></pre></td></tr></table></figure>

<p>输出的结果信息解析：</p>
<p>结果信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ID：测试时的请求序  </span><br><span class="line"></span><br><span class="line">Response：HTTP响应码			C</span><br><span class="line"></span><br><span class="line">Lines：响应信息中的行数      	 L</span><br><span class="line"></span><br><span class="line">Word：响应信息中的字数         	 W</span><br><span class="line"></span><br><span class="line">Chars：响应信息中的字符数       	H</span><br><span class="line"></span><br><span class="line">Payload：当前使用的payload</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">隐藏结果  --hc  --hl  --hw  --hh </span><br><span class="line"></span><br><span class="line"> 隐藏响应码405  --hc 405 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">显示结果   --sc  --sl  --sw  --sh</span><br><span class="line"></span><br><span class="line"> 显示响应码405  --sc 405</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>遍历id值隐藏500返回码并保存为html文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -z range,1-200 --hc 500 -f 1,html http://www.XXX.net/Pro_show.asp?proid=FUZZ</span><br></pre></td></tr></table></figure>

<p>需要一次测试多个FUZZ</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -z file,1.txt -z file,2.txt  http://www.xxx.com/FUZZ/FUZ2Z.html</span><br></pre></td></tr></table></figure>

<p>对于需要base64加密的cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -z file,1.txt,base64 -b “cookie=”FUZZ” http://www.xxx.com”</span><br></pre></td></tr></table></figure>

<p>探测目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -z file,common.txt -R 2 -f 2.html,html http://www.baidu.com/FUZZ</span><br></pre></td></tr></table></figure>

<h2 id="FFuF"><a href="#FFuF" class="headerlink" title="FFuF"></a>FFuF</h2><p>ffuf是一款Go语言编写的高速Web Fuzzer工具，该项目深受大型项目gobuster和wfuzz的启发。</p>
<p>项目地址：<a href="https://github.com/ffuf/ffuf/">https://github.com/ffuf/ffuf/</a></p>
<p>用法与wfuzz差不多，就不进行具体介绍了。</p>
<p>具体用法可查看这篇文章：<a href="https://www.cnblogs.com/secxue/p/14617343.html">https://www.cnblogs.com/secxue/p/14617343.html</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>防护扫描与服务枚举</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/3.%E9%98%B2%E6%8A%A4%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9C%8D%E5%8A%A1%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h2 id="防火墙识别"><a href="#防火墙识别" class="headerlink" title="防火墙识别"></a>防火墙识别</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>防火墙(Firewall):防火墙指的是一个由软件和硬件设备组合而成、在内部网和外部网之间、专用网与公共网之间的边界上构造的保护屏障。防火墙是一种保护计算机网络安全的技术性措施，它通过在网络边界上建立相应的网络通信监控系统来隔离内部和外部网络，以阻挡来自外部的网络入侵。</p>
<p>通过发送SYN和ACK数据包并分析回包可以大概判断端口是否被防火墙过滤，对应关系如下表：</p>
<p><img src="https://img.136.la/20210811/2623fe2699d84c3c95a67f0d743cb7b5.jpg" alt="技术分享图片"></p>
<h3 id="nmap检测"><a href="#nmap检测" class="headerlink" title="nmap检测"></a>nmap检测</h3><p>使用nmap识别是否开启防火墙过滤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sA &lt;ip&gt; -p &lt;端口号&gt;	#端口号可随机</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/AyuLdYB7qV65Sbp.png" alt="5584d547d07031a8387f1626102702de.png"></p>
<p>从状态可以看出，前者开启了防护墙过滤，而后者没有。</p>
<h2 id="WAF识别"><a href="#WAF识别" class="headerlink" title="WAF识别"></a>WAF识别</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。</p>
<h3 id="nmap脚本扫描"><a href="#nmap脚本扫描" class="headerlink" title="nmap脚本扫描"></a>nmap脚本扫描</h3><p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-waf-detect.nse www.baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="Wafw00f"><a href="#Wafw00f" class="headerlink" title="Wafw00f"></a>Wafw00f</h3><p>==Kali Linux内置工具==</p>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wafw00f baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡检测"><a href="#负载均衡检测" class="headerlink" title="负载均衡检测"></a>负载均衡检测</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p>
<ul>
<li>广域网负载均衡</li>
</ul>
<p>他的原理就是DNS，简单的方法就是使用DNS轮询来进行负载均衡。当你访问一个域名时，同一个域名会被解析成多个A记录解析到多个ip地址上。</p>
<ul>
<li>服务器负载均衡</li>
</ul>
<p>基于web的服务，经常使用的是nginx、apache这种应用层的负载均衡。</p>
<p>当然也可以使用一些负载均衡设备去实现。</p>
<blockquote>
<p>目的：在扫描探测的阶段，我们也有必要发现一下目标域名被解析到多少个服务器，这些歌服务器有可能因为管理员的配置不善，不同的服务器之间他们的安全防护是不一样的，配置也不一样，有的ip可能就会存在问题。这时候我们去识别目标系统使用的是什么负载均衡，以及这个负载均衡，他是不是本身存在有漏洞。</p>
</blockquote>
<h3 id="ldb"><a href="#ldb" class="headerlink" title="ldb"></a>ldb</h3><p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldb www.baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a>SNMP扫描</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p><strong>SNMP：简单网络管理协议</strong></p>
<ul>
<li>基于SNMP，进行网络设备监控，如：交换机、防火墙、服务器，CPU等其系统内部信息。基本都可以监控到</li>
<li>community：登录证书，容易被管理员遗忘修改其特征字符 #可用字典破解community（public/private/manager）</li>
<li>信息的金矿，经常被错误配置</li>
</ul>
<p><strong>MIB Tree：</strong></p>
<ul>
<li>SNMP Management Information</li>
<li>树型的网络设备管理功能数据库</li>
</ul>
<h3 id="实验前准备"><a href="#实验前准备" class="headerlink" title="实验前准备"></a>实验前准备</h3><p><strong>安装服务</strong></p>
<p><img src="https://i.loli.net/2021/10/05/85U3arIzFtbwdBm.png" alt="ae48d149296cc788257c26e64ca572ea.png"></p>
<p><strong>开启服务</strong></p>
<p><img src="https://i.loli.net/2021/10/05/WRrzJepmAH9lnhB.png" alt="d485a496a5508d5aa5948c360aa87d07.png"></p>
<p>默认接受的社区为monitor，且接受来自任何主机的snmp数据包</p>
<h3 id="snmp-check"><a href="#snmp-check" class="headerlink" title="snmp-check"></a>snmp-check</h3><p>==Kali Linux内置工具==</p>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmp-check 192.168.123.188 -c monitor</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/uDUAGfRKconYF9V.png" alt="dbb7f10caccb74233aa89189bded2968.png"></p>
<p>相比于onesixtyone能扫描出更多信息，相比于snmpwalk可读性更好。</p>
<h2 id="SMB扫描"><a href="#SMB扫描" class="headerlink" title="SMB扫描"></a>SMB扫描</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p><strong>SMB协议：</strong></p>
<ul>
<li>Server Message Block协议</li>
<li>微软历史上出现问题最多的协议</li>
<li>实现复杂，默认在Windows上是开放的，也是最常用的协议，用于实现文件的共享</li>
</ul>
<h3 id="nmap脚本扫描-1"><a href="#nmap脚本扫描-1" class="headerlink" title="nmap脚本扫描"></a>nmap脚本扫描</h3><p>可以使用nmap扫描默认开放的端口139,445，但是不能准确判断操作系统的类型，一般情况下是Windows系统</p>
<p>1、使用nmap自带的脚本进行操作系统的判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 192.168.123.155 -p139,445 --script=smb-os-discovery.nse</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/AIN1zeR7KFWQykE.png" alt="0f24a04ebf8aef1ffa37c6ad8a661aa9.png"></p>
<p>2、扫描Windows系统中的SMB协议是否有漏洞；可以使用smb-vuln-*.nse来指定所有的脚本文件，进行全扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -v -p139,445 --script=smb-vuln-*.nse --script-args=safe=1 192.168.123.155 </span><br></pre></td></tr></table></figure>

<p>&lt;img src=”data:;base64,<br>        &lt;svg width=” 1700”=”” height=”1536” xmlns=”<a href="http://www.w3.org/2000/svg&quot;&gt;">http://www.w3.org/2000/svg&quot;&gt;</a>  “ /&gt;</p>
<h3 id="enum4linux"><a href="#enum4linux" class="headerlink" title="enum4linux"></a>enum4linux</h3><p>enum4linux是Kali Linux自带的一款信息收集工具。它可以收集Windows系统的大量信息，如用户名列表、主机列表、共享列表、密码策略信息、工作组和成员信息、主机信息、打印机信息等等。该工具主要是针对Windows NT/2000XP/2003，在Windows 7/10系统，部分功能受限。</p>
<p><strong>选项：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-U</span><br><span class="line">    获取用户列表</span><br><span class="line"></span><br><span class="line">-M</span><br><span class="line">    get machine list*</span><br><span class="line"></span><br><span class="line">-S</span><br><span class="line">    获取共享列表</span><br><span class="line"></span><br><span class="line">-P</span><br><span class="line">    获取密码策略信息</span><br><span class="line"></span><br><span class="line">-G</span><br><span class="line">    获取组和成员列表</span><br><span class="line"></span><br><span class="line">-d</span><br><span class="line">    详细说明，适用于-U和-S</span><br><span class="line"></span><br><span class="line">-u user</span><br><span class="line">    指定要使用的用户名（默认为“”）</span><br><span class="line"></span><br><span class="line">-p pass</span><br><span class="line">    指定要使用的密码（默认为“”）</span><br></pre></td></tr></table></figure>

<p><strong>附加选项：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a</span><br><span class="line">    执行所有简单的枚举（-U -S -G -P -r -o -n -i）。如果您未提供其他任何选项，则启用此选项。</span><br><span class="line"></span><br><span class="line">-h</span><br><span class="line">    显示帮助信息并退出</span><br><span class="line"></span><br><span class="line">-r</span><br><span class="line">    通过RID循环枚举用户</span><br><span class="line"></span><br><span class="line">-R range</span><br><span class="line">    要枚举的范围（默认值：500-550、1000-1050，暗含-r）</span><br><span class="line"></span><br><span class="line">-K n</span><br><span class="line">    继续搜索RID，直到n个连续的RID与用户名不对应为止。 Impies RID范围以999999结尾。对于DC很有用。</span><br><span class="line"></span><br><span class="line">-l</span><br><span class="line">    通过LDAP 389 / TCP获取一些（有限的）信息（仅适用于DC）</span><br><span class="line"></span><br><span class="line">-s file</span><br><span class="line">    暴力破解推测股票名称</span><br><span class="line"></span><br><span class="line">-k user</span><br><span class="line">    远程系统上存在的用户（默认：管理员，来宾，krbtgt，域管理员，root，bin，none）。用于通过“ lookupsidknown_username”获取sid。使用逗号尝试多个用户：“ -k admin， user1，user2”</span><br><span class="line"></span><br><span class="line">-o</span><br><span class="line">    获取操作系统信息</span><br><span class="line"></span><br><span class="line">-i</span><br><span class="line">    获取打印机信息</span><br><span class="line"></span><br><span class="line">-w wrkg</span><br><span class="line">    手动指定工作组（通常自动找到）</span><br><span class="line"></span><br><span class="line">-n</span><br><span class="line">    做一个nmblookup（类似于nbtstat）</span><br><span class="line"></span><br><span class="line">-v</span><br><span class="line">    详细。 显示正在运行的完整命令（net，rpcclient等）</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞扫描概述</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/4.%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="漏洞扫描的介绍"><a href="#漏洞扫描的介绍" class="headerlink" title="漏洞扫描的介绍"></a>漏洞扫描的介绍</h2><p>漏洞扫描是指基于漏洞数据库，通过扫描等手段对指定的远程或者本地计算机系统的安全脆弱性进行检测，发现可利用漏洞的一种安全检测（渗透攻击）行为。</p>
<p>漏洞扫描器是一类旨在识别操作系统和应用程序中弱点的自动化工具。</p>
<p>漏洞扫描器能够把各种安全漏洞集成在一起，自动利用这些安全漏洞对远程主机尝试攻击，从而确定目标主机是否存在这些安全漏洞。</p>
<h2 id="漏洞扫描器的使用对象"><a href="#漏洞扫描器的使用对象" class="headerlink" title="漏洞扫描器的使用对象"></a>漏洞扫描器的使用对象</h2><ul>
<li>黑客 / 渗透测试人员：自动化挖掘漏洞，利用有缺陷的代码、开放端口或是容易获取用户访问权限的程序进行渗透攻击。</li>
<li>安全运维人员：定期进行漏洞扫描并修复相应漏洞，以抵御黑客攻击，进而减少商业机密泄露与经济损失。</li>
</ul>
<h2 id="认识漏洞扫描器的局限性"><a href="#认识漏洞扫描器的局限性" class="headerlink" title="认识漏洞扫描器的局限性"></a>认识漏洞扫描器的局限性</h2><ul>
<li>只能检测出已知漏洞，无法检测出未知的漏洞（0day）</li>
<li>容易出现误报、漏检</li>
<li>在SRC漏洞挖掘中，存储型XSS不宜使用扫描器进行检测</li>
</ul>
<h2 id="漏洞评估流程"><a href="#漏洞评估流程" class="headerlink" title="漏洞评估流程"></a>漏洞评估流程</h2><h3 id="对现有设备进行定期评估"><a href="#对现有设备进行定期评估" class="headerlink" title="对现有设备进行定期评估"></a>对现有设备进行定期评估</h3><p>理想状态下，应要求每个部门都按照规范的时间表对其联网设备进行评估。</p>
<p>例如，可要求每月对下列网络和计算设备进行扫描：</p>
<ul>
<li>任何已知包含敏感数据的计算设备</li>
<li>任何必须满足特定监管要求的计算设备</li>
<li>任何作为用以构建和部署新的工作站/服务器的基本映像的文件系统映像或虚拟机模板</li>
<li>任何作用服务器或于数据存储的设备</li>
<li>任何网络基础设施设备</li>
</ul>
<p>除非另有授权，否则必须使用经批准的漏洞扫描工具进行扫描。要记住：漏洞扫描可能且必然会减慢其正在评估的网络、设备或应用程序。如果在工作时段内进行扫描，应注意尽量减少由于扫描造成的可能干扰。扫描应该在非高峰时段进行，并通过附加的二次扫描，将不合作或因关机而需要重新扫描的客户端纳入扫描。</p>
<h3 id="评估新的系统"><a href="#评估新的系统" class="headerlink" title="评估新的系统"></a>评估新的系统</h3><p>在完成漏洞评估且漏洞得到处理之前，任何新的系统都不应加入运营当中。</p>
<p>应当要求各部门在以下时机实施漏洞评估：</p>
<ul>
<li>在操作系统安装以及修补阶段完成时</li>
<li>在完成任何由供应商提供或内部开发的应用程序的安装时</li>
<li>在将信息系统投入运营之前</li>
<li>在完成用于部署于多个设备的映像或模板的设计时</li>
<li>在供应商提供信息系统交付时且用户进行验收之前，并在投入运营之前再次进行</li>
<li>对于新网络基础设备，在拷机测试阶段以及运营之前</li>
</ul>
<p>在上述每次脆弱性评估完成时，必须记录并修补所有发现的漏洞。</p>
<h3 id="理解扫描目标"><a href="#理解扫描目标" class="headerlink" title="理解扫描目标"></a>理解扫描目标</h3><p>各部门不应对不受其直接控制的系统进行侵入式扫描：</p>
<ul>
<li>各部门要求负责确保那些供应商所有的设备在可能危害企业的漏洞方面受到限制</li>
<li>供应商必须得到通知，且允许其在进行扫描时派出工作人员在场</li>
<li>未经部门和管理层的明确许可，不得允许供应商对信息系统进行扫描</li>
</ul>
<p>对那些疑似在网络上引发破坏行为的联网计算设备，应通过非侵入方式进行扫描，以追查破坏行为的源头。</p>
<h3 id="缓解风险"><a href="#缓解风险" class="headerlink" title="缓解风险"></a>缓解风险</h3><p>在每次评估结束时，各部门应编制以下内容文档：</p>
<ul>
<li>所有发现的漏洞、漏洞的严重性，以及受其影响的信息系统</li>
<li>对于每个已经发现的漏洞详细说明如何修补或消除该漏洞</li>
<li>企业漏洞扫描工具生成的报告，并应评估该报告对于编制该文档的适合性</li>
</ul>
<p>作为年度安全扫描流程的一部分，应该要求各部门将根据该文档开展的漏洞扫描与修复工作进行记录归档。</p>
<p>针对发现的漏洞，应基于一定的原则采取修复或缓解措施，例如：</p>
<ul>
<li>严重漏洞应在被发现后15天内被完全解决。</li>
<li>高危漏洞应在被发现后30天内被完全解决。</li>
<li>中危漏洞应在被发现后60天内被完全解决。</li>
<li>低危漏洞应在被发现后90天内被完全解决。</li>
</ul>
<p>当漏洞被利用的风险得到完全清除，且对设备的后续扫描显示漏洞不复存在，则可以认为漏洞已经得到修复。通常，该目标可通过对操作系统或应用系统打补丁或升级软件实现。</p>
<h2 id="可执行的扫描类型"><a href="#可执行的扫描类型" class="headerlink" title="可执行的扫描类型"></a>可执行的扫描类型</h2><ul>
<li>认证扫描：此类扫描通过对特定资质凭据进行验证来判断机器是否存在漏洞，而无需进行侵入式扫描。</li>
<li>信息系统：扫描协同运行以执行一组业务功能的软件、硬件和接口组件。</li>
<li>内部机密：扫描中具有维持特定信息仅对那些得到授权和需要了解该信息的人开放的需求。</li>
<li>侵入式扫描：通过主动执行已知的漏洞利用手段来确定漏洞存在的一种扫描方式。</li>
<li>联网计算机设备：扫描任何连接到网络用于提供访问、处理和存储信息的手段的计算设备。</li>
<li>网络基础设施设备：该类扫描针对提供信息传输功能的设备，如路由器、交换机、防护墙和桥接设备；不包括网络服务器和工作站，除非这些服务器/工作站为特定的提供网络传输的功能服务。</li>
<li>部门：扫描组织中定义的一个负责保护某个给定的信息资产的单位。</li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>端口扫描</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/2.%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<h2 id="网络端口"><a href="#网络端口" class="headerlink" title="网络端口"></a>网络端口</h2><h3 id="何为端口"><a href="#何为端口" class="headerlink" title="何为端口"></a>何为端口</h3><p>在网络技术中，端口(Port)大致有两种意思：一是物理意义上的端口，比如，ADSL Modem、集线器、交换机、路由器用于连接其他网络设备的接口，如RJ-45端口、SC端口等等；二是逻辑意义上的端口，一般是指TCP/IP协议中的端口，端口号的范围从0到65535，比如用于浏览网页服务的80端口，用于FTP服务的21端口等等。</p>
<h3 id="端口分类"><a href="#端口分类" class="headerlink" title="端口分类"></a>端口分类</h3><p>按端口号可分为3大类：</p>
<ul>
<li>公认端口（Well Known Ports）：从0到1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务的协议。例如：80端口实际上总是HTTP通讯。</li>
<li>注册端口（Registered Ports）：从1024到49151。它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些端口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。</li>
<li>动态和/或私有端口（Dynamic and/or Private Ports）：从49152到65535。理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口。但也有例外：SUN的RPC端口从32768开始。</li>
</ul>
<h3 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a>常用端口</h3><p>21端口：FTP 文件传输服务</p>
<p>22端口：SSH 远程连接服务</p>
<p>23端口：TELNET 终端仿真服务</p>
<p>3389端口：Windows远程登录服务</p>
<p>5938端口：TeamViewer 远程服务管理工具</p>
<p>139端口：NetBIOS 文件与打印共享</p>
<p>445端口：SMB 文件共享</p>
<p>25端口：SMTP 简单邮件传输协议</p>
<p>53端口：DNS 域名解析协议</p>
<p>161端口：SNMP 简单网络管理协议</p>
<p>80端口：HTTP 超文本传输协议</p>
<p>443端口：HTTPS SSL加密的超文本传输协议</p>
<p>3306端口：MYSQL数据库端口</p>
<p>5432端口：PostgreSQL数据库端口</p>
<p>1433端口：SQLServer数据库端口</p>
<p>1521端口：Oracle数据库默认端口</p>
<p>6379端口：Redis数据库端口</p>
<p>27017端口：mongoDB数据库默认端口</p>
<p>8080端口：WWW代理服务端口（Tomcat、JBoss等）</p>
<p>9200端口：Elasticsearch服务器端口</p>
<blockquote>
<p>端口大全：<a href="https://www.douban.com/note/568630865/">https://www.douban.com/note/568630865/</a></p>
</blockquote>
<h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><h3 id="Nmap的介绍"><a href="#Nmap的介绍" class="headerlink" title="Nmap的介绍"></a>Nmap的介绍</h3><p>Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)， 它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核，许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息， 管理服务升级计划，以及监视主机和服务的运行。</p>
<blockquote>
<p>nmap中文手册：<a href="http://www.nmap.com.cn/doc/manual.shtm">http://www.nmap.com.cn/doc/manual.shtm</a></p>
</blockquote>
<h3 id="Nmap的作用"><a href="#Nmap的作用" class="headerlink" title="Nmap的作用"></a>Nmap的作用</h3><ul>
<li>检测活动在网络上的主机（主机发现）</li>
<li>检测主机上的开放端口（端口发现或枚举）</li>
<li>检测到相应的端口（服务发现）的软件或版本</li>
<li>检测操作系统，硬件地址，以及软件版本</li>
<li>检测脆弱性的漏洞（Nmap的脚本）</li>
</ul>
<h3 id="Nmap扫描类型"><a href="#Nmap扫描类型" class="headerlink" title="Nmap扫描类型"></a>Nmap扫描类型</h3><p><img src="https://i.loli.net/2021/10/05/A8CljTvOgLra7bD.png" alt="4ea886c07221756bb40621a525063c45.png"></p>
<h4 id="Connect-扫描"><a href="#Connect-扫描" class="headerlink" title="Connect()扫描"></a>Connect()扫描</h4><p>此扫描试图与每一个TCP端口进行“三次握手”通信。如果能够成功建立接连，则证明端口开发，否则为关闭。准确度很高，但是最容易被防火墙和IDS检测到，并且在目标主机的日志中会记录大量的连接请求以及错误信息。</p>
<p>TCP connect端口扫描服务端与客户端建立连接成功（目标端口开放）的过程：</p>
<p>① Client端发送SYN；</p>
<p>② Server端返回SYN/ACK，表明端口开放；</p>
<p>③ Client端返回ACK，表明连接已建立；</p>
<p>④ Client端主动断开连接。</p>
<p>建立连接成功（目标端口开放）</p>
<p><img src="https://i.loli.net/2021/10/05/gFEvBsa6hcmVOou.png" alt="46a499298383fb5fd45371d3f75f7a72.png"></p>
<p><strong>TCP connect端口扫描服务端与客户端未建立连接成功（目标端口关闭）过程：</strong></p>
<p>① Client端发送SYN；</p>
<p>② Server端返回RST/ACK，表明端口未开放。</p>
<p>未建立连接成功(目标端口关闭)</p>
<p><span style="color: red;">优点</span>：<strong>实现简单</strong>，<strong>对操作者的权限没有严格要求</strong>（有些类型的端口扫描需要操作者具有root权限），系统中的任何用户都有权力使用这个调用，而且如果想要得到从目标端口返回banners信息，也只能采用这一方法。</p>
<p>另一优点是<strong>扫描速度快</strong>。如果对每个目标端口以线性的方式，使用单独的connect()调用，可以通过同时打开多个套接字，从而加速扫描。</p>
<p><span style="color: red;">缺点</span>：是<strong>会在目标主机的日志记录中留下痕迹</strong>，易被发现，<strong>并且数据包会被过滤掉</strong>。目标主机的logs文件会显示一连串的连接和连接出错的服务信息，并且能很快地使它关闭。</p>
<h4 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h4><p>扫描器向目标主机的一个端口发送请求连接的SYN包，扫描器在收到SYN/ACK后，不是发送的ACK应答而是发送RST包请求断开连接。这样，三次握手就没有完成，无法建立正常的TCP连接，因此，这次扫描就不会被记录到系统日志中。这种扫描技术一般不会在目标主机上留下扫描痕迹。但是，这种扫描需要有root权限。</p>
<p><img src="https://i.loli.net/2021/10/05/To91YVd5qQmH8DW.png" alt="8845cb20fb8c5c43b09d3d9c3ee0f07f.png"></p>
<p><strong>端口开放</strong>：1、Client发送SYN 2、Server端发送SYN/ACK 3、Client发送RST断开（只需要前两步就可以判断端口开放）</p>
<p><strong>端口关闭</strong>：1、Client发送SYN 2、Server端回复RST（表示端口关闭）</p>
<p><span style="color: red;">优点</span>：SYN扫描要比TCP Connect()扫描隐蔽一些，SYN仅仅需要发送初始的SYN数据包给目标主机，如果端口开放，则相应SYN-ACK数据包；如果关闭，则响应RST数据包</p>
<h4 id="秘密扫描"><a href="#秘密扫描" class="headerlink" title="秘密扫描"></a>秘密扫描</h4><p>秘密扫描是一种不被审计工具所检测的扫描技术。</p>
<p>它通常用于在通过普通的防火墙或路由器的筛选（filtering）时隐藏自己。</p>
<p>秘密扫描能躲避IDS、防火墙、包过滤器和日志审计，从而获取目标端口的开放或关闭的信息。由于没有包含TCP 3次握手协议的任何部分，所以无法被记录下来，比半连接扫描更为隐蔽。</p>
<p>但是这种扫描的缺点是扫描结果的不可靠性会增加，而且扫描主机也需要自己构造IP包。现有的秘密扫描有TCP FIN扫描、TCP ACK扫描、NULL扫描、XMAS扫描和SYN/ACK扫描等。</p>
<h5 id="NULL扫描"><a href="#NULL扫描" class="headerlink" title="NULL扫描"></a>NULL扫描</h5><p><strong>反向扫描</strong>—-原理是将一个没有设置任何标志位的数据包发送给TCP端口，在正常的通信中至少要设置一个标志位，根据FRC 793的要求，在端口关闭的情况下，若收到一个没有设置标志位的数据字段，那么主机应该舍弃这个分段，并发送一个RST数据包，否则不会响应发起扫描的客户端计算机。也就是说，如果TCP端口处于关闭则响应一个RST数据包，若处于开放则无相应。但是应该知道理由NULL扫描要求所有的主机都符合RFC 793规定，但是windows系统主机不遵从RFC 793标准，且只要收到没有设置任何标志位的数据包时，不管端口是处于开放还是关闭都响应一个RST数据包。但是基于Unix(如Linux)遵从RFC 793标准，所以可以用NULL扫描。 <strong>经过上面的分析，我们知道NULL可以辨别某台主机运行的操作系统是什么操作系统</strong>。</p>
<p><span style="color: red;">端口开放：Client发送Null，Server没有响应</span></p>
<p><img src="https://i.loli.net/2021/10/05/XhoJRmFParscVO8.png" alt="c8492b7911ad031cda1c2397f2591e3d.png"></p>
<p><span style="color: red;">端口关闭：1、Client发送NUll 2、Server回复RST</span></p>
<p><img src="https://i.loli.net/2021/10/05/JxNnrIhd1yYF42k.png" alt="ae2b1f1bbc0be98270853833d4dd318a.png"></p>
<p>说明：Null扫描和前面的TCP Connect（）和SYN的判断条件正好相反。在前两种扫描中，有响应数据包的表示端口开放，<strong>但在NUll扫描中，收到响应数据包表示端口关闭</strong>。反向扫描比前两种隐蔽性高些，但精确度也相对低一些。</p>
<h5 id="FIN扫描"><a href="#FIN扫描" class="headerlink" title="FIN扫描"></a>FIN扫描</h5><p>与NULL有点类似，只是FIN为指示TCP会话结束，在FIN扫描中一个设置了FIN位的数据包被发送后，若响应RST数据包，则表示端口关闭，没有响应则表示开放。此类扫描同样不能准确判断windows系统上端口开发情况。</p>
<p><span style="color: red;">端口开放：发送FIN，没有响应</span></p>
<p><span style="color: red;">端口关闭：1、发送FIN 2、回复RST</span></p>
<h5 id="ACK扫描"><a href="#ACK扫描" class="headerlink" title="ACK扫描"></a>ACK扫描</h5><p>扫描主机向目标主机发送ACK数据包。根据返回的RST数据包有两种方法可以得到端口的信息。方法一是： <strong>若返回的RST数据包的TTL值小于或等于64，则端口开放，反之端口关闭</strong>，如图所示。</p>
<p><img src="https://i.loli.net/2021/10/05/W4IxheAd3rb9QmK.png" alt="ae854a9215ed0aecad110d320c7af9f8.png"></p>
<h5 id="Xmas-Tree扫描"><a href="#Xmas-Tree扫描" class="headerlink" title="Xmas-Tree扫描"></a>Xmas-Tree扫描</h5><p>通过发送带有下列标志位的tcp数据包</p>
<p>URG：指示数据时紧急数据，应立即处理。</p>
<p>PSH：强制将数据压入缓冲区。</p>
<p>FIN：在结束TCP会话时使用。</p>
<p>正常情况下，三个标志位不能被同时设置，但在此种扫描中可以用来判断哪些端口关闭还是开放，与上面的反向扫描情况相同，依然不能判断windows平台上的端口。</p>
<p><span style="color: red;">端口开放：发送URG/PSH/FIN, 没有响应</span></p>
<p><img src="https://i.loli.net/2021/10/05/FtHk1bY2pyfhqij.png" alt="07b4dd67c6489f9380ee350fb16fdc24.png"></p>
<p><span style="color: red;">端口关闭：1、发送URG/PSH/FIN,没有响应 2、响应RST</span></p>
<p><img src="https://i.loli.net/2021/10/05/CZyuMh8E4cWk2sp.png" alt="e49245d04f2b5014427760380b287d33.png"></p>
<p>XMAS扫描原理和NULL扫描的类似，<strong>将TCP数据包中的ACK、FIN、RST、SYN、URG、PSH标志位置1后发送给目标主机。在目标端口开放的情况下，目标主机将不返回任何信息</strong>。</p>
<h4 id="Dump扫描"><a href="#Dump扫描" class="headerlink" title="Dump扫描"></a>Dump扫描</h4><p>也被称为Idle扫描或反向扫描，在扫描主机时应用了第三方僵尸计算机扫描。由僵尸主机向目标主机发送SYN包。目标主机端口开发时回应SYN|ACK，关闭时返回RST，僵尸主机对SYN|ACK回应RST，对RST不做回应。从僵尸主机上进行扫描时，进行的是一个从本地计算机到僵尸主机的、连续的ping操作。查看僵尸主机返回的Echo响应的ID字段，能确定目标主机上哪些端口是开放的还是关闭的。</p>
<p><img src="https://i.loli.net/2021/10/05/qlFyQgdEDtxIopL.png" alt="3641925bcf36c8b38ef9313c686aceb6.png"></p>
<h3 id="常用命令选项"><a href="#常用命令选项" class="headerlink" title="常用命令选项"></a>常用命令选项</h3><p><strong>执行命令</strong>：<code>nmap [扫描类型] [扫描选项]</code></p>
<ul>
<li>扫描类型</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-sT</td>
<td>TCP connect()扫描：最基本的扫描方式</td>
</tr>
<tr>
<td>-sS</td>
<td>TCP 同步扫描（TCP SYN）</td>
</tr>
<tr>
<td>-sA</td>
<td>ACK 扫描</td>
</tr>
<tr>
<td>-sN; -sF; -sX</td>
<td>TCP Null，FIN，Xmas-Tree扫描</td>
</tr>
<tr>
<td>-sI &lt;zombie host[:probeport]&gt;</td>
<td>Idle扫描</td>
</tr>
<tr>
<td>-sO</td>
<td>对远程主机所支持的IP协议进行扫描</td>
</tr>
<tr>
<td>-sU</td>
<td>使用UDP扫描</td>
</tr>
<tr>
<td>-sP</td>
<td>使用Ping扫描</td>
</tr>
<tr>
<td>-sW</td>
<td>对滑动窗口的扫描</td>
</tr>
<tr>
<td>-sM</td>
<td>TCP Maimon扫描</td>
</tr>
<tr>
<td>-b  &lt;ftp relay host&gt;</td>
<td>FTP弹跳扫描（FTP bounce scan)</td>
</tr>
<tr>
<td>–scanflags</td>
<td>定制的TCP扫描<br>例如，–scanflags URGACKPSHRSTSYNFIN设置了所有标志位</td>
</tr>
</tbody></table>
<ul>
<li>扫描选项</li>
</ul>
<table>
<thead>
<tr>
<th>通用选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-P0</td>
<td>在扫描之前，不必ping主机</td>
</tr>
<tr>
<td>-PT</td>
<td>在扫描之前使用TCP ping确定哪些主机正在运行</td>
</tr>
<tr>
<td>-PS</td>
<td>对于root用户，这个选项使用SYN包而不是ACK包来对目标主机进行扫描</td>
</tr>
<tr>
<td>-PI</td>
<td>设置这个选项，让nmap使用真正的ping（ICMP echo请求）来扫描目标主机是否正在运行</td>
</tr>
<tr>
<td>-PB</td>
<td>这是默认的ping扫描选项。它使用ACK（-PT）和ICMP（-PI）两种扫描选项并行扫描</td>
</tr>
<tr>
<td>-O</td>
<td>扫描主机的操作系统</td>
</tr>
<tr>
<td>-sV</td>
<td>打开版本探测</td>
</tr>
<tr>
<td>–allports</td>
<td>不为版本探测排除任何端口</td>
</tr>
<tr>
<td>-A</td>
<td>全面扫描</td>
</tr>
<tr>
<td>-v</td>
<td>显示扫描过程</td>
</tr>
<tr>
<td>-p &lt;IP范围&gt;</td>
<td>只扫描指定的端口</td>
</tr>
<tr>
<td>-F</td>
<td>快速 (有限的端口) 扫描</td>
</tr>
<tr>
<td>-r</td>
<td>不要按随机顺序扫描端口</td>
</tr>
<tr>
<td>-T &lt;0-5&gt;</td>
<td>设置调速模板，级别越高扫描速度越快</td>
</tr>
<tr>
<td>-S &lt;IP_Address&gt;</td>
<td>源地址欺骗</td>
</tr>
<tr>
<td>-e &lt;interface&gt;</td>
<td>使用指定的网络接口发送和接收报文</td>
</tr>
<tr>
<td>-g &lt;portnumber&gt;</td>
<td>源端口欺骗</td>
</tr>
<tr>
<td>–data-length  &lt;number&gt;</td>
<td>发送报文时 附加随机数据</td>
</tr>
<tr>
<td>–randomize-hosts</td>
<td>对目标主机的顺序随机排列</td>
</tr>
<tr>
<td>-oN &lt;filespec&gt;</td>
<td>标准输出</td>
</tr>
<tr>
<td>-oX &lt;filespec&gt;</td>
<td>XML输出</td>
</tr>
<tr>
<td>-iL &lt;inputfilename&gt;</td>
<td>从文件列表中输入</td>
</tr>
<tr>
<td>-iR &lt;hostnum&gt;</td>
<td>随机选择目标</td>
</tr>
</tbody></table>
<h3 id="Nmap扫描状态"><a href="#Nmap扫描状态" class="headerlink" title="Nmap扫描状态"></a>Nmap扫描状态</h3><ul>
<li>open ：应用程序在该端口接收 TCP连接和 UDP报文。</li>
<li>closed ：关闭的端口对于nmap也是可访问的，它接收nmap探测报文并作出响应。但没有应用程序在其上监听。</li>
<li>filtered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。</li>
<li>unfiltered ：未被过滤状态意味着端口可访问，但是 nmap无法确定它是开放还是关闭。只有用于映射防火墙规则集的 ACK扫描才会把端口分类到这个状态。</li>
<li>open | filtered ：(开放或者被过滤的)：无法确定端口是开放还是被过滤的，开放的端口不响应就是个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议，FIN，Null 等扫描会引起。</li>
<li>closed | filtered ：(关闭或者被过滤的)：无法确定端口是关闭还是被过滤的。</li>
</ul>
<h3 id="常用扫描方案"><a href="#常用扫描方案" class="headerlink" title="常用扫描方案"></a>常用扫描方案</h3><p>1、对单个主机进行全面扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A 192.168.1.2 </span><br></pre></td></tr></table></figure>

<p>2、使用SYN扫描整个网段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<p>3、扫描指定主机的指定端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -p 0-1024,3389 192.168.1.1-127</span><br></pre></td></tr></table></figure>

<p>4、随机选择100000台主机扫描是否运行Web服务器(80端口)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -v -iR 100000 -p 80</span><br></pre></td></tr></table></figure>

<h3 id="Nmap脚本"><a href="#Nmap脚本" class="headerlink" title="Nmap脚本"></a>Nmap脚本</h3><h4 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCRIPT SCAN:</span><br><span class="line">  -sC: equivalent to --script=default</span><br><span class="line">  --script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of</span><br><span class="line">           directories, script-files or script-categories</span><br><span class="line">  --script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts</span><br><span class="line">  --script-args-file=filename: provide NSE script args in a file</span><br><span class="line">  --script-trace: Show all data sent and received</span><br><span class="line">  --script-updatedb: Update the script database.</span><br><span class="line">  --script-help=&lt;Lua scripts&gt;: Show help about scripts.</span><br><span class="line">           &lt;Lua scripts&gt; is a comma-separated list of script-files or</span><br><span class="line">           script-categories.</span><br></pre></td></tr></table></figure>

<p>上面这部分是Nmap关于脚本的参数，下面一个一个来介绍：</p>
<p><strong>-sC</strong> 是指的是采用默认配置扫描，与**–script=default**参数等价</p>
<p><strong>–script=脚本名称</strong>，脚本一般都在<strong>Nmap的安装目录下的scripts目录中</strong></p>
<p>那么Linux下可以查看脚本数量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /usr/share/nmap/scripts | wc -l</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/aHpbjvRhzoMP9S8.png" alt="5dfdbf9ebad804bdae51530e4ea4322d.png"></p>
<p>那么我当前的Nmap是有<strong>602</strong>个很使用的漏洞利用、工具脚本。也可以使用下面一条命令导出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /usr/share/nmap/scripts/ | sed &#x27;s/.nse//&#x27; &gt; scripts.list</span><br></pre></td></tr></table></figure>

<p>那么所有的脚本名称都在<strong>scripts.list</strong>中了，这样做的原因是因为我们传递脚本名称的时候，不能写脚本的文件扩展名(.nse)。</p>
<p><strong>–script-args=key1=value1,key2=value2…</strong> 该参数是用来传递脚本里面的参数的，key1是参数名，该参数对应value1这个值，那么有更多的参数，使用逗号连接，后面例子中会给大家讲解。</p>
<p><strong>–script-args-file=filename</strong>，使用文件来为脚本提供参数。</p>
<p><strong>–script-trace</strong> 如果设置该参数，则所有的脚本收发请求过程。</p>
<p><strong>–script-updatedb</strong> 在Nmap的scripts目录里有一个script.db，该文件中保存了当前Nmap可用的脚本，类似于一个小型数据库，如果我们开启nmap并且调用了此参数，则nmap会自行扫描scripts目录中的扩展脚本，进行数据库更新。</p>
<p><strong>–script-help=脚本名称</strong>，调用该参数后，Nmap会输出该脚本名称对应的脚本使用参数，以及详细介绍信息。</p>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>现在我们用一个很简单的脚本，telnet爆破脚本，我们搜索一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /usr/share/nmap/scripts/ | grep telnet</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/a2wQV4umLnyc9Ai.png" alt="11dafc3bedd4c87c17c238b5b47b19d2.png"></p>
<p>那么可以看到，返回了两个nse脚本名称，那么第一个就是telnet爆破的脚本了，如果不清楚的话，可以使用上面刚介绍过的**–script-help**参数。</p>
<p><img src="https://i.loli.net/2021/10/05/JBvNi3jepwEunqC.png" alt="5e78ad47bd955b4ee396e583bdb25701.png"></p>
<p>可以看到 有一个Nmap的文档地址，正是我们现在想要使用的脚本的详细信息。</p>
<p><img src="https://i.loli.net/2021/10/05/6UN7Zns3MxywR18.png" alt="95d8e6026a3e1dd7beebdb76182d60f0.png"></p>
<p>最后那个 target指的是我们的目标地址。userdb是用户名字典，passdb是密码字典，timeout是每次连接之间的等待超时时间。</p>
<p>当然了，我们也可以直接查看脚本源文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">-- @usage</span><br><span class="line">--   nmap -p 23 --script telnet-brute --script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=8s &lt;target&gt;</span><br><span class="line">--</span><br><span class="line">-- @output</span><br><span class="line">-- 23/tcp open  telnet</span><br><span class="line">-- | telnet-brute:</span><br><span class="line">-- |   Accounts</span><br><span class="line">-- |     wkurtz:colonel</span><br><span class="line">-- |   Statistics</span><br><span class="line">-- |_    Performed 15 guesses in 19 seconds, average tps: 0</span><br><span class="line">--</span><br><span class="line">-- @args telnet-brute.timeout   Connection time-out timespec (default: &quot;5s&quot;)</span><br><span class="line">-- @args telnet-brute.autosize  Whether to automatically reduce the thread</span><br><span class="line">--                              count based on the behavior of the target</span><br><span class="line">--                              (default: &quot;true&quot;)</span><br></pre></td></tr></table></figure>

<p>上方这块，可以看到有一个例子，还有常规的扫描结果。那么加粗的这行是笔者故意为之，因为在某些情况下，<strong>管理员可能会更改telnet服务的端口</strong>（这里不只是光指Telnet），那么我们就无法使用这个脚本了。聪明的你一定想到了更改上方的<strong>23</strong>端口吧！但是这还不够灵活～ 我们可以将端口号自制成一个变量，通过我们的脚本参数传递进去。这里不再过多赘述。</p>
<p>下面我们来实战一下，先扫描一下靶机。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sT -Pn -F 192.168.123.188</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/BVxNAbZiCsk9MaQ.png" alt="d609cbcc9ba1850803475896f11b8802.png"></p>
<p>发现开启了23号端口（telnet服务）</p>
<p>我把字典放到了 <strong>/usr/share/nmap/nselib/data</strong>，因为这个目录中是专门存放Nmap默认字典的。</p>
<p>扫描命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 23 -Pn --script=telnet-brute --script-args=userdb=admins.lst,passdb=passwords.lst,telnet-brute.timeout=3s --script-trace 192.168.123.188</span><br></pre></td></tr></table></figure>

<p>在这我用**–script-trace**开启了数据的收发开关，扫描结果如下：</p>
<p><img src="https://i.loli.net/2021/10/05/Jz5rloZIT7ymU2P.png" alt="e13b32677cd0c2b986d892cba23166ed.png"></p>
<p>试试使用Telnet登录</p>
<p><img src="/:/edcd4ad56ed5407b9a12c0ce81f3bc93" alt="ed3da32313f541b436115f74b7eee8fe.png"></p>
<p>登录成功！</p>
<h4 id="脚本分类"><a href="#脚本分类" class="headerlink" title="脚本分类"></a>脚本分类</h4><p>【vuln】漏洞检测方面：<a href="https://nmap.org/nsedoc/categories/vuln.html">vuln NSE Category</a></p>
<p>【auth】权限验证方面：<a href="https://nmap.org/nsedoc/categories/auth.html">auth NSE Category</a></p>
<p>【brute】暴力破解方面：<a href="https://nmap.org/nsedoc/categories/brute.html">brute NSE Category</a></p>
<p>【discovery】服务信息发现：<a href="https://nmap.org/nsedoc/categories/discovery.html">discovery NSE Category</a></p>
<p>【dos】DOS攻击方面：<a href="https://nmap.org/nsedoc/categories/dos.html">dos NSE Category</a></p>
<p>【exploit】漏洞利用方面：<a href="https://nmap.org/nsedoc/categories/exploit.html">exploit NSE Category</a></p>
<p>【external】外部扩展方面：<a href="https://nmap.org/nsedoc/categories/external.html">external NSE Category</a> （集成了shodanAPI）</p>
<p>【fuzzer】FUZZ测试方面：<a href="https://nmap.org/nsedoc/categories/fuzzer.html">fuzzer NSE Category</a></p>
<p>【intrusive】一些针对的服务入侵模块：<a href="https://nmap.org/nsedoc/categories/intrusive.html">intrusive NSE Category</a></p>
<p>【malware】恶意后门方面：<a href="https://nmap.org/nsedoc/categories/malware.html">malware NSE Category</a></p>
<p>【version】版本识别：<a href="https://nmap.org/nsedoc/categories/version.html">version NSE Category</a></p>
<p>以上参数都可以作为**–script<strong>的通配参数，例如：</strong>–script=vuln**</p>
<p>-<strong>-script=all</strong> 调用所有脚本扫描</p>
<h3 id="Nmap流量特征修改"><a href="#Nmap流量特征修改" class="headerlink" title="Nmap流量特征修改"></a>Nmap流量特征修改</h3><p>现在主流的流量分析设备也将其流量加入了特征库，为了防止在探测阶段IP就被封掉，对其的流量特征做一些简单的修改有点用的。</p>
<h4 id="Win值修改"><a href="#Win值修改" class="headerlink" title="Win值修改"></a>Win值修改</h4><p>通过观察可以发现nmap在使用SYN扫描时Windows的窗口值值固定是1024。</p>
<p>（PS ：window 关键字用于检查特定的TCP窗口大小）</p>
<p><img src="https://i.loli.net/2021/10/05/HtRwjhkfT21Bc9G.jpg" alt="img"></p>
<p>下面是正常连接3389时，发送的数据包。可以看到win值明显不一样。</p>
<p><img src="https://pic2.zhimg.com/80/v2-656045f55b5adf42a0e495ff4ce92375_720w.jpg" alt="img"></p>
<p>修改<strong>tcpip.cc</strong>文件中tcp-&gt;th_win的值，查询TCP中win这个值的信息发现，默认最大为65535。所以应该在此范围内都可以。</p>
<p>但是要考虑已公开的规则，如之前大佬写的bypass emergingthreats这篇，这个就过滤了2048 1024 3072 4096。</p>
<p><img src="https://pic2.zhimg.com/80/v2-344d90cda7c57744b3e019efb7a5c819_720w.jpg" alt="img"></p>
<h4 id="关键词修改"><a href="#关键词修改" class="headerlink" title="关键词修改"></a>关键词修改</h4><p>根据规则，一个一个去修改文件即可。</p>
<p>nmap，nm，nm@p，OR sqlspider等等，主要的就是SIP文件和一些常用的脚本文件。</p>
<p>这些个就是从emergingthreats的规则中提取的。</p>
<p><img src="https://i.loli.net/2021/10/05/iTr1c9Xm53FfMtz.jpg" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/tmnU5A21pFgPS4X.jpg" alt="img"></p>
<h4 id="UDP探测时填充值修改"><a href="#UDP探测时填充值修改" class="headerlink" title="UDP探测时填充值修改"></a>UDP探测时填充值修改</h4><p>修改<strong>osscan2.cc</strong></p>
<p>也可通过-O参数修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static u8 patternbyte = 0x43; /* character &#x27;C&#x27; */ 替换为 static u8 patternbyte = 0x46; /* character &#x27;F&#x27; */</span><br></pre></td></tr></table></figure>

<p>重新编译后再去扫描，内容已经换了，长度应该也是可以调整。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u8 packet[328]; /* 20 IP hdr + 8 UDP hdr + 300 data */</span><br></pre></td></tr></table></figure>

<p>这里还没测试，感兴趣可以自己去定义，看会不会有什么问题。</p>
<p><img src="https://i.loli.net/2021/10/05/YBiyZ3a4zIRpVtX.jpg" alt="img"></p>
<h4 id="修改脚本中的值"><a href="#修改脚本中的值" class="headerlink" title="修改脚本中的值"></a>修改脚本中的值</h4><ul>
<li>nselib/http.lua</li>
</ul>
<p>USER<em>AGENT = stdnse.get</em>script_args(‘http.useragent’)</p>
<ul>
<li>nselib/mssql.lua</li>
</ul>
<p>搜索Nmap NSE然后替换</p>
<ul>
<li>nselib/sip.lua</li>
</ul>
<p>搜索Nmap NSE然后替换</p>
<ul>
<li>scripts/http-sql-injection.nse</li>
</ul>
<p>搜索sqlspider然后替换</p>
<ul>
<li>scripts/ssl-heartbleed.nse</li>
</ul>
<p>搜索Nmap ssl-heartbleed替换</p>
<ul>
<li>nselib/rdp.lua</li>
</ul>
<p>local cookie = “mstshash=nmap”</p>
<h3 id="Nmap衍生"><a href="#Nmap衍生" class="headerlink" title="Nmap衍生"></a>Nmap衍生</h3><h4 id="Zenmap"><a href="#Zenmap" class="headerlink" title="Zenmap"></a>Zenmap</h4><p><strong>Zenmap是Nmap的官方GUI(图形界面)版本</strong>。</p>
<p><img src="https://i.loli.net/2021/10/05/Ku1R2VbmSD6f9gE.png" alt="img"></p>
<h4 id="DNmap"><a href="#DNmap" class="headerlink" title="DNmap"></a>DNmap</h4><p>dnmap是使用客户端/服务器体系结构的分布式nmap框架。 服务器从文件中读取命令，并将其发送给每个客户端。 客户端执行nmap命令并将结果发送回去。</p>
<p>下载地址：<a href="https://sourceforge.net/projects/dnmap/">https://sourceforge.net/projects/dnmap/</a></p>
<p>有关DNmap的使用可以参考：<a href="https://www.bilibili.com/read/cv5791617/">https://www.bilibili.com/read/cv5791617/</a></p>
<p><img src="https://i.loli.net/2021/10/05/JQCfYZrFNulcaV5.jpg" alt="dnmap_architecture_2"></p>
<h2 id="MasScan"><a href="#MasScan" class="headerlink" title="MasScan"></a>MasScan</h2><h3 id="MasScan的介绍"><a href="#MasScan的介绍" class="headerlink" title="MasScan的介绍"></a>MasScan的介绍</h3><p>Masscan 作为一个端口扫描工具，具备优秀的性能，能够在短时间内对大量的IP和端口进行是否开放的扫描，使用简单，相比于NMAP等工具来说更容易上手，是网络安全领域的优秀工具。Masscan使用C语言编写，核心部分使用C90编写，包含了大量TCP协议相关，以及操作系统相关的底层代码，代码注释完善，十分详尽，结构清晰，是十分值得学习的C语言网络项目。</p>
<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p &lt;ports,–ports &lt;ports&gt;&gt; 		指定端口进行扫描</span><br><span class="line">-–banners 				获取banner信息，支持少量的协议</span><br><span class="line">-–rate &lt;packets-per-second&gt; 		指定发包的速率</span><br><span class="line">-c &lt;filename&gt;, --conf &lt;filename&gt; 	读取配置文件进行扫描</span><br><span class="line">–-echo 				将当前的配置重定向到一个配置文件中，可以将文件与-c选项一起使用。</span><br><span class="line">-e &lt;ifname&gt; , --adapter &lt;ifname&gt; 	指定用来发包的网卡接口名称</span><br><span class="line">–-adapter-ip &lt;ip-address&gt; 		指定发包的IP地址</span><br><span class="line">–-adapter-port &lt;port&gt; 			指定发包的源端口</span><br><span class="line">–-adapter-mac &lt;mac-address&gt; 		指定发包的源MAC地址</span><br><span class="line">–-router-mac &lt;mac address&gt; 		指定网关的MAC地址</span><br><span class="line">–-exclude &lt;ip/range&gt; 			IP地址范围黑名单，防止masscan扫描</span><br><span class="line">–-excludefile &lt;filename&gt; 		指定IP地址范围黑名单文件</span><br><span class="line">–-includefile，-iL &lt;filename&gt; 		读取一个范围列表进行扫描</span><br><span class="line">–-ping 				扫描应该包含ICMP回应请求</span><br><span class="line">–-append-output 			以附加的形式输出到文件</span><br><span class="line">-–iflist 				列出可用的网络接口，然后退出</span><br><span class="line">–-retries 				发送重试的次数，以1秒为间隔</span><br><span class="line">-–nmap 				打印与nmap兼容的相关信息</span><br><span class="line">-–http-user-agent &lt;user-agent&gt; 	设置user-agent字段的值</span><br><span class="line">-–show [open,close] 			告诉要显示的端口状态，默认是显示开放端口</span><br><span class="line">-–noshow [open,close] 			禁用端口状态显示</span><br><span class="line">-–pcap &lt;filename&gt; 			将接收到的数据包以libpcap格式存储</span><br><span class="line">-–regress 				运行回归测试，测试扫描器是否正常运行</span><br><span class="line">-–ttl &lt;num&gt; 				指定传出数据包的TTL值，默认为255</span><br><span class="line">-–wait &lt;seconds&gt; 			指定发送完包之后的等待时间，默认为10秒</span><br><span class="line">-–offline 				没有实际的发包，主要用来测试开销</span><br><span class="line">-sL 					不执行扫描，主要是生成一个随机地址列表</span><br><span class="line">–readscan &lt;binary-files&gt; 		读取从-oB生成的二进制文件，可以转化为XML或者JSON格式</span><br><span class="line">–connection-timeout &lt;secs&gt; 		抓取banners时指定保持TCP连接的最大秒数，默认是30秒</span><br><span class="line">-oX &lt;filename&gt;				输出到filename的XML。</span><br><span class="line">-oG &lt;filename&gt;				输出到filename在的grepable格式。</span><br><span class="line">-oJ &lt;filename&gt;				输出到filename在JSON格式。</span><br></pre></td></tr></table></figure>

<h3 id="常用扫描方案-1"><a href="#常用扫描方案-1" class="headerlink" title="常用扫描方案"></a>常用扫描方案</h3><ul>
<li>简单使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan 192.168.123.0/24 -p445</span><br></pre></td></tr></table></figure>

<ul>
<li>单ip多端口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan 192.168.123.188 -p1-1024,8080,3306</span><br></pre></td></tr></table></figure>

<ul>
<li>多ip单端口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan 192.168.123.1-192.168.123.100,192.168.123.188 -p80</span><br></pre></td></tr></table></figure>

<ul>
<li>快速扫描</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan 192.168.123.0/24 -p1-1024 --rate 10000</span><br></pre></td></tr></table></figure>

<ul>
<li>把当前命令的配置保存下来，然后在其他masscan命令直接引用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan 192.168.123.188 -p80,8080 --echo &gt; scan.conf</span><br><span class="line">masscan -c scan.conf --rate 1000</span><br></pre></td></tr></table></figure>

<ul>
<li>将扫描结果导出到XML文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan 192.168.123.188 -p0-65535 -oX scan.xml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>Web漏洞扫描器</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/5.Web%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h2><p>BurpSuite是用于攻击 web应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。</p>
<h3 id="Dashboard模块"><a href="#Dashboard模块" class="headerlink" title="Dashboard模块"></a>Dashboard模块</h3><h4 id="新建扫描"><a href="#新建扫描" class="headerlink" title="新建扫描"></a>新建扫描</h4><p>BurpSuite2021 启用了Dashboard，我们可以直接建立而不用从浏览器打开目标网站。</p>
<p><img src="https://i.loli.net/2021/10/05/cSGxqp6AC2YPsXE.png" alt="在这里插入图片描述"> <img src="https://i.loli.net/2021/10/05/CZ6UtyKg7Wj5n3f.png" alt="在这里插入图片描述"></p>
<p>默认情况下是不用设置其他的参数的。</p>
<h4 id="新建实时任务"><a href="#新建实时任务" class="headerlink" title="新建实时任务"></a>新建实时任务</h4><p>实时任务，就是每时每刻都在运行的任务，会实时接收burpsuite的数据进行处理，当然这是可以设定特定的数据进入该任务进行处理的。</p>
<p><img src="https://i.loli.net/2021/10/05/vDnUHAz9EIC57rV.png" alt="在这里插入图片描述"> <img src="https://i.loli.net/2021/10/05/oimwBcxXz9KQNbH.png" alt="在这里插入图片描述"><img src="https://i.loli.net/2021/10/05/gdrRMsYCfNU1ual.png" alt="在这里插入图片描述"></p>
<p>其他的根据情况微调。</p>
<h3 id="Proxy模块"><a href="#Proxy模块" class="headerlink" title="Proxy模块"></a>Proxy模块</h3><p>Burp Proxy 是Burp Suite以用户驱动测试流程功能的核心，通过代理模式，可以让我们拦截、查看、修改所有在客户端和服务端之间传输的数据。</p>
<h4 id="Proxy基本使用"><a href="#Proxy基本使用" class="headerlink" title="Proxy基本使用"></a>Proxy基本使用</h4><p>Burp Proxy的使用是一个循序渐进的过程，刚开始使用时，可能并不能很快就获取你所期望的结果，慢慢地当你熟悉了它的功能和使用方法，你就可以用它很好地对一个产品系统做安全能力评估。 一般使用Burp Proxy时，大体涉及环节如下：</p>
<ol>
<li> 首先，确认JRE已经安装好，Burp Suite可以启动并正常运行，且已经完成浏览器的代理服务器配置。</li>
<li> 打开Proxy功能中的Intercept选项卡，确认拦截功能为“Interception is on”状态，如果显示为“Intercept is off”则点击它，打开拦截功能。</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/9iOq72V6ITontGJ.png" alt="img"></p>
<ol start="3">
<li>打开浏览器，输入你需要访问的URL（以<a href="http://baike.baidu.com/%E4%B8%BA%E4%BE%8B%EF%BC%89%E5%B9%B6%E5%9B%9E%E8%BD%A6%EF%BC%8C%E8%BF%99%E6%97%B6%E4%BD%A0%E5%B0%86%E4%BC%9A%E7%9C%8B%E5%88%B0%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8F%E7%BB%8F%E8%BF%87Burp">http://baike.baidu.com/为例）并回车，这时你将会看到数据流量经过Burp</a> Proxy并暂停，直到你点击【Forward】，才会继续传输下去。如果你点击了【Drop】，则这次通过的数据将会被丢失，不再继续处理。</li>
<li>当Burp Suite拦截的客户端和服务器交互之后，我们可以在Burp Suite的消息分析选项卡中查看这次请求的实体内容、消息头、请求参数等信息。消息分析选项视图主要包括以下两项：</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/SDptf9LyPGimX3z.png" alt="image.png"></p>
<ol start="5">
<li>Raw 这是视图主要显示web请求的raw格式，包含请求地址、http协议版本、主机头、浏览器信息、Accept可接受的内容类型、字符集、编码方式、cookie等。你可以通过手工修改这些信息，对服务器端进行渗透测试。</li>
<li>Hex 这个视图显示Raw的二进制内容，你可以通过hex编辑器对请求的内容进行修改。</li>
</ol>
<p>默认情况下，Burp Proxy只拦截请求的消息，普通文件请求如css、js、图片是不会被拦截的，你可以修改默认的拦截选项来拦截这些静态文件，当然，你也可以通过修改拦截的作用域、参数或者服务器端返回的关键字来控制Burp Proxy的消息拦截，这些在后面的章节中我们会进一步的学习。 所有流经Burp Proxy的消息，都会在http history记录下来，我们可以通过历史选项卡，查看传输的数据内容，对交互的数据进行测试和验证。同时，对于拦截到的消息和历史消息，都可以通过右击弹出菜单，发送到Burp的其他组件，如Spider、Scanner、Repeater、Intruder、Sequencer、Decoder、Comparer、Extender，进行进一步的测试。如下图所示： <img src="https://i.loli.net/2021/10/05/ZxsOl7a8wuH6zvM.png" alt="img"></p>
<h4 id="BurpSuite2021新特色"><a href="#BurpSuite2021新特色" class="headerlink" title="BurpSuite2021新特色"></a>BurpSuite2021新特色</h4><p>程序新增内置浏览器，可以不用设置浏览器代理，直接从Proxy选项卡下的“Open Browser”就可以使用内置的浏览器就行访问目标，而Burp suite则会默认开始拦截，而且相对于旧版的Burpsuite是直接可以拦截https的网站的。</p>
<h4 id="数据拦截与控制"><a href="#数据拦截与控制" class="headerlink" title="数据拦截与控制"></a>数据拦截与控制</h4><p>Burp Proxy的拦截功能主要由Intercept选项卡中的Forward、Drop、Interception is on/off、Action、Comment 以及Highlight构成，它们的功能分别是：</p>
<ul>
<li>Forward的功能是当你查看过消息或者重新编辑过消息之后，点击此按钮，将发送消息至服务器端。</li>
<li>Drop的功能是你想丢失当前拦截的消息，不再forward到服务器端。</li>
<li>Interception is on表示拦截功能打开，拦截所有通过Burp Proxy的请求数据；</li>
<li>Interception is off表示拦截功能关闭，不再拦截通过Burp Proxy的所有请求数据。</li>
<li>Action的功能是除了将当前请求的消息传递到Spider、Scanner、Repeater、Intruder、Sequencer、Decoder、Comparer组件外，还可以做一些请求消息的修改，如改变GET或者POST请求方式、改变请求body的编码，同时也可以改变请求消息的拦截设置，如不再拦截此主机的消息、不再拦截此IP地址的消息、不再拦截此种文件类型的消息、不再拦截此目录的消息，也可以指定针对此消息拦截它的服务器端返回消息。</li>
</ul>
<p>能是指对拦截的消息添加备注，在一次渗透测试中，你通常会遇到一连串的请求消息，为了便于区分，在某个关键的请求消息上，你可以添加备注信息。 <img src="https://i.loli.net/2021/10/05/hmz9BOkgiZXuofy.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/uUEGIoqWkVmTsFx.png" alt="img"></p>
<p>除了Intercept中可以对通过Proxy的消息进行控制外，在可选项设置选项卡Options中也有很多的功能设置也可以对流经的消息进行控制和处理。</p>
<h4 id="客户端请求消息拦截"><a href="#客户端请求消息拦截" class="headerlink" title="客户端请求消息拦截"></a>客户端请求消息拦截</h4><p>客户端请求消息拦截是指拦截客户端发送到服务器端消息的相关配置选项，其界面如下：</p>
<p><img src="https://i.loli.net/2021/10/05/vXVnpGUg4TdoZN5.png" alt="image.png"></p>
<p>主要包含拦截规则配置、错误消息自动修复、自动更新Content-Length消息头三个部分。</p>
<p>如果intercept request based on the follow rules的checkbox被选中，则拦截所有符合勾选按钮下方列表中的请求规则的消息都将被拦截，拦截时，对规则的过滤是自上而下进行的。当然，我们可以根据自己的需求，通过【Up】和【Down】按钮，调节规则所在位置和排序。同时，我们可以点击【Add】添加一条规则，也可以选中一条规则，通过点击【Edit】进行编辑、点击【Remove】进行删除。当我们点击【Add】按钮时，会弹出规则添加的输入对话框，如下图：</p>
<p><img src="https://i.loli.net/2021/10/05/roMcvHOkbh4mGZ9.png" alt="img"></p>
<ol>
<li> 拦截规则添加时，共包含4个输入项。Boolean opertor表示当前的规则与其他规则是与的方式（And）还是或的方式（Or）共存；Match type表示匹配类型，此处匹配类型可以基于域名、IP地址、协议、请求方法、URL、文件类型、参数, cookies, 头部或者内容, 状态码, MIME类型, HTML页面的title等。Match relationship表示此条规则是匹配还是不匹配Match condition输入的关键字。当我们输入这些信息，点击【OK】按钮，则规则即被保存。=</li>
<li> 如果Automatically fix missing的checkbox被选中，则表示在一次消息传输中，Burp Suite会自动修复丢失或多余的新行。比如说，一条被修改过的请求消息，如果丢失了头部结束的空行，Burp Suite会自动添加上；如果一次请求的消息体中，URl编码参数中包含任何新的换行，Burp Suite将会移除。此项功能在手工修改请求消息时，为了防止错误，有很好的保护效果。</li>
<li> 如果Automatically update Content-Length的checkbox被选中，则当请求的消息被修改后，Content-Length消息头部也会自动被修改，替换为与之相对应的值。</li>
</ol>
<h4 id="服务器端返回消息拦截"><a href="#服务器端返回消息拦截" class="headerlink" title="服务器端返回消息拦截"></a>服务器端返回消息拦截</h4><p>服务器端返回消息拦截顾名思义是指拦截服务器端返回的消息的相关配置项，其界面如下：</p>
<p><img src="https://i.loli.net/2021/10/05/ayvRBstEuYQx8oq.png" alt="img"></p>
<h4 id="服务器返回消息修改"><a href="#服务器返回消息修改" class="headerlink" title="服务器返回消息修改"></a>服务器返回消息修改</h4><p><img src="https://i.loli.net/2021/10/05/ygtSWZnpjc8JAX1.png" alt="image.png"></p>
<p>自上而下，每一个选择项分别对应的功能是</p>
<ul>
<li>显示form表单中隐藏字段</li>
<li>高亮显示form表单中隐藏字段</li>
<li>使form表单中的disable字段生效，变成可输入域</li>
<li>移除输入域长度限制</li>
<li>移动JavaScript验证</li>
<li>移动所有的JavaScript</li>
<li>移除标签</li>
<li>转换https超链接为http链接</li>
<li>移除所有cookie中的安全标志</li>
</ul>
<p>通过服务器返回消息修改可选择项的设置，可以方便渗透测试人员在安全评估过程中突破原有的数据限制，更好、更快地检测服务器端的安全性，但实际上用到的不多。</p>
<h4 id="匹配替换"><a href="#匹配替换" class="headerlink" title="匹配替换"></a>匹配替换</h4><p>此项配置主要用来自动替换请求消息和服务器端返回消息中的某些值和文本，它与前文的规则的不同之处还在于支持正则表达式语言。</p>
<p><img src="https://i.loli.net/2021/10/05/nsrzJ6l7EXmgDyF.png" alt="img"></p>
<p>针对的是所有请求包，可以把特定字符替换成其他的字符。</p>
<p>当点击【Add】按钮时，在弹出的匹配或替换规则输入对话框中我们可以看到，它可以对请求和返回消息的消息头，消息体、请求参数名、请求参数值、请求的第一行进行匹配和替换。例如，当我们要替换所有返回消息中的邮箱地址为<a href="mailto:&#x74;&#x30;&#x64;&#97;&#116;&#97;&#x40;&#98;&#x75;&#x72;&#x70;&#115;&#117;&#105;&#x74;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#x30;&#x64;&#97;&#116;&#97;&#x40;&#98;&#x75;&#x72;&#x70;&#115;&#117;&#105;&#x74;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>时，可以参考下图的设置填写输入项并保存验证。</p>
<p><img src="https://i.loli.net/2021/10/05/GxIFETiBWMAU4yv.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/bsuBRLTwGeNMKAo.png" alt="img"></p>
<p>支持正则表达式匹配！！！</p>
<h4 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h4><p>其他配置项主要是杂项设置。其界面如下：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/02fd2597299af5a0787e371178c9a732.png" alt="img"></p>
<p>自上而下依次的功能是</p>
<ul>
<li>指定使用HTTP/1.0协议与服务器进行通信 这项设置用于强制客户端采用HTTP/1.0协议与服务器进行通信，一般客户端使用的HTTP协议版本依赖于客户端浏览器，但某些服务器或者应用，必须使用HTTP/1.0协议，此时可勾选此项</li>
<li>指定使用HTTP/1.0协议反馈消息给客户端 目前所有的浏览器均支持HTTP/1.0协议和HTTP/1.1协议，强制指定HTTP/1.0协议主要用于显示浏览器的某些方面的特征，比如，阻止HTTP管道攻击。</li>
<li>设置返回消息头中的“Connection：close” 可用于某些情况下的阻止HTTP管道攻击。</li>
<li>请求消息头中脱掉Proxy-* 浏览器请求消息中，通常会携带代理服务器的相关信息，此选项主要用于清除消息头中的代理服务器信息。</li>
<li>解压请求消息中的压缩文件 某些应用在与服务器端进行交互时，会压缩消息体，勾选此选项，则Burp Suite 会自动解压消息体</li>
<li>解压返回消息中的压缩文件 大多数浏览器支持压缩的消息体，勾选此选项，则Burp Suite 会自动解压被服务器端压缩的消息体</li>
<li>禁用<a href="http://burp/">http://burp</a></li>
<li>允许通过DNS和主机名访问web接口 即允许通过域名或主机名访问Burp Suite</li>
<li>不在浏览器中显示Burp Suite错误 在我们使用Burp Suite时，如果发生了Burp Suite自身的错误，会在浏览器中显示，如果勾选了此项，则不会在浏览器中显示此类错误。</li>
<li>禁用日志到历史和网站地图中 此选项的作用是阻止记录日志到历史和网站地图，在某些情况下可能有用，比如说，通过上游服务器进行认证或者做正则表达式替换时，为了降低内存的消耗，减少日志的储存，你可以勾选此项。</li>
<li>拦截功能开始设置 这个选项主要用来配置intercept功能的生效方式，分为总是生效、 总是失效 、从上一次的Burp Suite中恢复设置3种方式。</li>
</ul>
<h4 id="历史记录History"><a href="#历史记录History" class="headerlink" title="历史记录History"></a>历史记录History</h4><p>Burp Proxy的历史记录由HTTP历史和WebSockets历史两个部分组成。</p>
<p>HTTP历史界面由筛选过滤器、历史记录列表、消息详情3个部分组成。</p>
<p><img src="https://i.loli.net/2021/10/05/JAlzktEWv4hXyxK.png" alt="img"></p>
<p>当我们在做产品系统的安全评估过程中，会在HTTP历史中保存了大量的日志记录，为了更友好的消息管理，Burp提供了筛选过滤器功能。当我们点击HTTP历史标签下发的Filter时，将弹出筛选过滤器界面。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/369f18129e2b54f61f7a672c8e767883.png" alt="img"></p>
<ul>
<li>按照过滤条件的不同，筛选过滤器划分出7个子板块，分别是</li>
<li>按照请求类型过滤 你可以选择仅显示当前作用域的、仅显示有服务器端响应的和仅显示带有请求参数的消息。当你勾选“仅显示当前作用域”时，此作用域需要在Burp Target的Scope选项中进行配置，详细请阅读Burp Target相关章节。</li>
<li>按照MIME类型过滤 你可以控制是否显示服务器端返回的不同的文件类型的消息，比如只显示HTML、css或者图片。此过滤器目前支持HTML、Script、XML、CSS、其他文本、图片、Flash、二进制文件 8种形式。</li>
<li>按照服务器返回的HTTP状态码过滤 Burp根据服务器的状态码，按照2XX,3XX,4XX,5XX分别进行过滤。比如，如果你只想显示返回状态码为200的请求成功消息，则勾选2XX。</li>
<li>按照查找条件过滤 此过滤器是针对服务器端返回的消息内容，与输入的关键字进行匹配，具体的匹配方式，你可以选择 1.正则表达式 2.大小写敏感 3.否定查找 3种方式的任何组合，前面两种匹配方式容易理解，第3种匹配方式是指与关键字匹配上的将不再显示。</li>
<li>按照文件类型过滤 通过文件类型在过滤消息列表，这里有两个选择可供操作。一是仅仅显示哪些，另一个是不显示哪些。如果是仅仅显示哪些，在show only的输入框中填写显示的文件类型，同样，如果不显示哪些文件类型，只要在hide的输入框中填写不需要显示的文件类型即可。</li>
<li>按照注解过滤 此过滤器的功能是指，根据每一个消息拦截时候的备注或者是否高亮来作为筛选条件控制哪些消息在历史列表中显示。</li>
<li>按照监听端口过滤 此过滤器通常使用于当我们在Proxy Listeners中多个监听端口时，仅仅显示某个监听端口通信的消息，一般情况下，我们很少用到。</li>
</ul>
<p>现在，我们再看看WebSockets历史选项的功能，从界面上我们可以看出，WebSockets历史所提供的功能和选项是HTTP历史的一个子集，只是因为采用的通信方式的不同，而被独立出来成为一个专门的视图。其功能的使用方式与HTTP历史雷同，此处就不在赘述。</p>
<h3 id="Target模块"><a href="#Target模块" class="headerlink" title="Target模块"></a>Target模块</h3><p>Burp Target 组件主要包含站点地图、目标域、Target 工具三部分组成，他们帮助渗透测试人员更好地了解目标应用的整体状况、当前的工作涉及哪些目标域、分析可能存在的攻击面等信息，下面我们就分别来看看Burp Target的三个组成部分。</p>
<h4 id="目标域设置-Target-Scope"><a href="#目标域设置-Target-Scope" class="headerlink" title="目标域设置 Target Scope"></a>目标域设置 Target Scope</h4><p>Target Scope中作用域的定义比较宽泛，通常来说，当我们对某个产品进行渗透测试时，可以通过域名或者主机名去限制拦截内容，这里域名或主机名就是我们说的作用域；如果我们想限制得更为细粒度化，比如，你只想拦截login目录下的所有请求，这时我们也可以在此设置，此时，作用域就是目录。总体来说，Target Scope主要使用于下面几种场景中：</p>
<ul>
<li>限制站点地图和Proxy 历史中的显示结果</li>
<li>告诉Burp Proxy 拦截哪些请求</li>
<li>Burp Spider抓取哪些内容</li>
<li>Burp Scanner自动扫描哪些作用域的安全漏洞</li>
<li>在Burp Intruder和Burp Repeater 中指定URL</li>
</ul>
<p>通过Target Scope 我们能方便地控制Burp 的拦截范围、操作对象，减少无效的噪音。在Target Scope的设置中，主要包含两部分功能：允许规则和去除规则。</p>
<p><img src="https://i.loli.net/2021/10/05/O6heAwENfSgBptF.png" alt="img"></p>
<p>其中允许规则顾名思义，即包含在此规则列表中的，视为操作允许、有效。如果此规则用于拦截，则请求消息匹配包含规则列表中的将会被拦截；反之，请求消息匹配去除列表中的将不会被拦截。</p>
<p><img src="https://i.loli.net/2021/10/05/w49agqpOvFi81nG.png" alt="img"></p>
<p>如果想要设置其他的协议或端口等设置，可点</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/700c8ead11de0be4aced10dd88bf9ef8.png" alt="img"></p>
<p>当我们设置了Target Scope （默认全部为允许），使用Burp Proxy进行代理拦截，在渗透测试中通过浏览器代理浏览应用时，Burp会自动将浏览信息记录下来，包含每一个请求和应答的详细信息，保存在Target站点地图中。</p>
<h4 id="站点地图-Site-Map"><a href="#站点地图-Site-Map" class="headerlink" title="站点地图 Site Map"></a>站点地图 Site Map</h4><p>下图所示站点地图为一次渗透测试中，通过浏览器浏览的历史记录在站点地图中的展现结果。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f0dd2f82e923e0aa1b849c51ca992287.png" alt="img"></p>
<p>从图中我们可以看出，Site Map的左边为访问的URL，按照网站的层级和深度，树形展示整个应用系统的结构和关联其他域的url情况；右边显示的是某一个url被访问的明细列表，共访问哪些url，请求和应答内容分别是什么，都有着详实的记录。 基于左边的树形结构，我们可以选择某个分支，对指定的路径进行扫描和抓取。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b7a42a1c433e3171e6d321ce28047891.png" alt="img"></p>
<h3 id="Repeater模块"><a href="#Repeater模块" class="headerlink" title="Repeater模块"></a>Repeater模块</h3><p>Burp Repeater作为Burp Suite中一款手工验证HTTP消息的测试工具，通常用于多次重放请求响应和手工修改请求消息的修改后对服务器端响应的消息分析。</p>
<h4 id="Repeater的使用"><a href="#Repeater的使用" class="headerlink" title="Repeater的使用"></a>Repeater的使用</h4><p>在渗透测试过程中，我们经常使用Repeater来进行请求与响应的消息验证分析，比如修改请求参数，验证输入的漏洞；修改请求参数，验证逻辑越权；从拦截历史记录中，捕获特征性的请求消息进行请求重放。Burp Repeater的操作界面如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bf5e6c9c3a7638df3b8d016d7c23cede.png" alt="img"></p>
<p>请求消息区为客户端发送的请求消息的详细信息，Burp Repeater为每一个请求都做了请求编号，当我们在请求编码的数字上双击之后，可以修改请求的名字，这是为了方便多个请求消息时，做备注或区分用的。在编号的下方，有一个【Send】按钮，当我们对请求的消息编辑完之后，点击此按钮即发送请求给服务器端。服务器的请求域可以在target处进行修改，如上图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/05e87a80abd3e5e3f677b085aab3b1a8.png" alt="img"></p>
<p>应答消息区为对应的请求消息点击【Send】按钮后，服务器端的反馈消息。通过修改请求消息的参数来比对分析每次应答消息之间的差异，能更好的帮助我们分析系统可能存在的漏洞。</p>
<p>在我们使用Burp Repeater时，通常会结合Burp的其他工具一起使用，比如Proxy的历史记录，Scanner的扫描记录、Target的站点地图等，通过其他工具上的右击菜单，执行【Send to Repeater】，跳转到Repeater选项卡中，然后才是对请求消息的修改以及请求重放、数据分析与漏洞验证。</p>
<h3 id="Intruder模块"><a href="#Intruder模块" class="headerlink" title="Intruder模块"></a>Intruder模块</h3><p>Burp Intruder作为BurpSuite中一款功能极其强大的自动化测试工具，通常被系统安全渗透测试人员被使用在各种任务测试的场景中。</p>
<h4 id="Intruder使用场景和操作步骤"><a href="#Intruder使用场景和操作步骤" class="headerlink" title="Intruder使用场景和操作步骤"></a>Intruder使用场景和操作步骤</h4><p>在渗透测试过程中，我们经常使用Burp Intruder，它的工作原理是：Intruder在原始请求数据的基础上，通过修改各种请求参数，以获取不同的请求应答。每一次请求中，Intruder通常会携带一个或多个有效攻击载荷（Payload),在不同的位置进行攻击重放，通过应答数据的比对分析来获得需要的特征数据。Burp Intruder通常被使用在以下场景：</p>
<ul>
<li>标识符枚举 Web应用程序经常使用标识符来引用用户、账户、资产等数据信息。例如，用户名，文件ID和账户号码。</li>
<li>提取有用的数据 在某些场景下，而不是简单地识别有效标识符，你需要通过简单标识符提取一些其他的数据。比如说，你想通过用户的个人空间id，获取所有用户在个人空间标准的昵称和年龄。</li>
<li>模糊测试 很多输入型的漏洞，如SQL注入，跨站点脚本和文件路径遍历可以通过请求参数提交各种测试字符串，并分析错误消息和其他异常情况，来对应用程序进行检测。由于的应用程序的大小和复杂性，手动执行这个测试是一个耗时且繁琐的过程。这样的场景，您可以设置Payload，通过Burp Intruder自动化地对Web应用程序进行模糊测试。</li>
</ul>
<p>通常来说，使用Burp Intruder进行测试，主要遵循以下步骤：</p>
<ol>
<li> 确认Burp Suite安装正确并正常启动，且完成了浏览器的代理设置。</li>
<li> 进入Burp Proxy选项卡，关闭代理拦截功能。</li>
<li> 进行历史日志（History）子选项卡，查找可能存在问题的请求日志，并通过右击菜单，发送到Intruder。</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/dnKRwxF731cL6GH.png" alt="img"></p>
<ol start="4">
<li> 进行Intruder 选项卡，打开Target和Positions子选项卡。这时，你会看到上一步发送过来的请求消息。</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/xrgs8Y7wjEbpVOe.png" alt="image.png"></p>
<ol start="5">
<li>因为我们了解到Burp Intruder攻击的基础是围绕刚刚发送过来的原始请求信息，在原始信息指定的位置上设置一定数量的攻击载荷Payload，通过Payload来发送请求获取应答消息。默认情况下，Burp Intruder会对请求参数和Cookie参数设置成Payload position，前缀添加§符号 ， 如上图红色标注位置所示。 当发送请求时，会将标识的参数替换为Payload。<blockquote>
<p>Attack type选项：</p>
<ul>
<li>Sinper（狙击手）：对变量依次进行破解。多个标记依次进行。适合爆破已知用户名但密码未知的情况。</li>
<li>Battering ram（攻城锤）：对变量同时进行破解，多个目标同时进行。适合爆破用户名与密码一致的情况。</li>
<li>PitchFork（鱼叉）：每一个变量标记对应一个字典，取每个字典的对应项。适合使用代理IP池的情况。</li>
<li>Cluster boom（集束炸弹）：每一个变量对应一个字典，并且进行交叉破解，尝试各种组合。适用于爆破用户名+密码的情况。</li>
</ul>
</blockquote>
</li>
<li>在Position界面的右边，有【Add §】、【Clear §】、【Auto §】、【Refersh §】四个按钮，是用来控制请求消息中的参数在发送过程中是否被Payload替换，如果不想被替换，则选择此参数，点击【Clear】，即将参数前缀去掉。</li>
<li>当我们打开Payload 子选项卡，选择Payload的生成或者选择策略，默认情况下选择“Simple list”,当然你也可以通过下拉选择其他Payload类型或者手工添加。</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/RiXrHIKV8Y1eWZg.png" alt="img"></p>
<ol start="8">
<li> 此时，我们再回到Position界面，在界面的右上角，点击【Start attack】，发起攻击。</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/2fiz5RmjpCMvYud.png" alt="img"></p>
<ol start="9">
<li> 此时，Burp会自动打开一个新的界面，包含攻击执行的情况、Http状态码、长度等结果信息。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c41e7fc3d318133f2019f7349c32edea.png" alt="img"></p>
<ol start="10">
<li>我们可以选择其中的某一次通信信息，查看请求消息和应答消息的详细。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7482b496dc9fb8e3846f30e11102d768.png" alt="img"></p>
<h3 id="Project-Options模块"><a href="#Project-Options模块" class="headerlink" title="Project Options模块"></a>Project Options模块</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e2eee982f969e3f3364cfaa3d4cee97d.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/wIZYEzoNHv78eSu.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/qUhzYO97pkLtN6b.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/Q6bmxjfg1WICG9h.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/QUT18RhKVny3SIN.png" alt="img"></p>
<h3 id="User-Options模块"><a href="#User-Options模块" class="headerlink" title="User Options模块"></a>User Options模块</h3><p><img src="https://i.loli.net/2021/10/05/e1zu8X297QrB4HV.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/VEm3TBsjqQHdrAR.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/GV4zwEtxo7sMYem.png" alt="img"></p>
<h3 id="BurpSuite扩展插件推荐"><a href="#BurpSuite扩展插件推荐" class="headerlink" title="BurpSuite扩展插件推荐"></a>BurpSuite扩展插件推荐</h3><ul>
<li>Autorize —— 强大的越权自动化测试工具</li>
<li>Turbo Intruder —— 短时间发送大量请求</li>
<li>Software Vulnerability Scanner —— 自动根据版本号查找 CVE</li>
<li>Scan Check Builder —— 自定义扫描 payload</li>
<li>BypassWAF —— 可帮助绕过WAF</li>
<li>Logger++ —— 更强大的请求历史查看器</li>
<li>Brida —— 连接 frida 与 burpsuite</li>
<li>J2EEScan —— 强大的 J2EE 后台扫描插件</li>
<li>sqlmap4burp++ —— 连接 burpsuite 与 sqlmap</li>
<li>Knife —— 工具箱、自定义 payload</li>
<li>CSRF Token Tracker —— 绕过CSRF限制进行暴力破解</li>
<li>JSON Beautifier —— 格式化查看 json</li>
<li>Decompressor —— 自动解码和修改 gzip 压缩包</li>
<li>Wsdler —— 测试 WSDL 请求</li>
</ul>
<h2 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h2><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。</p>
<blockquote>
<p>这里推荐使用的AWVS虽然不是最新版，但是是最新的破解docker版</p>
</blockquote>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>1、docker中拉取下载镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull secfa/docker-awvs</span><br></pre></td></tr></table></figure>

<p>2、将docker的3443端口映射到物理机的 3443端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br></pre></td></tr></table></figure>

<p>3、<code>https://docker所在服务器的ip:3343</code></p>
<p>默认用户名和密码：</p>
<p><code>username: admin@admin.com</code></p>
<p><code>password: Admin123</code></p>
<p><img src="https://i.loli.net/2021/10/05/bt1anT2DRJ3xmkS.png" alt="227b2f2bf566fb26bf9afe9c31447e2d.png"></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>使用界面</strong></p>
<p><img src="https://i.loli.net/2021/10/05/bAkiWhe6Xl2GDFH.png" alt="在这里插入图片描述"></p>
<p><strong>扫描功能区</strong></p>
<p><img src="https://i.loli.net/2021/10/05/IMhU4JFtCyXLZSk.png" alt="在这里插入图片描述"></p>
<ol>
<li> Targets 点击 targets返回目标列表，选择要扫描的url，点击scan开始扫描</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/zZLSaFfmjDVEx3p.png" alt="在这里插入图片描述"></p>
<ol start="2">
<li> Vulnerabilities 点击Vulnerabilities查看漏洞列表，选择具体的漏洞可以进行右上方的操作</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/yCExQjGKFYBXeUw.png" alt="在这里插入图片描述"></p>
<ol start="3">
<li>Reports 点击reports，可以看到扫描结束的报告列表，可以导出为pdf和html格式的 <img src="https://i.loli.net/2021/10/05/nC8DyOGFXZTBI14.png" alt="在这里插入图片描述"></li>
</ol>
<p><strong>设置区</strong></p>
<ol>
<li> Users(用户管理) 创建子用户</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/FejScwlBL1YIz8C.png" alt="在这里插入图片描述"></p>
<ol start="2">
<li> ScanTypes(扫描类型) 添加自定义扫描类型</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/y3VofR62hLmI1cM.png" alt="在这里插入图片描述"></p>
<ol start="3">
<li> Network Scanner(网络扫描器)</li>
</ol>
<p><img src="https://i.loli.net/2021/10/05/MnQtqTvDH6ELhGa.png" alt="在这里插入图片描述"></p>
<h2 id="AppScan"><a href="#AppScan" class="headerlink" title="AppScan"></a>AppScan</h2><p>IBM AppScan该产品是一个领先的 Web 应用安全测试工具，曾以 Watchfire AppScan 的名称享誉业界。Rational AppScan 可自动化 Web 应用的安全漏洞评估工作，能扫描和检测所有常见的 Web 应用安全漏洞。</p>
<p>AppScan的下载、安装可参考：<a href="https://www.jb51.net/softs/733458.html">https://www.jb51.net/softs/733458.html</a></p>
<p>个人认为扫描速度比AWVS要慢很多，这里不做过多讲解。</p>
<h2 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>项目地址：<a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a></p>
<p>长亭科技研发的一款完善的安全评估工具，支持常见 Web 安全问题扫描和自定义 POC，虽然 Github 有项目，但是不开源，只提供社区版本供大家使用。</p>
<ul>
<li>有关Xray的配置可以参考此文章：<a href="https://www.sqlsec.com/2020/04/xray.html#toc-heading-21">https://www.sqlsec.com/2020/04/xray.html#toc-heading-21</a></li>
<li>Xray安全工具评估文档：<a href="https://docs.xray.cool/#/tutorial/introduce">https://docs.xray.cool/#/tutorial/introduce</a></li>
</ul>
<p>这里只是进行一个简单使用。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式下的基本架构为，扫描器作为中间人，首先原样转发流量，并返回服务器响应给浏览器等客户端，通讯两端都认为自己直接与对方对话，同时记录该流量，然后修改参数并重新发送请求进行扫描。这种原理和 Burpsuite 的自带的漏扫原理是一样的。</p>
<h4 id="生成-ca-证书"><a href="#生成-ca-证书" class="headerlink" title="生成 ca 证书"></a>生成 ca 证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  生成 ca 证书</span></span><br><span class="line">./xray genca</span><br><span class="line"></span><br><span class="line"><span class="comment">#  在当前文件夹生成 ca.crt 和 ca.key 两个文件</span></span><br><span class="line">ls</span><br><span class="line">ca.crt      ca.key      config.yaml xray</span><br></pre></td></tr></table></figure>

<p>将生成的 ca 证书导入到需要代理的设备即可，这样就可以方便代理 https 的流量了</p>
<h4 id="启用代理"><a href="#启用代理" class="headerlink" title="启用代理"></a>启用代理</h4><p>第一次启动 xray 之后，当前目录会生成 <code>config.yml</code> 配置文件。</p>
<p>监听本地的<code>7777</code>端口，并设置漏洞报告的输出的文件名为：<code>xray-testphp.html</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xray webscan --listen 127.0.0.1:7777 --html-output xray-testphp.html</span><br></pre></td></tr></table></figure>

<h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>Chrome 下的 SwitchyOmega 插件很方便添加各种代理，将xray的代理添加进来，然后浏览器开启 xray 代理即可:</p>
<p><img src="https://image.3001.net/images/20200415/15869142439356.png" alt="img"></p>
<h4 id="开始扫描"><a href="#开始扫描" class="headerlink" title="开始扫描"></a>开始扫描</h4><p>使用刚刚设置过代理的 Chrome 浏览器访问：<a href="http://testphp.vulnweb.com/">http://testphp.vulnweb.com</a></p>
<p>然后就可以看到 xray 界面开始输出漏洞信息，在用户和网站交互的时候，期间的连接 xray 都会进行安全检查，然后生成对应的漏洞报告:</p>
<p>下面是几个快速链接，可以点击用于体验更多的漏洞类型的扫描</p>
<ul>
<li><a href="http://testphp.vulnweb.com/listproducts.php?cat=1">http://testphp.vulnweb.com/listproducts.php?cat=1</a></li>
<li><a href="http://testphp.vulnweb.com/artists.php?artist=2">http://testphp.vulnweb.com/artists.php?artist=2</a></li>
<li><a href="http://testphp.vulnweb.com/redir.php?r=http://www.w3.org">http://testphp.vulnweb.com/redir.php?r=http://www.w3.org</a></li>
</ul>
<p>可以在上面设置的输出格式里面看到对应的漏洞检测结果报告：</p>
<p><img src="https://image.3001.net/images/20200415/15869147021320.png" alt="img"></p>
<h3 id="爬虫模式"><a href="#爬虫模式" class="headerlink" title="爬虫模式"></a>爬虫模式</h3><p>爬虫模式是模拟人工去点击网页的链接，然后去分析扫描，和代理模式不同的是，爬虫不需要人工的介入，访问速度要快很多，但是也有一些缺点需要注意。</p>
<ul>
<li>xray 的基础爬虫不能处理 js 渲染的页面</li>
<li>需要首先人工配置登录 cookie，必需的 http 头等，如果登录失败，也不容易发现问题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xray webscan --basic-crawler http://testphp.vulnweb.com/ --html-output xray-crawler-testphp.html</span><br></pre></td></tr></table></figure>

<p>在这个模式下，相当于主动扫描模式，自主分析页面的链接，然后自动探测是否有漏洞。</p>
<h3 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h3><p>xray 也支持服务扫描，目前的服务扫描的POC还不够多，目前只有一个 tomcat-cve-2020-1938 ajp 协议任意文件检测poc。</p>
<p>参数配置目前比较简单，支持单个扫描与批量扫描：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速检测单个目标</span></span><br><span class="line">./xray servicescan --target 127.0.0.1:8009</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量检查的 1.file 中的目标, 一行一个目标，带端口</span></span><br><span class="line">./xray servicescan --target-file test.file</span><br></pre></td></tr></table></figure>

<p>其中 <code>test.file</code> 的格式为一个行一个 service，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.3.0.203:8009</span><br><span class="line">127.0.0.1:8009</span><br></pre></td></tr></table></figure>

<p>也可以将结果输出到报告中，支持多种格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将检测结果输出到 html 报告中</span></span><br><span class="line">./xray servicescan --target 127.0.0.1:8009 --html-output service.html</span><br><span class="line">./xray servicescan --target-file test.file --html-output service.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将检测结果输出到 json 文件中</span></span><br><span class="line">./xray servicescan --target 127.0.0.1:8099 --json-output service.json </span><br></pre></td></tr></table></figure>

<p>完整的servicescan用法可以使用下面命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./xray servicescan --help</span><br><span class="line">NAME:</span><br><span class="line">    servicescan - Run a service scan task</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    servicescan [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --target value          specify the target, for example: host:8009</span><br><span class="line">   --target-file value     load targets from a local file, one target a line</span><br><span class="line">   --json-output FILE      output xray results to FILE in json format</span><br><span class="line">   --webhook-output value  post xray result to url in json format</span><br><span class="line">   --html-output FILE      output xray result to FILE in HTML format</span><br></pre></td></tr></table></figure>

<h3 id="Xray与Rad联动"><a href="#Xray与Rad联动" class="headerlink" title="Xray与Rad联动"></a>Xray与Rad联动</h3><p>长亭科技研发的一款浏览器爬虫，rad 爬虫可以动态渲染各种框架的网站并进行请求抓取。</p>
<p>可以配合Rad实现强大的主动扫描。</p>
<p>rad下载地址：<a href="https://github.com/chaitin/rad">https://github.com/chaitin/rad</a></p>
<p>与xray联动方式</p>
<ul>
<li>社区版：设置上级代理为xray监听地址 运行xray：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure>
  运行rad：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rad -t http://example.com -http-proxy 127.0.0.1:7777</span><br></pre></td></tr></table></figure>
</li>
<li>高级版对 rad 进行了深度融合，下载后可以一键使用：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xray webscan --browser-crawler http://example.com --html-output vuln.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Xray与Crawlergo联动"><a href="#Xray与Crawlergo联动" class="headerlink" title="Xray与Crawlergo联动"></a>Xray与Crawlergo联动</h3><p><strong>crawlergo</strong>是一个使用<code>chrome headless</code>模式进行URL收集的浏览器爬虫。它对整个网页的关键位置与DOM渲染阶段进行HOOK，自动进行表单填充并提交，配合智能的JS事件触发，尽可能的收集网站暴露出的入口。内置URL去重模块，过滤掉了大量伪静态URL，对于大型网站仍保持较快的解析与抓取速度，最后得到高质量的请求结果集合。</p>
<p>crawlergo下载地址：<a href="https://github.com/Qianlitp/crawlergo">https://github.com/Qianlitp/crawlergo</a></p>
<p><strong>crawlergo_x_XRAY</strong>：360 0Kee-Team 的 crawlergo动态爬虫 结合 长亭XRAY扫描器的被动扫描功能 (其它被动扫描器同理)</p>
<p>项目地址：<a href="https://github.com/timwhitez/crawlergo_x_XRAY">https://github.com/timwhitez/crawlergo_x_XRAY</a></p>
<p>与Xray联动方式</p>
<p>1、下载xray最新的release, 下载crawlergo最新的release</p>
<p>注意,是下载编译好的文件而不是git clone它的库</p>
<p>2、下载crawlergo_x_XRAY</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/timwhitez/crawlergo_x_XRAY.git</span><br></pre></td></tr></table></figure>

<p>3、把launcher.py和targets.txt放在crawlergo.exe同目录下</p>
<p>4、配置好并启动xray被动扫描(脚本默认配置为127.0.0.1:7777)若修改端口请同时修改launcher.py文件中的proxies</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure>

<p>5、配置好launcher.py的cmd变量中的crawlergo爬虫配置(主要是chrome路径改为本地路径), 默认为：</p>
<p><code>./crawlergo -c C:\Program Files (x86)\Google\Chrome\Application\chrome.exe -t 20 -f smart --fuzz-path --output-mode json target</code></p>
<p><img src="/../_resources/a79d6c745ce01083fc538cd138f8a6c7.png" alt="a79d6c745ce01083fc538cd138f8a6c7.png"></p>
<p>6、把目标url写进targets.txt,一行一个url</p>
<p><img src="/../_resources/23b7d8b864864a0cdb60c5d38c331d93.png" alt="23b7d8b864864a0cdb60c5d38c331d93.png"></p>
<p>7、用python3运行launcher.py ( XRAY被动扫描为启动的状态 )</p>
<p>8、生成的sub_domains.txt为爬虫爬到的子域名, crawl_result.txt为爬虫爬到的url</p>
<blockquote>
<p>Xray还可以与AWVS、Burpsuite联动，官方文档中有说明，这里就不进行赘述了。</p>
</blockquote>
<h2 id="W13Scan"><a href="#W13Scan" class="headerlink" title="W13Scan"></a>W13Scan</h2><p>W13scan 是基于Python3的一款开源的Web漏洞发现工具,它支持主动扫描模式和被动扫描模式，能运行在Windows、Linux、Mac上。</p>
<p>功能与Xray相似，具有非常丰富的检测插件，而且是开源的。</p>
<p>项目地址：<a href="https://github.com/w-digital-scanner/w13scan">https://github.com/w-digital-scanner/w13scan</a></p>
<p>W13Scan也可以使用被动扫描模式，且也可以与爬虫扫描工具进行联动。</p>
<h2 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h2><p>Goby 是一款新的网络安全测试工具，由赵武 Zwell（Pangolin、JSky、FOFA 作者）打造，它能够针对一个目标企业梳理最全的攻击面信息，同时能进行高效、实战化漏洞扫描，并快速的从一个验证入口点，切换到横向。我们希望能够输出更具生命力的工具，能够对标黑客的实际能力，帮助企业来有效地理解和应对网络攻击。</p>
<p>支持多平台、多国语言。</p>
<p>具有丰富的设备规则集（软硬件设备厂商、系统、业务）、轻量级的协议识别（网络协议、数据库协议、IoT协议、ICS协议）、丰富的端口分组（超过300个常见端口）、最新的漏洞框架（及时更新漏洞信息、民间高手POC）、全面的预置密码检查（设备默认账号密码）</p>
<p>最重要的是免费且扩展性强，联动姿势很多。</p>
<p><img src="https://i.loli.net/2021/10/05/T2OuLpAzSZY7VDX.png" alt="36f5a72c07f3b44be76b25fcc179e99b.png"></p>
<h2 id="OWASP-ZAP"><a href="#OWASP-ZAP" class="headerlink" title="OWASP ZAP"></a>OWASP ZAP</h2><p>OWASP ZAP，全称：OWASP Zed Attack Proxy攻击代理服务器是世界上最受欢迎的免费安全工具之一。ZAP可以帮助我们在开发和测试应用程序过程中，自动发现 Web应用程序中的安全漏洞。另外，它也是一款提供给具备丰富经验的渗透测试人员进行人工安全测试的优秀工具。</p>
<p>OWASP ZAP的漏洞扫描能力虽然不是很好用，但它有着非常强大的爬虫功能。</p>
<p>Kali Linux内置工具。</p>
<h2 id="w3af"><a href="#w3af" class="headerlink" title="w3af"></a>w3af</h2><p>w3af是一种开源web 应用程序安全扫描仪，可帮助开发人员和渗透测试人员识别和利用其 web 应用程序中的漏洞。</p>
<p>w3af能够识别200 多个漏洞，包括跨站点脚本、SQL 注入和操作系统命令。</p>
<p>项目地址：<a href="https://github.com/andresriancho/w3af">https://github.com/andresriancho/w3af</a></p>
<p>相关安装流程可参考：<a href="https://www.jianshu.com/p/171ab006183a">https://www.jianshu.com/p/171ab006183a</a></p>
<h2 id="skipfish"><a href="#skipfish" class="headerlink" title="skipfish"></a>skipfish</h2><p>Skipfish是一款轻量级的主动的Web应用程序安全侦察工具。它通过执行递归爬取和基于字典的探测来为目标站点准备交互式站点地图。最终的地图然后用来自许多活动（但希望是不中断的）安全检查的输出来注释。该工具生成的最终报告旨在作为专业Web应用程序安全评估的基础。</p>
<p>Kali Linux内置工具。</p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>系统与网络漏洞扫描器</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/6.%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h2><p>Nessus是全球使用人数最多的系统漏洞扫描与分析软件，这是一个免费、威力强大、更新频繁并简易使用的远端系统安全扫描程序，功能十分强大。</p>
<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>Nessus有教育版和专业版。Nessus教育版最大只支持扫描16个主机,但利用docker无限使用,当然虚拟机快照也可以。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -itd -p 8834:8834 registry.cn-hangzhou.aliyuncs.com/steinven/nessus:v0.1</span><br></pre></td></tr></table></figure>

<p>注意该命令中的–rm参数，每次容器停止后会自动删除，如不想删除，去掉该参数即可</p>
<p>访问<code>https://ip:8834</code>（注意是<code>https</code>），账号：<code>admin</code>密码：<code>admin</code></p>
<h2 id="Ladon"><a href="#Ladon" class="headerlink" title="Ladon"></a>Ladon</h2><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.2版本内置94个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破13种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB/IPC、NBT、WMI、SmbHash、WmiHash、Winrm)、BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe/psexec/atexec/sshexec/jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。</p>
<p>项目地址：<a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p>
<p>使用文档：<a href="https://k8gege.org/Ladon/">https://k8gege.org/Ladon/</a></p>
<h2 id="OpenVAS"><a href="#OpenVAS" class="headerlink" title="OpenVAS"></a>OpenVAS</h2><p>OpenVAS 是一个全功能的漏洞扫描器。它的功能包括非认证测试、认证测试、各种高水平和低水平的互联网和工业协议、大规模扫描的性能调整和一个强大的内部编程语言来实现任何类型的漏洞测试。</p>
<p>使用Kali Linux 进行安装、扫描教程：</p>
<p><a href="https://www.kali.org/blog/openvas-vulnerability-scanning/">https://www.kali.org/blog/openvas-vulnerability-scanning/</a></p>
<h2 id="Nexpose"><a href="#Nexpose" class="headerlink" title="Nexpose"></a>Nexpose</h2><p>Rapid7 Nexpose是一款面向大型网络组织的安全风险智能解决方案。</p>
<p>Nexpose主动支持整个漏洞管理生命周期，包括发现，检测，验证，风险分类，影响分析，报告和缓解。</p>
<p>官网地址：<a href="https://www.rapid7.com/products/nexpose/">https://www.rapid7.com/products/nexpose/</a></p>
<p>下载与安装教程：<a href="https://www.fujieace.com/hacker/rapid7-nexpose.html">https://www.fujieace.com/hacker/rapid7-nexpose.html</a></p>
<p>使用教程：<a href="https://www.yiibai.com/ethical_hacking/ethical-hacking-nexpose-analysis.html">https://www.yiibai.com/ethical_hacking/ethical-hacking-nexpose-analysis.html</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>单功能漏洞扫描器</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/7.%E5%8D%95%E5%8A%9F%E8%83%BD%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<h2 id="SQL注入漏洞扫描利用工具"><a href="#SQL注入漏洞扫描利用工具" class="headerlink" title="SQL注入漏洞扫描利用工具"></a>SQL注入漏洞扫描利用工具</h2><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p>sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎,针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p>
<p>官网地址：<a href="https://sqlmap.org/">https://sqlmap.org/</a></p>
<p>这里只是进行一个简单的介绍，之后会对sqlmap进行一个详细讲解。</p>
<h3 id="Pangolin"><a href="#Pangolin" class="headerlink" title="Pangolin"></a>Pangolin</h3><p>Pangolin能够通过一系列非常简单的操作，达到最大化的攻击测试效果。它从检测注入开始到最后控制目标系统都给出了测试步骤。</p>
<h2 id="XSS漏洞扫描利用工具"><a href="#XSS漏洞扫描利用工具" class="headerlink" title="XSS漏洞扫描利用工具"></a>XSS漏洞扫描利用工具</h2><h3 id="XSSer"><a href="#XSSer" class="headerlink" title="XSSer"></a>XSSer</h3><p>XSSer (Cross site “scripter”)是一款自动化渗透测试XSS漏洞的安全工具,专门用来检测和利用不同应用程序中存在的跨站脚本漏洞。它包含了一些选项用来尝试绕过特定的过滤器，并且具有特殊的代码注入技术。</p>
<h3 id="XSStrike"><a href="#XSStrike" class="headerlink" title="XSStrike"></a>XSStrike</h3><p>XSStrike 是一个跨站点脚本攻击检测套件，包含四个手写的解析器，一个智能有效的 payload 生成器，一个强大的模糊搜索引擎和一个非常快速的爬虫。</p>
<p>项目地址：<a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p>
<h3 id="Xspear"><a href="#Xspear" class="headerlink" title="Xspear"></a>Xspear</h3><p>一款基于 RubyGems 的 XSS 漏洞扫描器。能够进行常见的 XSS 扫描测试以及参数分析。</p>
<p>项目地址：<a href="https://github.com/hahwul/XSpear">https://github.com/hahwul/XSpear</a></p>
<h3 id="ezXSS"><a href="#ezXSS" class="headerlink" title="ezXSS"></a>ezXSS</h3><p>ezXSS是一款用于渗透测试和漏洞挖掘的XSS盲测跨站脚本工具。</p>
<p>项目地址：<a href="https://github.com/ssl/ezXSS">https://github.com/ssl/ezXSS</a></p>
<h3 id="OWASP-Xenotix-XSS"><a href="#OWASP-Xenotix-XSS" class="headerlink" title="OWASP Xenotix XSS"></a>OWASP Xenotix XSS</h3><p>Xenotix XSS Exploit Framework是一款用于检测和利用WEB应用程序中的XSS漏洞的渗透测试工具。这个工具可以将代码注入到含有xss漏洞的web页面中。</p>
<h2 id="CSRF漏洞扫描利用工具"><a href="#CSRF漏洞扫描利用工具" class="headerlink" title="CSRF漏洞扫描利用工具"></a>CSRF漏洞扫描利用工具</h2><h3 id="CSRF-Tester"><a href="#CSRF-Tester" class="headerlink" title="CSRF Tester"></a>CSRF Tester</h3><p>CSRFTester是一个用于测试网站中CSRF（跨站点请求伪造）漏洞的开源工具。</p>
<h3 id="CSRF-Request-Builder"><a href="#CSRF-Request-Builder" class="headerlink" title="CSRF Request Builder"></a>CSRF Request Builder</h3><p>CSRF Request Builder是一款CSRF漏洞利用和测试工具。</p>
<p>项目地址：<a href="https://github.com/PanYX/CSRF-Request-Builder">https://github.com/PanYX/CSRF-Request-Builder</a></p>
<h2 id="SSRF漏洞扫描利用工具"><a href="#SSRF漏洞扫描利用工具" class="headerlink" title="SSRF漏洞扫描利用工具"></a>SSRF漏洞扫描利用工具</h2><h3 id="Extended-ssrf-search"><a href="#Extended-ssrf-search" class="headerlink" title="Extended ssrf search"></a>Extended ssrf search</h3><p>Extended ssrf search是一款功能强大的SSRF智能漏洞扫描工具，该工具可以通过在请求中设置不同的预定义参数来搜索SSRF漏洞，这些参数包括路径、主机、Header、POST和GET参数。</p>
<p>项目地址：<a href="https://github.com/Damian89/extended-ssrf-search">https://github.com/Damian89/extended-ssrf-search</a></p>
<h3 id="See-SURF"><a href="#See-SURF" class="headerlink" title="See-SURF"></a>See-SURF</h3><p>See-SURF是一款基于Python开发的扫描工具，它可以帮助安全研究人员查找并发现目标Web应用程序中潜在的SSRF参数。</p>
<p>项目地址：<a href="https://github.com/In3tinct/See-SURF">https://github.com/In3tinct/See-SURF</a></p>
<h2 id="XXE漏洞扫描利用工具"><a href="#XXE漏洞扫描利用工具" class="headerlink" title="XXE漏洞扫描利用工具"></a>XXE漏洞扫描利用工具</h2><h3 id="XXExploiter"><a href="#XXExploiter" class="headerlink" title="XXExploiter"></a>XXExploiter</h3><p>XXExploiter是一款功能强大的XXE漏洞扫描与利用工具，在它的帮助下，广大安全研究人员可以轻松发现和利用XXE漏洞。</p>
<p>项目地址：<a href="https://github.com/luisfontes19/xxexploiter">https://github.com/luisfontes19/xxexploiter</a></p>
<h3 id="xxer"><a href="#xxer" class="headerlink" title="xxer"></a>xxer</h3><p>XXE盲注回调处理程序。使用HTTP和FTP提取信息。</p>
<p>项目地址：<a href="https://github.com/TheTwitchy/xxer">https://github.com/TheTwitchy/xxer</a></p>
<h2 id="CMS通用漏洞扫描利用工具"><a href="#CMS通用漏洞扫描利用工具" class="headerlink" title="CMS通用漏洞扫描利用工具"></a>CMS通用漏洞扫描利用工具</h2><h3 id="CMSmap"><a href="#CMSmap" class="headerlink" title="CMSmap"></a>CMSmap</h3><p>CMSmap是一个Python编写的针对开源CMS（内容管理系统）的安全扫描器，它可以自动检测当前国外最流行的CMS的安全漏洞。 CMSmap主要是在一个单一的工具集合了不同类型的CMS的常见的漏洞。CMSmap目前只支持WordPress，Joomla和Drupal。</p>
<p>项目地址：<a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a></p>
<h3 id="WPScan"><a href="#WPScan" class="headerlink" title="WPScan"></a>WPScan</h3><p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。</p>
<h3 id="JoomScan"><a href="#JoomScan" class="headerlink" title="JoomScan"></a>JoomScan</h3><p>OWASP Joomla！漏洞扫描程序（JoomScan）是一个开源项目，旨在自动执行Joomla CMS部署中的漏洞检测和可靠性保证任务。该工具在Perl中实现，可以无缝轻松地扫描Joomla安装，同时通过其轻量级和模块化架构留下最小的占地面积。它不仅可以检测已知的攻击性漏洞，还能够检测到许多错误配置和管理员级别的缺陷，这些缺陷可被攻击者利用来破坏系统。此外，OWASP JoomScan提供了用户友好的界面，并以文本和HTML格式编译最终报告，以便于使用和最小化报告开销。 OWASP JoomScan包含在Kali Linux发行版中。</p>
<h3 id="DeDeScan"><a href="#DeDeScan" class="headerlink" title="DeDeScan"></a>DeDeScan</h3><p>dedescan是一款可以扫描所有已公开的dedecms漏洞的扫描器。</p>
<p>项目地址：<a href="https://github.com/lengjibo/dedecmscan">https://github.com/lengjibo/dedecmscan</a></p>
<h3 id="DzScan"><a href="#DzScan" class="headerlink" title="DzScan"></a>DzScan</h3><p>DzScan是一款Python编写的针对大部分Discuz CMS漏洞的扫描工具。</p>
<p>项目地址：<a href="https://github.com/melodyzx/dzscan">https://github.com/melodyzx/dzscan</a></p>
<h2 id="Web框架漏洞扫描利用工具"><a href="#Web框架漏洞扫描利用工具" class="headerlink" title="Web框架漏洞扫描利用工具"></a>Web框架漏洞扫描利用工具</h2><h3 id="Struts2-Scan"><a href="#Struts2-Scan" class="headerlink" title="Struts2-Scan"></a>Struts2-Scan</h3><p>Struts2漏洞利用扫描工具，基于互联网上已经公开的Structs2高危漏洞exp的扫描利用工具，目前支持的漏洞如下: S2-001, S2-003, S2-005, S2-007, S2-008, S2-009, S2-012, S2-013, S2-015, S2-016, S2-019, S2-029, S2-032, S2-033, S2-037, S2-045, S2-046, S2-048, S2-052, S2-053, S2-devMode, S2-057</p>
<p>项目地址：<a href="https://gitee.com/sq_smile/Struts2-Scan">https://gitee.com/sq_smile/Struts2-Scan</a></p>
<h3 id="s2sniper"><a href="#s2sniper" class="headerlink" title="s2sniper"></a>s2sniper</h3><p>这是一款针对struts2的漏洞检测工具，目前支持检测045，046，048，并且可以继续添加，可批量，可自定义线程数。</p>
<p>项目地址：<a href="https://github.com/theLSA/s2sniper">https://github.com/theLSA/s2sniper</a></p>
<h3 id="K8-Struts2-Exp"><a href="#K8-Struts2-Exp" class="headerlink" title="K8 Struts2 Exp"></a>K8 Struts2 Exp</h3><p>一款Struts2综合漏洞利用工具，可以对Struts2框架漏洞进行扫描与利用。</p>
<h3 id="Struts2漏洞检查工具"><a href="#Struts2漏洞检查工具" class="headerlink" title="Struts2漏洞检查工具"></a>Struts2漏洞检查工具</h3><p>一款安恒大佬编写的Struts2全版本漏洞检测与利用工具。</p>
<h3 id="TPscan"><a href="#TPscan" class="headerlink" title="TPscan"></a>TPscan</h3><p>一个thinkphp的漏洞集成检测工具,TPScan目前能检测的Thinkphp漏洞列表[18个],包含TP3、TP5已知漏洞。</p>
<p>项目地址：<a href="https://github.com/Lucifer1993/TPscan">https://github.com/Lucifer1993/TPscan</a></p>
<h2 id="Web中间件扫描利用工具"><a href="#Web中间件扫描利用工具" class="headerlink" title="Web中间件扫描利用工具"></a>Web中间件扫描利用工具</h2><h3 id="Vulmap"><a href="#Vulmap" class="headerlink" title="Vulmap"></a>Vulmap</h3><p>Vulmap 是一款 web 漏洞扫描和验证工具, 可对 webapps 进行漏洞扫描, 并且具备漏洞利用功能, 目前支持的 webapps 包括 activemq, flink, shiro, solr, struts2, tomcat, unomi, drupal, elasticsearch, fastjson, jenkins, nexus, weblogic, jboss, spring, thinkphp</p>
<p>Vulmap 将漏洞扫描与验证（漏洞利用）结合到了一起, 及大程度便于测试人员在发现漏洞后及时进行下一步操作, 工具追求于于高效、便捷 高效: 逐步开发中慢慢引入了批量扫描、Fofa、Shodan 批量扫描, 且支持多线程默认开启协程, 以最快的速度扫描大量资产 便捷: 发现漏洞即可利用, 大量资产扫描可多格式输出结果</p>
<p>项目地址：<a href="https://github.com/zhzyker/vulmap">https://github.com/zhzyker/vulmap</a></p>
<h3 id="Nuclei"><a href="#Nuclei" class="headerlink" title="Nuclei"></a>Nuclei</h3><p>Nuclei可以基于模板来跨目标发送请求，能够实现零误报，并且可以帮助研究人员对已知路径执行有效的扫描。Nuclei的主要使用场景为网络侦察的初始阶段，可以帮助研究人员快速检查已知且易于探测的目标中是否存在安全漏洞。该工具使用了来处理各种错误，并在Web应用防火墙屏蔽的情况下进行自动重传，这也是该工具的核心模块之一。</p>
<p>项目地址（本体）：<a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></p>
<p>项目地址（模板）：<a href="https://github.com/projectdiscovery/nuclei-templates">https://github.com/projectdiscovery/nuclei-templates</a></p>
<h3 id="weblogic-scan"><a href="#weblogic-scan" class="headerlink" title="weblogic-scan"></a>weblogic-scan</h3><p>weblogic 漏洞扫描工具。</p>
<p>目前检测的功能：</p>
<ul>
<li>console 页面探测 &amp; 弱口令扫描</li>
<li>uuid页面的SSRF</li>
<li>CVE-2017-10271 wls-wsat页面的反序列化</li>
<li>CVE-2018-2628 反序列化</li>
<li>CNVD-C-2019-48814</li>
</ul>
<p>项目地址：<a href="https://github.com/kingkaki/weblogic-scan">https://github.com/kingkaki/weblogic-scan</a></p>
<h3 id="JexBoss"><a href="#JexBoss" class="headerlink" title="JexBoss"></a>JexBoss</h3><p>Jexboss是一个使用Python编写的Jboss漏洞检测利用工具，通过它可以检测并利用web-console，jmx-console，JMXInvokerServlet这三个漏洞，并且可以获得一个shell。</p>
<p>项目地址：<a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a></p>
<h3 id="shiro-attack"><a href="#shiro-attack" class="headerlink" title="shiro attack"></a>shiro attack</h3><p>基于javafx,利用shiro反序列化漏洞进行回显命令执行以及注入各类内存马。</p>
<p>项目地址：<a href="https://github.com/j1anFen/shiro_attack">https://github.com/j1anFen/shiro_attack</a></p>
<h3 id="DockerXScan"><a href="#DockerXScan" class="headerlink" title="DockerXScan"></a>DockerXScan</h3><p>Docker镜像漏洞扫描器，对docker镜像逐层分析，并提取其版本特征。 通过匹配特征，来比对CVE漏洞。</p>
<p>项目地址：<a href="https://github.com/antime/DockerXScan">https://github.com/antime/DockerXScan</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>代理与代理池</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/8.%E4%BB%A3%E7%90%86%E4%B8%8E%E4%BB%A3%E7%90%86%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="代理的介绍"><a href="#代理的介绍" class="headerlink" title="代理的介绍"></a>代理的介绍</h2><h3 id="代理是什么？"><a href="#代理是什么？" class="headerlink" title="代理是什么？"></a>代理是什么？</h3><p>代理IP又称代理服务器(Proxy Server)，形象的讲，代理服务器是网络信息的中转站，它是介于浏览器和Web服务器之间的一台服务器，有了它之后，Request信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。</p>
<h3 id="代理有什么用？"><a href="#代理有什么用？" class="headerlink" title="代理有什么用？"></a>代理有什么用？</h3><p>使用爬虫爬取网站或者使用扫描器扫描目标时经常会遇到扫描频率较为频繁导致IP被封或者限制访问的情况，这时候我们就需要考虑利用IP代理的方式不断的变换IP进行爬虫和扫描，从而逃避目标端的检测。</p>
<h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><p>代理池管理大量代理。换句话说，它是一个控制代理质量的系统，并决定哪些IP将被包含在某人使用的一组代理中。</p>
<p>如果您花费大量时间完成上述任务（例如SEO，数据挖掘），则使用代理池非常有用。通常情况下，从单一住宅IP发出所有请求是不安全的，因为您可以快速被禁止。</p>
<p>因此，您需要拥有一组始终保持IP隐藏的代理。此外，它们将足够快地旋转，以便目标网站服务器没有足够的时间将其中任何一个识别为可疑。</p>
<p>但是，在开始执行任务之前，需要准备好代理池。这使您可以专注于您正在做的事情而不是担心如果您将被服务器禁止。</p>
<h3 id="如何获取代理IP"><a href="#如何获取代理IP" class="headerlink" title="如何获取代理IP"></a>如何获取代理IP</h3><p>免费代理的网站问一下度娘或者谷哥应该就能得到很多答案，有：快代理 ()[<a href="https://www.kuaidaili.com/free/">https://www.kuaidaili.com/free/</a>) 、[ProxyList（<a href="https://proxy-list.org/english/index.php">https://proxy-list.org/english/index.php</a>) ，PorxyList是国外的一个提供免费代理的网站，貌似需要翻墙访问，这里我使用快代理提供的IP和端口。</p>
<p><img src="https://i.loli.net/2021/10/05/Z4BceUm6oHlxjGs.jpg" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/N5scE2XdCJIo4gU.jpg" alt="img"></p>
<p>需要注意的是，在使用proxychains代理转发过程中，如果目标对象为https，那么需要使用支持SSL/https协议的代理，快代理提供的免费代理均只支持http协议；Proxy List中有支持SSL/HTTPS协议且免费的代理。</p>
<p>不过还是建议购买付费代理池。</p>
<h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>ProxyChains遵循GNU协议的一款适用于linux系统的网络代理设置工具。强制由任一程序发起的TCP连接请求必须通过诸如TOR 或 SOCKS4, SOCKS5 或HTTP(S) 代理。支持的认证方式包括：SOCKS4/5的用户/密码认证，HTTP的基本认证。允许TCP和DNS通过代理隧道，并且可配置多个代理。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>在以下几种场合，你可以考虑使用ProxyChains：需要通过代理上网，或者需要突破诸如设置了端口限制的防火墙；或者要使用telnet，ssh，wget，vnc，apt，ftp，nmap等应用；事实上，甚至可以通过ProxyChains设置反向代理来让你能够从外部访问你的内部局域网。突破防火墙限制访问互联网。</p>
<h3 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h3><p>①支持不同的代理选择策略： 随机（代理列表内），顺序，动态顺序 (智能排除无用的代理)</p>
<p>②可以与任意程序结合使用，甚至网络扫描。通过代理或代理链可以实现端口扫描。</p>
<p>③通过可调的超时设定，支持真正的长代理链。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Kali中自带ProxyChains，也可以从<a href="https://github.com/rofl0r/proxychains-ng%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E3%80%82ProxyChains%E8%BF%90%E8%A1%8C%E7%9A%84%E6%89%80%E6%9C%89%E9%85%8D%E7%BD%AE%E9%83%BD%E5%9C%A8/etc/proxychains.conf%E4%B8%AD%E3%80%82">https://github.com/rofl0r/proxychains-ng下载安装。ProxyChains运行的所有配置都在/etc/proxychains.conf中。</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install proxychains4</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>dynamic_chain：该配置项能够通过ProxyList中的每个代理运行流量，如果其中一个代理关闭或者没有响应，它能够自动选择ProxyList中的下一个代理。</li>
<li>strict_chain：改配置为ProxyChains的默认配置，不同于dynamic_chain，也能够通过ProxyList中的每个代理运行流量，但是如果ProxyList中的代理出现故障，不会自动切换到下一个。</li>
<li>random_chain：该配置项会从ProxyList中随机选择代理IP来运行流量，如果ProxyList中有多个代理IP，在使用proxychains的时候会使用不同的代理访问目标主机，从而使主机端探测流量更加困难。</li>
</ul>
<p>例如：现在需要添加一个Socks5代理</p>
<p>将 dynamic_chain 前面的 “#” 去掉，并在 strict_chain 前添加 “#” 。</p>
<p><img src="https://i.loli.net/2021/10/05/RIaXKnkBHUxG7QL.png" alt="配置1"></p>
<p>来到文件尾部，注释掉 sock4 开头的一行配置信息，因为我们需要所有流量均走 socks5 ，在其下方添加一行配置信息，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socks5 &lt;主机IP&gt; &lt;转发端口&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 &lt;运行的命令&gt; &lt;命令参数&gt;</span><br></pre></td></tr></table></figure>

<p>例如：使用Nmap scanner通过代理可以查找web服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -sT -PO -p 80 -iR</span><br></pre></td></tr></table></figure>

<p>-q参数可以静默适用代理，不会出现proxychains连接提示。</p>
<h2 id="Proxy-Pool"><a href="#Proxy-Pool" class="headerlink" title="Proxy_Pool"></a>Proxy_Pool</h2><p>Proxy_Pool，一个小巧的代理ip抓取+评估+存储+展示的一体化的工具，可自动化的搜集检测可用代理并进行评分，并添加了web展示和接口。</p>
<p>程序的几个功能：</p>
<p>1、每天从多个代理ip网站上抓下最新高匿ip数据。</p>
<p>2、经过筛选后的ip将存入数据库。</p>
<p>3、存入数据库的ip每天也要经过测试，存在剔除、评分机制，多次不合格的ip将被删除，每个ip都被评分，我们最终可以按得分排名获得稳定、低响应时间的优质ip。</p>
<p>项目地址：<a href="https://github.com/TideSec/Proxy_Pool">https://github.com/TideSec/Proxy_Pool</a></p>
<p>还有另一个推荐的爬虫代理IP池项目：<a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a></p>
<h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><p>1、安装python2依赖库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">pip install requests</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>2、将源代码从GitHub上下载，把代码放在Web目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/TideSec/Proxy_Pool</span><br><span class="line">mv Proxy_Pool /var/html/www/</span><br><span class="line">cd /var/html/www/Proxy_Pool/</span><br><span class="line">vim include/config.inc.php	# 修改配置中的数据库用户名和密码</span><br><span class="line">cd py_proxy_task/</span><br></pre></td></tr></table></figure>

<p>3、开启mysql或mariadb数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mariadb start</span><br></pre></td></tr></table></figure>

<p>4、修改配置文件py_proxy_task/config.py（修改数据库用户名、密码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim config.py</span><br></pre></td></tr></table></figure>

<p>5、使用python2运行proxy_get.py爬取代理IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 proxy_get.py</span><br></pre></td></tr></table></figure>

<p>6、使用python2运行proxy_check.py查看代理IP的存活情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 proxy_check.py</span><br></pre></td></tr></table></figure>

<p>7、访问站点</p>
<p><img src="https://i.loli.net/2021/10/05/Gbka1vNJfAnYlqc.png" alt="09d2f1b47ee8e924662b4f4c8118549c.png"></p>
<p>8、Web接口</p>
<p><img src="https://i.loli.net/2021/10/05/RhXt4ZGwEPyQMzp.png" alt="e1d2fce67714788f2e78be5ceb0402a9.png"></p>
<h3 id="将代理池IP自动添加入proxychains配置"><a href="#将代理池IP自动添加入proxychains配置" class="headerlink" title="将代理池IP自动添加入proxychains配置"></a>将代理池IP自动添加入proxychains配置</h3><p>远程添加可以使用Web接口，这里就不使用Web接口了，直接利用数据库中的数据进行添加。</p>
<p>记得提前备份好配置文件。</p>
<p>不多说直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> re,time</span><br><span class="line"></span><br><span class="line">db_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">db_user = <span class="string">&quot;root&quot;</span></span><br><span class="line">db_pass = <span class="string">&quot;123456&quot;</span></span><br><span class="line">db_name = <span class="string">&quot;proxy&quot;</span></span><br><span class="line">filename = <span class="string">&quot;/etc/proxychains4.conf&quot;</span></span><br><span class="line"></span><br><span class="line">ips = []</span><br><span class="line">ports = []</span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">        host=db_host,</span><br><span class="line">        user=db_user,</span><br><span class="line">        password=db_pass,</span><br><span class="line">        database=db_name,</span><br><span class="line">        charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;SELECT content FROM valid_ip&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchall()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    ips.append(re.findall(<span class="string">r&#x27;\d+.\d+.\d+.\d+&#x27;</span>,result[<span class="number">0</span>])[<span class="number">0</span>])</span><br><span class="line">    ports.append(re.findall(<span class="string">r&#x27;(?&lt;=:)\d+&#x27;</span>,result[<span class="number">0</span>])[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;random_chain\nproxy_dns\nremote_dns_subnet 224\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\n\n[ProxyList]\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(ips)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--&gt; IP: &quot;</span>,ips[i],<span class="string">&quot;  PORT: &quot;</span>,ports[i],<span class="string">&quot; &lt;--&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (filename,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;http  %s  %s\n&quot;</span> %(ips[i],ports[i]))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>不过这个代理池很多ip都用不了。</p>
<p>让我们再对脚本做亿点点优化，增加了对端口的存活验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql,socket,threading</span><br><span class="line"><span class="keyword">import</span> re,time,nmap</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> f</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetProxy</span>:</span></span><br><span class="line">    db_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    db_user = <span class="string">&quot;root&quot;</span></span><br><span class="line">    db_pass = <span class="string">&quot;1231414514&quot;</span></span><br><span class="line">    db_name = <span class="string">&quot;proxy&quot;</span></span><br><span class="line">    filename = <span class="string">&quot;/etc/proxychains4.conf&quot;</span></span><br><span class="line">    ips = []</span><br><span class="line">    ports = []</span><br><span class="line">    nm = nmap.PortScanner()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_port</span>(<span class="params">self,ip,port</span>):</span></span><br><span class="line">        <span class="comment">#sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span></span><br><span class="line">        <span class="comment">#sock.settimeout(5)</span></span><br><span class="line">        <span class="comment">#result = sock.connect_ex((ip,port))</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.nm.scan(ip,port)</span><br><span class="line">            result = self.nm[ip][<span class="string">&#x27;tcp&#x27;</span>][<span class="built_in">int</span>(port)][<span class="string">&#x27;state&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> result==<span class="string">&#x27;open&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;--&gt; IP: &quot;</span>,ip,<span class="string">&quot;  PORT: &quot;</span>,port,<span class="string">&quot; &lt;--&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(self.filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(<span class="string">&quot;http  %s  %s\n&quot;</span> % (ip, port))</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sql</span>(<span class="params">self</span>):</span></span><br><span class="line">        conn = pymysql.connect(</span><br><span class="line">                host=self.db_host,</span><br><span class="line">                user=self.db_user,</span><br><span class="line">                password=self.db_pass,</span><br><span class="line">                database=self.db_name,</span><br><span class="line">                charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">&quot;SELECT content FROM valid_ip&quot;</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        self.results = cursor.fetchall()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> self.results:</span><br><span class="line">            self.ips.append(re.findall(<span class="string">r&#x27;\d+.\d+.\d+.\d+&#x27;</span>,result[<span class="number">0</span>])[<span class="number">0</span>])</span><br><span class="line">            self.ports.append(re.findall(<span class="string">r&#x27;(?&lt;=:)\d+&#x27;</span>,result[<span class="number">0</span>])[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span> (self.filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">&quot;random_chain\nproxy_dns\nremote_dns_subnet 224\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\n\n[ProxyList]\n&quot;</span>)</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.threads = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(self.ips)):</span><br><span class="line">            self.threads.append(</span><br><span class="line">                threading.Thread(target=GetProxy.check_port, args=(self, self.ips[i],self.ports[i],))</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> self.threads:</span><br><span class="line">            thread.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> self.threads:</span><br><span class="line">            thread.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proxy = GetProxy()</span><br><span class="line">    proxy.get_sql()</span><br><span class="line">    proxy.get_result()</span><br><span class="line">    proxy.multi_thread()</span><br></pre></td></tr></table></figure>

<p>虽然筛选掉了大部分未存活的主机，但是还是有很多代理连接超时。</p>
<p>总结：天底下没有免费的午餐，免费的不一定就好。有能力的还是选择使用付费代理吧。</p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>针对网络协议的暴力破解</title>
    <url>/2021/10/05/0x02%20%E6%89%AB%E6%8F%8F%E4%B8%8E%E6%9E%9A%E4%B8%BE/9.%20%E9%92%88%E5%AF%B9%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="弱口令与字典"><a href="#弱口令与字典" class="headerlink" title="弱口令与字典"></a>弱口令与字典</h2><h3 id="弱口令的定义"><a href="#弱口令的定义" class="headerlink" title="弱口令的定义"></a>弱口令的定义</h3><p>弱口令(weak password) 没有严格和准确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。弱口令指的是仅包含简单数字和字母的口令，例如“123”、“abc”等，因为这样的口令很容易被别人破解，从而使用户的互联网账号受到他人控制，因此不推荐用户使用。</p>
<h3 id="弱口令产生原因"><a href="#弱口令产生原因" class="headerlink" title="弱口令产生原因"></a>弱口令产生原因</h3><p>这个应该是与个人习惯相关与意识相关，为了避免忘记密码，使用一个非常容易记住的密码，或者是直接采用系统的默认密码等。相关的安全意识不够，总认为不会有人会猜到我这个弱口令的，相关的安全意识不够，总认为不会有人会猜到我这个弱口令的。</p>
<h3 id="弱口令的危害"><a href="#弱口令的危害" class="headerlink" title="弱口令的危害"></a>弱口令的危害</h3><p>通过系统弱口令，可被黑客直接获得系统控制权限。</p>
<h3 id="弱口令解决办法"><a href="#弱口令解决办法" class="headerlink" title="弱口令解决办法"></a>弱口令解决办法</h3><p>强制对所有的管理系统账号密码强度必须达到一定的级别。不可在使用简单的admin、123456等弱密码了，修改密码为复杂密码并加密保存，建议密码包含大小写字母，数据和特殊符号，密码长度不低于八位，如果网站存在数据泄漏漏洞（如sql注入漏洞），务必修复漏洞。。</p>
<p>设置密码通常遵循以下原则：</p>
<p>（1）不使用空口令或系统缺省的口令，这些口令众所周之，为典型的弱口令。</p>
<p>（2）口令长度不小于8 个字符。</p>
<p>（3）口令不应该为连续的某个字符（例如：AAAAAAAA）或重复某些字符的组合（例如：tzf.tzf.）。</p>
<p>（4）口令应该为以下四类字符的组合，大写字母(A-Z)、小写字母(a-z)、数字(0-9)和特殊字符。每类字符至少包含一个。如果某类字符只包含一个，那么该字符不应为首字符或尾字符。</p>
<p>（5）口令中不应包含本人、父母、子女和配偶的姓名和出生日期、纪念日期、登录名、E-mail 地址等等与本人有关的信息，以及字典中的单词。</p>
<p>（6）口令不应该为用数字或符号代替某些字母的单词。</p>
<p>（7）口令应该易记且可以快速输入，防止他人从你身后很容易看到你的输入。</p>
<p>（8）至少90 天内更换一次口令，防止未被发现的入侵者继续使用该口令。</p>
<h3 id="弱口令分类"><a href="#弱口令分类" class="headerlink" title="弱口令分类"></a>弱口令分类</h3><h4 id="公共弱口令"><a href="#公共弱口令" class="headerlink" title="公共弱口令"></a>公共弱口令</h4><p>公共弱口令就是常见的密码，公共弱口令也就是根据大量的密码数据统计得出的出现频率较高弱口令，关于这方面的弱口令统计结果有很多。</p>
<p>下列举例了10个全球最常用的弱口令（由安全公司NordPass公布）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123456</span><br><span class="line">123456789</span><br><span class="line">picture1</span><br><span class="line">password</span><br><span class="line">12345678</span><br><span class="line">111111</span><br><span class="line">123123</span><br><span class="line">12345</span><br><span class="line">1234567890</span><br><span class="line">senha</span><br></pre></td></tr></table></figure>

<p>其中，位居其三的picture1和位居其十的senha（在葡萄牙语中是密码的意思）均是2020年新上榜的密码。</p>
<p>完整榜单：<a href="https://nordpass.com/most-common-passwords-list/">https://nordpass.com/most-common-passwords-list/</a></p>
<p>对于网站后台而言，一般为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">manager</span><br><span class="line">admin123</span><br><span class="line">admin888</span><br><span class="line">admin666</span><br></pre></td></tr></table></figure>

<p>具体来说，不同的后台类型拥有不同的弱密码：</p>
<ul>
<li>数据库（phpmyadmin）：账号：root，密码：root、root123、123456</li>
<li>tomcat：账号：admin、tomcat、manager，密码：admin、tomcat、admin123、123456、manager</li>
<li>jboss：账号：admin、jboss、manager，密码：admin、jboss、manager、123456</li>
<li>weblogic：账号：weblogic、admin、manager，密码：weblogic、admin、manager、123456</li>
</ul>
<h4 id="条件弱口令"><a href="#条件弱口令" class="headerlink" title="条件弱口令"></a>条件弱口令</h4><p>个人弱口令往往与这个人的个人信息（姓名，生日，手机号，特殊昵称，爱好，社交软件账号，常用username,邮箱…），关系成员（家庭成员，男女朋友…），所处环境（车牌号，公司信息比如公司名称，公司成立时间或地点，公司domain等…），还有特殊的指定字符（数字，单词…），在这里我也列举一些经常出现的组合：我们可以使用一些工具来生成弱口令字典。</p>
<h3 id="弱口令字典生成工具"><a href="#弱口令字典生成工具" class="headerlink" title="弱口令字典生成工具"></a>弱口令字典生成工具</h3><h4 id="Pydictor"><a href="#Pydictor" class="headerlink" title="Pydictor"></a>Pydictor</h4><p>pydictor 是一款轻量级字典生成工具，使用 python 语言开发，遵循 GPLv3 协议的开源命令行工具，主要用来帮助安全研究人员生成称心如意的暴力破解字典。</p>
<p>以功能强大、简洁实用、适用场景多、自定义程度强为开发目标。</p>
<p>项目地址：<a href="https://github.com/LandGrey/pydictor">https://github.com/LandGrey/pydictor</a></p>
<h4 id="cupper"><a href="#cupper" class="headerlink" title="cupper"></a>cupper</h4><p>基于国外的一款社工字典生成工具（cupp）进行改进。因为cupp多年不更新而且密码生成习惯和汉语还是有很大差异的，在渗透测试环节存在许多问题。因此最初为了be better than cupp，社工密码生成器命名为cupper。但是现在这款工具的目标不仅仅是be better than cupp，而是力求达到国内最好的社工密码猜解效果。</p>
<p>项目地址：<a href="https://github.com/Saferman/cupper">https://github.com/Saferman/cupper</a></p>
<h4 id="PassGAN"><a href="#PassGAN" class="headerlink" title="PassGAN"></a>PassGAN</h4><p>基于深度学习，来训练PassGAN模型来生成密码。是第一个利用生成对抗网络（GANs）来增强密码破译的新方法。</p>
<p>（虽然我也没用过，感觉很NB的样子）</p>
<p>项目地址：<a href="https://github.com/brannondorsey/PassGAN">https://github.com/brannondorsey/PassGAN</a></p>
<h4 id="Crunch"><a href="#Crunch" class="headerlink" title="Crunch"></a>Crunch</h4><p>Crunch是一种创建密码字典工具，按照指定的规则生成密码字典，可以灵活的制定自己的字典文件。使用Crunch工具生成的密码可以输出到屏幕，保存到文件、或另一个程序。由其在渗透测试需要爆破的时候，字典的编排等直接影响到我们的爆破速度，对整个渗透测试流程起着十分重要的作用。</p>
<p>Crunch为kali自带工具之一。</p>
<p>使用教程：<a href="https://www.freebuf.com/sectool/170817.html">https://www.freebuf.com/sectool/170817.html</a></p>
<h3 id="Kali-Linux自带的字典"><a href="#Kali-Linux自带的字典" class="headerlink" title="Kali Linux自带的字典"></a>Kali Linux自带的字典</h3><p>Kali默认自带了一些字典，在 /usr/share/wordlists 目录下</p>
<p><img src="https://i.loli.net/2021/10/05/DwTF1z3xgV6PU9X.png" alt="a628e9d255698b11b1e78e7ec24e0979.png"></p>
<h2 id="暴力破解网络协议工具"><a href="#暴力破解网络协议工具" class="headerlink" title="暴力破解网络协议工具"></a>暴力破解网络协议工具</h2><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Hydra是一款非常强大的暴力破解工具，它是由著名的黑客组织THC开发的一款开源暴力破解工具。Hydra是一个验证性质的工具，主要目的是：展示安全研究人员从远程获取一个系统认证权限。</p>
<p>目前该工具支持以下协议的爆破： AFP，Cisco AAA，Cisco身份验证，Cisco启用，CVS，Firebird，FTP，HTTP-FORM-GET，HTTP-FORM-POST，HTTP-GET，HTTP-HEAD，HTTP-PROXY，HTTPS-FORM- GET，HTTPS-FORM-POST，HTTPS-GET，HTTPS-HEAD，HTTP-Proxy，ICQ，IMAP，IRC，LDAP，MS-SQL，MYSQL，NCP，NNTP，Oracle Listener，Oracle SID，Oracle，PC-Anywhere， PCNFS，POP3，POSTGRES，RDP，Rexec，Rlogin，Rsh，SAP / R3，SIP，SMB，SMTP，SMTP枚举，SNMP，SOCKS5，SSH（v1和v2），Subversion，Teamspeak（TS2），Telnet，VMware-Auth ，VNC和XMPP。</p>
<p>对于 HTTP，POP3，IMAP和SMTP，支持几种登录机制，如普通和MD5摘要等。</p>
<p>由于Kali中自带Hydra，所以怎么安装就不讲了，下面直接讲如何用它。</p>
<h4 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h4><ul>
<li>-R：继续从上一次进度接着破解</li>
<li>-S：大写，采用SSL链接</li>
<li>-s &lt;PORT&gt;：小写，可通过这个参数指定非默认端口</li>
<li>-l &lt;LOGIN&gt;：指定破解的用户，对特定用户破解</li>
<li>-L &lt;FILE&gt;：指定用户名字典</li>
<li>-p &lt;PASS&gt;：小写，指定密码破解，少用，一般是采用密码字典</li>
<li>-P &lt;FILE&gt;：大写，指定密码字典</li>
<li>-e &lt;ns&gt;：可选选项，n：空密码试探，s：使用指定用户和密码试探</li>
<li>-C &lt;FILE&gt;：使用冒号分割格式，例如“登录名:密码”来代替 -L/-P 参数</li>
<li>-M &lt;FILE&gt;：指定目标列表文件一行一条</li>
<li>-o &lt;FILE&gt;：指定结果输出文件</li>
<li>-f ：在使用-M参数以后，找到第一对登录名或者密码的时候中止破解</li>
<li>-t &lt;TASKS&gt;：同时运行的线程数，默认为16</li>
<li>-w &lt;TIME&gt;：设置最大超时的时间，单位秒，默认是30s</li>
<li>-v / -V：显示详细过程</li>
<li>server：目标ip</li>
<li>service：指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http[s]-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等</li>
<li>OPT：可选项</li>
</ul>
<h4 id="破解SSH"><a href="#破解SSH" class="headerlink" title="破解SSH"></a>破解SSH</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P passwd.txt -o ssh.txt -vV -t 5 192.168.11.93 ssh</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/yZYIcgOoWD5bfdQ.png" alt="8358c8a89b5d02c7670ea8ae718c13a4.png"></p>
<h4 id="破解FTP"><a href="#破解FTP" class="headerlink" title="破解FTP"></a>破解FTP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P passwd.txt -o ftp.txt -vV -t 8 192.168.11.93 ftp</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/PEl2azG9xBXYgmi.png" alt="a7b52aa8f605b834afe39b955495a3c9.png"></p>
<h4 id="破解3389远程登录"><a href="#破解3389远程登录" class="headerlink" title="破解3389远程登录"></a>破解3389远程登录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdra -L user.txt -P passwd.txt -vV -t 16 192.168.14.198 rdp</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/uKeEW4zFgTHDtAY.png" alt="ab8ecf65d9bab340efc97288dd255f8f.png"></p>
<h3 id="Medusa"><a href="#Medusa" class="headerlink" title="Medusa"></a>Medusa</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>medusa（美杜莎）是一个速度快，支持大规模并行，模块化，爆破登陆，可以同时对多个主机，用户或是密码执行强力测试，medusa和hydra一样，同样属于在线破解工具，不同的是，medusa的稳定性相较于hydra要好很多但是支持的模块相对于hydra少一些。</p>
<h4 id="常见参数-1"><a href="#常见参数-1" class="headerlink" title="常见参数"></a>常见参数</h4><ul>
<li>-h 目标主机名称或是IP地址</li>
<li>-H 包含目标主机名称或是IP地址文件</li>
<li>-u 测试用户名</li>
<li>-U 包含测试用户名文件</li>
<li>-p 测试用户名密码</li>
<li>-P 包含测试用户名密码文件</li>
<li>-C 组合条件文件</li>
<li>-O 日志信息文件</li>
<li>-e[n/s/ns] n代表空密码，s代表为密码于用户名相同</li>
<li>-M 模块执行mingc</li>
<li>-m 传递参数到模块</li>
<li>-d 显示所有模块名称</li>
<li>-n 使用非默认TCP端口</li>
<li>-s 启用ssl</li>
<li>-r 重试时间，默认3秒</li>
<li>-t 设定线程数量</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li>破解ftp服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">medusa -u root -P comon.lst -h 192.168.200.243 -M ftp</span><br></pre></td></tr></table></figure>

<ul>
<li>破解ssh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">medusa -u root -P comon.lst -h 192.168.200.244 -e ns -M ssh</span><br></pre></td></tr></table></figure>

<h3 id="Sparta"><a href="#Sparta" class="headerlink" title="Sparta"></a>Sparta</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>Sparta是一个Nmap、Nikto、Hydra等工具的集合，利用各个工具的优秀功能，完成信息收集、扫描和爆破等一体化的工具流。</p>
<p>Sparta主要包含以下功能：</p>
<p>端口扫描，程序自动调用nmap进行扫描，根据nmap的扫描结果，nikto自动加载结果，展开更精确的扫描。</p>
<p>针对扫描的结果，特定使用，如：使用dirbuster目录爆破，利用webslayer进行web指纹识别。</p>
<p>针对可爆力破解的端口，可调用hydra进行暴力破解。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/secforce/sparta.git</span><br><span class="line">cd sparta/ </span><br><span class="line">python3 sparta.py</span><br></pre></td></tr></table></figure>

<h2 id="破解加密明文"><a href="#破解加密明文" class="headerlink" title="破解加密明文"></a>破解加密明文</h2><h3 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a>John the Ripper</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p><strong>John the Ripper</strong>是一个快速的密码破解工具，用于在已知密文的情况下尝试破解出明文，支持目前大多数的加密算法，如DES、MD4、MD5等。它支持多种不同类型的系统架构，包括Unix、Linux、Windows、DOS模式、BeOS和OpenVMS，主要目的是破解不够牢固的Unix/Linux系统密码。除了在各种Unix系统上最常见的几种密码哈希类型之外，它还支持Windows LM散列，以及社区增强版本中的许多其他哈希和密码。它是一款开源软件。Kali中自带John。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可执行文件位置：  /usr/sbin/john</span><br><span class="line">密码字典所在目录：/usr/share/john/</span><br></pre></td></tr></table></figure>

<p>John the Ripper支持字典破解方式和暴力破解方式</p>
<h4 id="破解Linux系统密码"><a href="#破解Linux系统密码" class="headerlink" title="破解Linux系统密码"></a>破解Linux系统密码</h4><p>破解Linux用户密码需要使用到两个文件（包含用户的信息和密码hash值）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd       包含用户信息的文件</span><br><span class="line">/etc/shadow       包含密码信息的文件</span><br></pre></td></tr></table></figure>

<p>创建一个 abc 用户，密码设置为 password ，用来测试</p>
<p><img src="https://i.loli.net/2021/10/05/dXw3oM2gVsRShIT.png" alt="img"></p>
<p>使用 unshadow 命令组合 /etc/passwd 和 /etc/shadow ，组合成 test_passwd 文件。其他 test_passwd 就是 /etc/passwd 和 /etc/shadow 的简单组合:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unshadow  /etc/passwd  /etc/shadow &gt;  test_passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/05/1ZMmCKRvUqYdVjJ.png" alt="img"></p>
<p>然后用 John 破解密码了。我们可以使用 John 自带的密码字典，位于 /usr/share/john/password.lst ，也可以使用我们自己的密码字典。用John自带的密码字典为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john  test_passwd</span><br></pre></td></tr></table></figure>

<p>若使用自己的密码字典：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john  --wordlist=字典路径    test_passw</span><br></pre></td></tr></table></figure>

<p>如图，john 已经把abc用户的密码给破解出来了</p>
<p><img src="https://img2018.cnblogs.com/blog/1799753/201909/1799753-20190911184224293-1248939128.png" alt="img"></p>
<p>查看破解信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john  --show  test_passwd</span><br></pre></td></tr></table></figure>

<p>这里root和yjx的密码是之前破解的，则一共破解了3个用户的密码</p>
<p><img src="https://img2018.cnblogs.com/blog/1799753/201909/1799753-20190911184325741-392468403.png" alt="img"></p>
<h3 id="在线MD5破解网站"><a href="#在线MD5破解网站" class="headerlink" title="在线MD5破解网站"></a>在线MD5破解网站</h3><ul>
<li>CMD5：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></li>
<li>SOMD5：<a href="https://www.somd5.com/">https://www.somd5.com/</a></li>
<li>查MD5啦：<a href="https://cmd5.la/">https://cmd5.la/</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>扫描与枚举</category>
      </categories>
      <tags>
        <tag>扫描与枚举</tag>
      </tags>
  </entry>
</search>
